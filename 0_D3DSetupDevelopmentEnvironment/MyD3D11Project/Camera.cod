; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	F:\Common\Camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_XMSinCoefficients0@@3UXMVECTORF32@@B		; g_XMSinCoefficients0
PUBLIC	?g_XMSinCoefficients1@@3UXMVECTORF32@@B		; g_XMSinCoefficients1
PUBLIC	?g_XMSinCoefficients2@@3UXMVECTORF32@@B		; g_XMSinCoefficients2
PUBLIC	?g_XMCosCoefficients0@@3UXMVECTORF32@@B		; g_XMCosCoefficients0
PUBLIC	?g_XMCosCoefficients1@@3UXMVECTORF32@@B		; g_XMCosCoefficients1
PUBLIC	?g_XMCosCoefficients2@@3UXMVECTORF32@@B		; g_XMCosCoefficients2
PUBLIC	?g_XMTanCoefficients0@@3UXMVECTORF32@@B		; g_XMTanCoefficients0
PUBLIC	?g_XMTanCoefficients1@@3UXMVECTORF32@@B		; g_XMTanCoefficients1
PUBLIC	?g_XMTanCoefficients2@@3UXMVECTORF32@@B		; g_XMTanCoefficients2
PUBLIC	?g_XMASinCoefficients0@@3UXMVECTORF32@@B	; g_XMASinCoefficients0
PUBLIC	?g_XMASinCoefficients1@@3UXMVECTORF32@@B	; g_XMASinCoefficients1
PUBLIC	?g_XMASinCoefficients2@@3UXMVECTORF32@@B	; g_XMASinCoefficients2
PUBLIC	?g_XMATanCoefficients0@@3UXMVECTORF32@@B	; g_XMATanCoefficients0
PUBLIC	?g_XMATanCoefficients1@@3UXMVECTORF32@@B	; g_XMATanCoefficients1
PUBLIC	?g_XMATanCoefficients2@@3UXMVECTORF32@@B	; g_XMATanCoefficients2
PUBLIC	?g_XMSinEstCoefficients@@3UXMVECTORF32@@B	; g_XMSinEstCoefficients
PUBLIC	?g_XMCosEstCoefficients@@3UXMVECTORF32@@B	; g_XMCosEstCoefficients
PUBLIC	?g_XMTanEstCoefficients@@3UXMVECTORF32@@B	; g_XMTanEstCoefficients
PUBLIC	?g_XMATanEstCoefficients@@3UXMVECTORF32@@B	; g_XMATanEstCoefficients
PUBLIC	?g_XMASinEstCoefficients@@3UXMVECTORF32@@B	; g_XMASinEstCoefficients
PUBLIC	?g_XMASinEstConstants@@3UXMVECTORF32@@B		; g_XMASinEstConstants
PUBLIC	?g_XMPiConstants0@@3UXMVECTORF32@@B		; g_XMPiConstants0
PUBLIC	?g_XMIdentityR0@@3UXMVECTORF32@@B		; g_XMIdentityR0
PUBLIC	?g_XMIdentityR1@@3UXMVECTORF32@@B		; g_XMIdentityR1
PUBLIC	?g_XMIdentityR2@@3UXMVECTORF32@@B		; g_XMIdentityR2
PUBLIC	?g_XMIdentityR3@@3UXMVECTORF32@@B		; g_XMIdentityR3
PUBLIC	?g_XMNegIdentityR0@@3UXMVECTORF32@@B		; g_XMNegIdentityR0
PUBLIC	?g_XMNegIdentityR1@@3UXMVECTORF32@@B		; g_XMNegIdentityR1
PUBLIC	?g_XMNegIdentityR2@@3UXMVECTORF32@@B		; g_XMNegIdentityR2
PUBLIC	?g_XMNegIdentityR3@@3UXMVECTORF32@@B		; g_XMNegIdentityR3
PUBLIC	?g_XMNegativeZero@@3UXMVECTORI32@@B		; g_XMNegativeZero
PUBLIC	?g_XMNegate3@@3UXMVECTORI32@@B			; g_XMNegate3
PUBLIC	?g_XMMask3@@3UXMVECTORI32@@B			; g_XMMask3
PUBLIC	?g_XMMaskX@@3UXMVECTORI32@@B			; g_XMMaskX
PUBLIC	?g_XMMaskY@@3UXMVECTORI32@@B			; g_XMMaskY
PUBLIC	?g_XMMaskZ@@3UXMVECTORI32@@B			; g_XMMaskZ
PUBLIC	?g_XMMaskW@@3UXMVECTORI32@@B			; g_XMMaskW
PUBLIC	?g_XMOne@@3UXMVECTORF32@@B			; g_XMOne
PUBLIC	?g_XMOne3@@3UXMVECTORF32@@B			; g_XMOne3
PUBLIC	?g_XMZero@@3UXMVECTORF32@@B			; g_XMZero
PUBLIC	?g_XMNegativeOne@@3UXMVECTORF32@@B		; g_XMNegativeOne
PUBLIC	?g_XMOneHalf@@3UXMVECTORF32@@B			; g_XMOneHalf
PUBLIC	?g_XMNegativeOneHalf@@3UXMVECTORF32@@B		; g_XMNegativeOneHalf
PUBLIC	?g_XMNegativeTwoPi@@3UXMVECTORF32@@B		; g_XMNegativeTwoPi
PUBLIC	?g_XMNegativePi@@3UXMVECTORF32@@B		; g_XMNegativePi
PUBLIC	?g_XMHalfPi@@3UXMVECTORF32@@B			; g_XMHalfPi
PUBLIC	?g_XMPi@@3UXMVECTORF32@@B			; g_XMPi
PUBLIC	?g_XMReciprocalPi@@3UXMVECTORF32@@B		; g_XMReciprocalPi
PUBLIC	?g_XMTwoPi@@3UXMVECTORF32@@B			; g_XMTwoPi
PUBLIC	?g_XMReciprocalTwoPi@@3UXMVECTORF32@@B		; g_XMReciprocalTwoPi
PUBLIC	?g_XMEpsilon@@3UXMVECTORF32@@B			; g_XMEpsilon
PUBLIC	?g_XMInfinity@@3UXMVECTORI32@@B			; g_XMInfinity
PUBLIC	?g_XMQNaN@@3UXMVECTORI32@@B			; g_XMQNaN
PUBLIC	?g_XMQNaNTest@@3UXMVECTORI32@@B			; g_XMQNaNTest
PUBLIC	?g_XMAbsMask@@3UXMVECTORI32@@B			; g_XMAbsMask
PUBLIC	?g_XMFltMin@@3UXMVECTORI32@@B			; g_XMFltMin
PUBLIC	?g_XMFltMax@@3UXMVECTORI32@@B			; g_XMFltMax
PUBLIC	?g_XMNegOneMask@@3UXMVECTORI32@@B		; g_XMNegOneMask
PUBLIC	?g_XMMaskA8R8G8B8@@3UXMVECTORI32@@B		; g_XMMaskA8R8G8B8
PUBLIC	?g_XMFlipA8R8G8B8@@3UXMVECTORI32@@B		; g_XMFlipA8R8G8B8
PUBLIC	?g_XMFixAA8R8G8B8@@3UXMVECTORF32@@B		; g_XMFixAA8R8G8B8
PUBLIC	?g_XMNormalizeA8R8G8B8@@3UXMVECTORF32@@B	; g_XMNormalizeA8R8G8B8
PUBLIC	?g_XMMaskA2B10G10R10@@3UXMVECTORI32@@B		; g_XMMaskA2B10G10R10
PUBLIC	?g_XMFlipA2B10G10R10@@3UXMVECTORI32@@B		; g_XMFlipA2B10G10R10
PUBLIC	?g_XMFixAA2B10G10R10@@3UXMVECTORF32@@B		; g_XMFixAA2B10G10R10
PUBLIC	?g_XMNormalizeA2B10G10R10@@3UXMVECTORF32@@B	; g_XMNormalizeA2B10G10R10
PUBLIC	?g_XMMaskX16Y16@@3UXMVECTORI32@@B		; g_XMMaskX16Y16
PUBLIC	?g_XMFlipX16Y16@@3UXMVECTORI32@@B		; g_XMFlipX16Y16
PUBLIC	?g_XMFixX16Y16@@3UXMVECTORF32@@B		; g_XMFixX16Y16
PUBLIC	?g_XMNormalizeX16Y16@@3UXMVECTORF32@@B		; g_XMNormalizeX16Y16
PUBLIC	?g_XMMaskX16Y16Z16W16@@3UXMVECTORI32@@B		; g_XMMaskX16Y16Z16W16
PUBLIC	?g_XMFlipX16Y16Z16W16@@3UXMVECTORI32@@B		; g_XMFlipX16Y16Z16W16
PUBLIC	?g_XMFixX16Y16Z16W16@@3UXMVECTORF32@@B		; g_XMFixX16Y16Z16W16
PUBLIC	?g_XMNormalizeX16Y16Z16W16@@3UXMVECTORF32@@B	; g_XMNormalizeX16Y16Z16W16
PUBLIC	?g_XMNoFraction@@3UXMVECTORF32@@B		; g_XMNoFraction
PUBLIC	?g_XMMaskByte@@3UXMVECTORI32@@B			; g_XMMaskByte
PUBLIC	?g_XMNegateX@@3UXMVECTORF32@@B			; g_XMNegateX
PUBLIC	?g_XMNegateY@@3UXMVECTORF32@@B			; g_XMNegateY
PUBLIC	?g_XMNegateZ@@3UXMVECTORF32@@B			; g_XMNegateZ
PUBLIC	?g_XMNegateW@@3UXMVECTORF32@@B			; g_XMNegateW
PUBLIC	?g_XMSelect0101@@3UXMVECTORI32@@B		; g_XMSelect0101
PUBLIC	?g_XMSelect1010@@3UXMVECTORI32@@B		; g_XMSelect1010
PUBLIC	?g_XMOneHalfMinusEpsilon@@3UXMVECTORI32@@B	; g_XMOneHalfMinusEpsilon
PUBLIC	?g_XMSelect1000@@3UXMVECTORI32@@B		; g_XMSelect1000
PUBLIC	?g_XMSelect1100@@3UXMVECTORI32@@B		; g_XMSelect1100
PUBLIC	?g_XMSelect1110@@3UXMVECTORI32@@B		; g_XMSelect1110
PUBLIC	?g_XMSwizzleXYXY@@3UXMVECTORI32@@B		; g_XMSwizzleXYXY
PUBLIC	?g_XMSwizzleXYZX@@3UXMVECTORI32@@B		; g_XMSwizzleXYZX
PUBLIC	?g_XMSwizzleYXZW@@3UXMVECTORI32@@B		; g_XMSwizzleYXZW
PUBLIC	?g_XMSwizzleYZXW@@3UXMVECTORI32@@B		; g_XMSwizzleYZXW
PUBLIC	?g_XMSwizzleZXYW@@3UXMVECTORI32@@B		; g_XMSwizzleZXYW
PUBLIC	?g_XMPermute0X0Y1X1Y@@3UXMVECTORI32@@B		; g_XMPermute0X0Y1X1Y
PUBLIC	?g_XMPermute0Z0W1Z1W@@3UXMVECTORI32@@B		; g_XMPermute0Z0W1Z1W
PUBLIC	?g_XMFixupY16@@3UXMVECTORF32@@B			; g_XMFixupY16
PUBLIC	?g_XMFixupY16W16@@3UXMVECTORF32@@B		; g_XMFixupY16W16
PUBLIC	?g_XMFlipY@@3UXMVECTORI32@@B			; g_XMFlipY
PUBLIC	?g_XMFlipZ@@3UXMVECTORI32@@B			; g_XMFlipZ
PUBLIC	?g_XMFlipW@@3UXMVECTORI32@@B			; g_XMFlipW
PUBLIC	?g_XMFlipYZ@@3UXMVECTORI32@@B			; g_XMFlipYZ
PUBLIC	?g_XMFlipZW@@3UXMVECTORI32@@B			; g_XMFlipZW
PUBLIC	?g_XMFlipYW@@3UXMVECTORI32@@B			; g_XMFlipYW
PUBLIC	?g_XMMaskHenD3@@3UXMVECTORI32@@B		; g_XMMaskHenD3
PUBLIC	?g_XMMaskDHen3@@3UXMVECTORI32@@B		; g_XMMaskDHen3
PUBLIC	?g_XMAddUHenD3@@3UXMVECTORF32@@B		; g_XMAddUHenD3
PUBLIC	?g_XMAddHenD3@@3UXMVECTORF32@@B			; g_XMAddHenD3
PUBLIC	?g_XMAddDHen3@@3UXMVECTORF32@@B			; g_XMAddDHen3
PUBLIC	?g_XMMulHenD3@@3UXMVECTORF32@@B			; g_XMMulHenD3
PUBLIC	?g_XMMulDHen3@@3UXMVECTORF32@@B			; g_XMMulDHen3
PUBLIC	?g_XMXorHenD3@@3UXMVECTORI32@@B			; g_XMXorHenD3
PUBLIC	?g_XMXorDHen3@@3UXMVECTORI32@@B			; g_XMXorDHen3
PUBLIC	?g_XMMaskIco4@@3UXMVECTORI32@@B			; g_XMMaskIco4
PUBLIC	?g_XMXorXIco4@@3UXMVECTORI32@@B			; g_XMXorXIco4
PUBLIC	?g_XMXorIco4@@3UXMVECTORI32@@B			; g_XMXorIco4
PUBLIC	?g_XMAddXIco4@@3UXMVECTORF32@@B			; g_XMAddXIco4
PUBLIC	?g_XMAddUIco4@@3UXMVECTORF32@@B			; g_XMAddUIco4
PUBLIC	?g_XMAddIco4@@3UXMVECTORF32@@B			; g_XMAddIco4
PUBLIC	?g_XMMulIco4@@3UXMVECTORF32@@B			; g_XMMulIco4
PUBLIC	?g_XMMaskDec4@@3UXMVECTORI32@@B			; g_XMMaskDec4
PUBLIC	?g_XMXorDec4@@3UXMVECTORI32@@B			; g_XMXorDec4
PUBLIC	?g_XMAddUDec4@@3UXMVECTORF32@@B			; g_XMAddUDec4
PUBLIC	?g_XMAddDec4@@3UXMVECTORF32@@B			; g_XMAddDec4
PUBLIC	?g_XMMulDec4@@3UXMVECTORF32@@B			; g_XMMulDec4
PUBLIC	?g_XMMaskByte4@@3UXMVECTORI32@@B		; g_XMMaskByte4
PUBLIC	?g_XMXorByte4@@3UXMVECTORI32@@B			; g_XMXorByte4
PUBLIC	?g_XMAddByte4@@3UXMVECTORF32@@B			; g_XMAddByte4
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?White@Colors@@3UXMVECTORF32@@B			; Colors::White
PUBLIC	?Black@Colors@@3UXMVECTORF32@@B			; Colors::Black
PUBLIC	?Red@Colors@@3UXMVECTORF32@@B			; Colors::Red
PUBLIC	?Green@Colors@@3UXMVECTORF32@@B			; Colors::Green
PUBLIC	?Blue@Colors@@3UXMVECTORF32@@B			; Colors::Blue
PUBLIC	?Yellow@Colors@@3UXMVECTORF32@@B		; Colors::Yellow
PUBLIC	?Cyan@Colors@@3UXMVECTORF32@@B			; Colors::Cyan
PUBLIC	?Magenta@Colors@@3UXMVECTORF32@@B		; Colors::Magenta
PUBLIC	?Silver@Colors@@3UXMVECTORF32@@B		; Colors::Silver
PUBLIC	?LightSteelBlue@Colors@@3UXMVECTORF32@@B	; Colors::LightSteelBlue
;	COMDAT ?LightSteelBlue@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?LightSteelBlue@Colors@@3UXMVECTORF32@@B DD 03f30a3d7r ; 0.69 ; Colors::LightSteelBlue
	DD	03f451eb8r			; 0.77
	DD	03f5eb852r			; 0.87
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Silver@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Silver@Colors@@3UXMVECTORF32@@B DD 03f400000r	; 0.75	; Colors::Silver
	DD	03f400000r			; 0.75
	DD	03f400000r			; 0.75
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Magenta@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Magenta@Colors@@3UXMVECTORF32@@B DD 03f800000r	; 1	; Colors::Magenta
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Cyan@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Cyan@Colors@@3UXMVECTORF32@@B DD 000000000r	; 0	; Colors::Cyan
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Yellow@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Yellow@Colors@@3UXMVECTORF32@@B DD 03f800000r	; 1	; Colors::Yellow
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Blue@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Blue@Colors@@3UXMVECTORF32@@B DD 000000000r	; 0	; Colors::Blue
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Green@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Green@Colors@@3UXMVECTORF32@@B DD 000000000r	; 0	; Colors::Green
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Red@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Red@Colors@@3UXMVECTORF32@@B DD 03f800000r	; 1	; Colors::Red
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?Black@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?Black@Colors@@3UXMVECTORF32@@B DD 000000000r	; 0	; Colors::Black
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?White@Colors@@3UXMVECTORF32@@B
CONST	SEGMENT
?White@Colors@@3UXMVECTORF32@@B DD 03f800000r	; 1	; Colors::White
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?g_XMAddByte4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddByte4@@3UXMVECTORF32@@B DD 0c3000000r	; -128	; g_XMAddByte4
	DD	0c7000000r			; -32768
	DD	0cb000000r			; -8.38861e+006
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMXorByte4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorByte4@@3UXMVECTORI32@@B DD 080H			; g_XMXorByte4
	DD	08000H
	DD	0800000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskByte4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskByte4@@3UXMVECTORI32@@B DD 0ffH		; g_XMMaskByte4
	DD	0ff00H
	DD	0ff0000H
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMMulDec4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMMulDec4@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMMulDec4
	DD	03a800000r			; 0.000976563
	DD	035800000r			; 9.53674e-007
	DD	030800000r			; 9.31323e-010
CONST	ENDS
;	COMDAT ?g_XMAddDec4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddDec4@@3UXMVECTORF32@@B DD 0c4000000r	; -512	; g_XMAddDec4
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+008
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddUDec4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddUDec4@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMAddUDec4
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMXorDec4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorDec4@@3UXMVECTORI32@@B DD 0200H			; g_XMXorDec4
	DD	080000H
	DD	020000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskDec4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskDec4@@3UXMVECTORI32@@B DD 03ffH		; g_XMMaskDec4
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMMulIco4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMMulIco4@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMMulIco4
	DD	039800000r			; 0.000244141
	DD	03f800000r			; 1
	DD	031800000r			; 3.72529e-009
CONST	ENDS
;	COMDAT ?g_XMAddIco4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddIco4@@3UXMVECTORF32@@B DD 0c9000000r	; -524288 ; g_XMAddIco4
	DD	000000000r			; 0
	DD	0c9000000r			; -524288
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddUIco4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddUIco4@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMAddUIco4
	DD	04f000000r			; 2.14748e+009
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMAddXIco4@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddXIco4@@3UXMVECTORF32@@B DD 0c9000000r	; -524288 ; g_XMAddXIco4
	DD	000000000r			; 0
	DD	0c9000000r			; -524288
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMXorIco4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorIco4@@3UXMVECTORI32@@B DD 080000H		; g_XMXorIco4
	DD	00H
	DD	080000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMXorXIco4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorXIco4@@3UXMVECTORI32@@B DD 080000H		; g_XMXorXIco4
	DD	00H
	DD	080000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskIco4@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskIco4@@3UXMVECTORI32@@B DD 0fffffH		; g_XMMaskIco4
	DD	0fffff000H
	DD	0fffffH
	DD	0f0000000H
CONST	ENDS
;	COMDAT ?g_XMXorDHen3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorDHen3@@3UXMVECTORI32@@B DD 0200H		; g_XMXorDHen3
	DD	0100000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMXorHenD3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMXorHenD3@@3UXMVECTORI32@@B DD 0400H		; g_XMXorHenD3
	DD	0200000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMulDHen3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMMulDHen3@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMMulDHen3
	DD	03a800000r			; 0.000976563
	DD	035000000r			; 4.76837e-007
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMMulHenD3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMMulHenD3@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMMulHenD3
	DD	03a000000r			; 0.000488281
	DD	034800000r			; 2.38419e-007
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddDHen3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddDHen3@@3UXMVECTORF32@@B DD 0c4000000r	; -512	; g_XMAddDHen3
	DD	0c9800000r			; -1.04858e+006
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddHenD3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddHenD3@@3UXMVECTORF32@@B DD 0c4800000r	; -1024	; g_XMAddHenD3
	DD	0ca000000r			; -2.09715e+006
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMAddUHenD3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMAddUHenD3@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMAddUHenD3
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMMaskDHen3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskDHen3@@3UXMVECTORI32@@B DD 03ffH		; g_XMMaskDHen3
	DD	01ffc00H
	DD	0ffe00000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskHenD3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskHenD3@@3UXMVECTORI32@@B DD 07ffH		; g_XMMaskHenD3
	DD	03ff800H
	DD	0ffc00000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipYW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipYW@@3UXMVECTORI32@@B DD 00H			; g_XMFlipYW
	DD	080000000H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipZW@@3UXMVECTORI32@@B DD 00H			; g_XMFlipZW
	DD	00H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipYZ@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipYZ@@3UXMVECTORI32@@B DD 00H			; g_XMFlipYZ
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipW@@3UXMVECTORI32@@B DD 00H			; g_XMFlipW
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMFlipZ@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipZ@@3UXMVECTORI32@@B DD 00H			; g_XMFlipZ
	DD	00H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFlipY@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipY@@3UXMVECTORI32@@B DD 00H			; g_XMFlipY
	DD	080000000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMFixupY16W16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixupY16W16@@3UXMVECTORF32@@B DD 03f800000r ; 1	; g_XMFixupY16W16
	DD	03f800000r			; 1
	DD	037800000r			; 1.52588e-005
	DD	037800000r			; 1.52588e-005
CONST	ENDS
;	COMDAT ?g_XMFixupY16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixupY16@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMFixupY16
	DD	037800000r			; 1.52588e-005
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMPermute0Z0W1Z1W@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMPermute0Z0W1Z1W@@3UXMVECTORI32@@B DD 08090a0bH	; g_XMPermute0Z0W1Z1W
	DD	0c0d0e0fH
	DD	018191a1bH
	DD	01c1d1e1fH
CONST	ENDS
;	COMDAT ?g_XMPermute0X0Y1X1Y@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMPermute0X0Y1X1Y@@3UXMVECTORI32@@B DD 010203H	; g_XMPermute0X0Y1X1Y
	DD	04050607H
	DD	010111213H
	DD	014151617H
CONST	ENDS
;	COMDAT ?g_XMSwizzleZXYW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSwizzleZXYW@@3UXMVECTORI32@@B DD 08090a0bH		; g_XMSwizzleZXYW
	DD	010203H
	DD	04050607H
	DD	0c0d0e0fH
CONST	ENDS
;	COMDAT ?g_XMSwizzleYZXW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSwizzleYZXW@@3UXMVECTORI32@@B DD 04050607H		; g_XMSwizzleYZXW
	DD	08090a0bH
	DD	010203H
	DD	0c0d0e0fH
CONST	ENDS
;	COMDAT ?g_XMSwizzleYXZW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSwizzleYXZW@@3UXMVECTORI32@@B DD 04050607H		; g_XMSwizzleYXZW
	DD	010203H
	DD	08090a0bH
	DD	0c0d0e0fH
CONST	ENDS
;	COMDAT ?g_XMSwizzleXYZX@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSwizzleXYZX@@3UXMVECTORI32@@B DD 010203H		; g_XMSwizzleXYZX
	DD	04050607H
	DD	08090a0bH
	DD	010203H
CONST	ENDS
;	COMDAT ?g_XMSwizzleXYXY@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSwizzleXYXY@@3UXMVECTORI32@@B DD 010203H		; g_XMSwizzleXYXY
	DD	04050607H
	DD	010203H
	DD	04050607H
CONST	ENDS
;	COMDAT ?g_XMSelect1110@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSelect1110@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMSelect1110
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1100@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSelect1100@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMSelect1100
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect1000@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSelect1000@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMSelect1000
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMOneHalfMinusEpsilon@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMOneHalfMinusEpsilon@@3UXMVECTORI32@@B DD 03efffffdH ; g_XMOneHalfMinusEpsilon
	DD	03efffffdH
	DD	03efffffdH
	DD	03efffffdH
CONST	ENDS
;	COMDAT ?g_XMSelect1010@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSelect1010@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMSelect1010
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMSelect0101@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMSelect0101@@3UXMVECTORI32@@B DD 00H		; g_XMSelect0101
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMNegateW@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegateW@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMNegateW
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegateZ@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegateZ@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMNegateZ
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateY@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegateY@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMNegateY
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMNegateX@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegateX@@3UXMVECTORF32@@B DD 0bf800000r	; -1	; g_XMNegateX
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskByte@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskByte@@3UXMVECTORI32@@B DD 0ffH			; g_XMMaskByte
	DD	0ffH
	DD	0ffH
	DD	0ffH
CONST	ENDS
;	COMDAT ?g_XMNoFraction@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNoFraction@@3UXMVECTORF32@@B DD 04b000000r	; 8.38861e+006 ; g_XMNoFraction
	DD	04b000000r			; 8.38861e+006
	DD	04b000000r			; 8.38861e+006
	DD	04b000000r			; 8.38861e+006
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16Z16W16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNormalizeX16Y16Z16W16@@3UXMVECTORF32@@B DD 038000100r ; 3.05185e-005 ; g_XMNormalizeX16Y16Z16W16
	DD	038000100r			; 3.05185e-005
	DD	030000100r			; 4.65675e-010
	DD	030000100r			; 4.65675e-010
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16Z16W16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixX16Y16Z16W16@@3UXMVECTORF32@@B DD 0c7000000r ; -32768 ; g_XMFixX16Y16Z16W16
	DD	0c7000000r			; -32768
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16Z16W16@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipX16Y16Z16W16@@3UXMVECTORI32@@B DD 08000H	; g_XMFlipX16Y16Z16W16
	DD	08000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16Z16W16@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskX16Y16Z16W16@@3UXMVECTORI32@@B DD 0ffffH	; g_XMMaskX16Y16Z16W16
	DD	0ffffH
	DD	0ffff0000H
	DD	0ffff0000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeX16Y16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNormalizeX16Y16@@3UXMVECTORF32@@B DD 038000100r ; 3.05185e-005 ; g_XMNormalizeX16Y16
	DD	030000100r			; 4.65675e-010
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFixX16Y16@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixX16Y16@@3UXMVECTORF32@@B DD 0c7000000r	; -32768 ; g_XMFixX16Y16
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMFlipX16Y16@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipX16Y16@@3UXMVECTORI32@@B DD 08000H		; g_XMFlipX16Y16
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX16Y16@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskX16Y16@@3UXMVECTORI32@@B DD 0ffffH		; g_XMMaskX16Y16
	DD	0ffff0000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA2B10G10R10@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNormalizeA2B10G10R10@@3UXMVECTORF32@@B DD 03b004020r ; 0.00195695 ; g_XMNormalizeA2B10G10R10
	DD	036004020r			; 1.91108e-006
	DD	031004020r			; 1.86629e-009
	DD	02faaaaabr			; 3.10441e-010
CONST	ENDS
;	COMDAT ?g_XMFixAA2B10G10R10@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixAA2B10G10R10@@3UXMVECTORF32@@B DD 0c4000000r ; -512 ; g_XMFixAA2B10G10R10
	DD	0c9000000r			; -524288
	DD	0ce000000r			; -5.36871e+008
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMFlipA2B10G10R10@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipA2B10G10R10@@3UXMVECTORI32@@B DD 0200H		; g_XMFlipA2B10G10R10
	DD	080000H
	DD	020000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA2B10G10R10@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskA2B10G10R10@@3UXMVECTORI32@@B DD 03ffH		; g_XMMaskA2B10G10R10
	DD	0ffc00H
	DD	03ff00000H
	DD	0c0000000H
CONST	ENDS
;	COMDAT ?g_XMNormalizeA8R8G8B8@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNormalizeA8R8G8B8@@3UXMVECTORF32@@B DD 033808081r ; 5.98384e-008 ; g_XMNormalizeA8R8G8B8
	DD	037808081r			; 1.53186e-005
	DD	03b808081r			; 0.00392157
	DD	02f808081r			; 2.33744e-010
CONST	ENDS
;	COMDAT ?g_XMFixAA8R8G8B8@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMFixAA8R8G8B8@@3UXMVECTORF32@@B DD 000000000r ; 0	; g_XMFixAA8R8G8B8
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	04f000000r			; 2.14748e+009
CONST	ENDS
;	COMDAT ?g_XMFlipA8R8G8B8@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFlipA8R8G8B8@@3UXMVECTORI32@@B DD 00H		; g_XMFlipA8R8G8B8
	DD	00H
	DD	00H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMMaskA8R8G8B8@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskA8R8G8B8@@3UXMVECTORI32@@B DD 0ff0000H		; g_XMMaskA8R8G8B8
	DD	0ff00H
	DD	0ffH
	DD	0ff000000H
CONST	ENDS
;	COMDAT ?g_XMNegOneMask@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMNegOneMask@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMNegOneMask
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMFltMax@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFltMax@@3UXMVECTORI32@@B DD 07f7fffffH		; g_XMFltMax
	DD	07f7fffffH
	DD	07f7fffffH
	DD	07f7fffffH
CONST	ENDS
;	COMDAT ?g_XMFltMin@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMFltMin@@3UXMVECTORI32@@B DD 0800000H		; g_XMFltMin
	DD	0800000H
	DD	0800000H
	DD	0800000H
CONST	ENDS
;	COMDAT ?g_XMAbsMask@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMAbsMask@@3UXMVECTORI32@@B DD 07fffffffH		; g_XMAbsMask
	DD	07fffffffH
	DD	07fffffffH
	DD	07fffffffH
CONST	ENDS
;	COMDAT ?g_XMQNaNTest@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMQNaNTest@@3UXMVECTORI32@@B DD 07fffffH		; g_XMQNaNTest
	DD	07fffffH
	DD	07fffffH
	DD	07fffffH
CONST	ENDS
;	COMDAT ?g_XMQNaN@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMQNaN@@3UXMVECTORI32@@B DD 07fc00000H		; g_XMQNaN
	DD	07fc00000H
	DD	07fc00000H
	DD	07fc00000H
CONST	ENDS
;	COMDAT ?g_XMInfinity@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMInfinity@@3UXMVECTORI32@@B DD 07f800000H		; g_XMInfinity
	DD	07f800000H
	DD	07f800000H
	DD	07f800000H
CONST	ENDS
;	COMDAT ?g_XMEpsilon@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMEpsilon@@3UXMVECTORF32@@B DD 034000000r	; 1.19209e-007 ; g_XMEpsilon
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
	DD	034000000r			; 1.19209e-007
CONST	ENDS
;	COMDAT ?g_XMReciprocalTwoPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMReciprocalTwoPi@@3UXMVECTORF32@@B DD 03e22f983r ; 0.159155 ; g_XMReciprocalTwoPi
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMTwoPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMTwoPi@@3UXMVECTORF32@@B DD 040c90fdbr	; 6.28319 ; g_XMTwoPi
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
	DD	040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT ?g_XMReciprocalPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMReciprocalPi@@3UXMVECTORF32@@B DD 03ea2f983r ; 0.31831 ; g_XMReciprocalPi
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMPi@@3UXMVECTORF32@@B DD 040490fdbr		; 3.14159 ; g_XMPi
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
	DD	040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT ?g_XMHalfPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMHalfPi@@3UXMVECTORF32@@B DD 03fc90fdbr	; 1.5708 ; g_XMHalfPi
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
	DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMNegativePi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegativePi@@3UXMVECTORF32@@B DD 0c0490fdbr	; -3.14159 ; g_XMNegativePi
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
	DD	0c0490fdbr			; -3.14159
CONST	ENDS
;	COMDAT ?g_XMNegativeTwoPi@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegativeTwoPi@@3UXMVECTORF32@@B DD 0c0c90fdbr ; -6.28319 ; g_XMNegativeTwoPi
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
	DD	0c0c90fdbr			; -6.28319
CONST	ENDS
;	COMDAT ?g_XMNegativeOneHalf@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegativeOneHalf@@3UXMVECTORF32@@B DD 0bf000000r ; -0.5 ; g_XMNegativeOneHalf
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
	DD	0bf000000r			; -0.5
CONST	ENDS
;	COMDAT ?g_XMOneHalf@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMOneHalf@@3UXMVECTORF32@@B DD 03f000000r	; 0.5	; g_XMOneHalf
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
CONST	ENDS
;	COMDAT ?g_XMNegativeOne@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegativeOne@@3UXMVECTORF32@@B DD 0bf800000r ; -1	; g_XMNegativeOne
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMZero@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMZero@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMZero
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMOne3@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMOne3
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMOne@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMOne@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMOne
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMMaskW@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskW@@3UXMVECTORI32@@B DD 00H			; g_XMMaskW
	DD	00H
	DD	00H
	DD	0ffffffffH
CONST	ENDS
;	COMDAT ?g_XMMaskZ@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskZ@@3UXMVECTORI32@@B DD 00H			; g_XMMaskZ
	DD	00H
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskY@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskY@@3UXMVECTORI32@@B DD 00H			; g_XMMaskY
	DD	0ffffffffH
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMaskX@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMaskX@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMMaskX
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMMask3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMMask3@@3UXMVECTORI32@@B DD 0ffffffffH		; g_XMMask3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegate3@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMNegate3@@3UXMVECTORI32@@B DD 080000000H		; g_XMNegate3
	DD	080000000H
	DD	080000000H
	DD	00H
CONST	ENDS
;	COMDAT ?g_XMNegativeZero@@3UXMVECTORI32@@B
CONST	SEGMENT
?g_XMNegativeZero@@3UXMVECTORI32@@B DD 080000000H	; g_XMNegativeZero
	DD	080000000H
	DD	080000000H
	DD	080000000H
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegIdentityR3@@3UXMVECTORF32@@B DD 000000000r ; 0	; g_XMNegIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	0bf800000r			; -1
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegIdentityR2@@3UXMVECTORF32@@B DD 000000000r ; 0	; g_XMNegIdentityR2
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegIdentityR1@@3UXMVECTORF32@@B DD 000000000r ; 0	; g_XMNegIdentityR1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMNegIdentityR0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMNegIdentityR0@@3UXMVECTORF32@@B DD 0bf800000r ; -1	; g_XMNegIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR3@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMIdentityR3@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMIdentityR3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
;	COMDAT ?g_XMIdentityR2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMIdentityR2@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMIdentityR2
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMIdentityR1@@3UXMVECTORF32@@B DD 000000000r	; 0	; g_XMIdentityR1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMIdentityR0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMIdentityR0@@3UXMVECTORF32@@B DD 03f800000r	; 1	; g_XMIdentityR0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMPiConstants0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMPiConstants0@@3UXMVECTORF32@@B DD 040490fdbr ; 3.14159 ; g_XMPiConstants0
	DD	040c90fdbr			; 6.28319
	DD	03ea2f983r			; 0.31831
	DD	03e22f983r			; 0.159155
CONST	ENDS
;	COMDAT ?g_XMASinEstConstants@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMASinEstConstants@@3UXMVECTORF32@@B DD 03f800001r ; 1 ; g_XMASinEstConstants
	DD	03fc90fdbr			; 1.5708
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
;	COMDAT ?g_XMASinEstCoefficients@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMASinEstCoefficients@@3UXMVECTORF32@@B DD 0bfae4ee5r ; -1.36178 ; g_XMASinEstCoefficients
	DD	0401849a5r			; 2.37949
	DD	0bf4ee811r			; -0.808229
	DD	03e8e8fb5r			; 0.27844
CONST	ENDS
;	COMDAT ?g_XMATanEstCoefficients@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMATanEstCoefficients@@3UXMVECTORF32@@B DD 03f44dc79r ; 0.768989 ; g_XMATanEstCoefficients
	DD	03f8d6834r			; 1.10474
	DD	03f5dbe43r			; 0.866184
	DD	03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT ?g_XMTanEstCoefficients@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMTanEstCoefficients@@3UXMVECTORF32@@B DD 0401ef9dbr ; 2.484 ; g_XMTanEstCoefficients
	DD	0be482f23r			; -0.195492
	DD	0401de9e6r			; 2.4674
	DD	03ea2f983r			; 0.31831
CONST	ENDS
;	COMDAT ?g_XMCosEstCoefficients@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMCosEstCoefficients@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMCosEstCoefficients
	DD	0befd9e41r			; -0.495348
	DD	03d1eda81r			; 0.0387826
	DD	0ba72600cr			; -0.000924588
CONST	ENDS
;	COMDAT ?g_XMSinEstCoefficients@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMSinEstCoefficients@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMSinEstCoefficients
	DD	0be2a84b5r			; -0.166522
	DD	03c0658eer			; 0.00819991
	DD	0b92951der			; -0.000161476
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMATanCoefficients2@@3UXMVECTORF32@@B DD 03d70f0f1r ; 0.0588235 ; g_XMATanCoefficients2
	DD	03d579436r			; 0.0526316
	DD	03d430c31r			; 0.047619
	DD	03d321643r			; 0.0434783
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMATanCoefficients1@@3UXMVECTORF32@@B DD 03de38e39r ; 0.111111 ; g_XMATanCoefficients1
	DD	03dba2e8cr			; 0.0909091
	DD	03d9d89d9r			; 0.0769231
	DD	03d888889r			; 0.0666667
CONST	ENDS
;	COMDAT ?g_XMATanCoefficients0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMATanCoefficients0@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMATanCoefficients0
	DD	03eaaaaabr			; 0.333333
	DD	03e4ccccdr			; 0.2
	DD	03e124925r			; 0.142857
CONST	ENDS
;	COMDAT ?g_XMASinCoefficients2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMASinCoefficients2@@3UXMVECTORF32@@B DD 0bfaf4418r ; -1.36927 ; g_XMASinCoefficients2
	DD	0c08f6ad9r			; -4.48179
	DD	03fb58485r			; 1.41811
	DD	040af6ad8r			; 5.48179
CONST	ENDS
;	COMDAT ?g_XMASinCoefficients1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMASinCoefficients1@@3UXMVECTORF32@@B DD 03f1dd7b6r ; 0.616573 ; g_XMASinCoefficients1
	DD	0408980bdr			; 4.29697
	DD	0bf983f2fr			; -1.18943
	DD	0c0d1360er			; -6.53785
CONST	ENDS
;	COMDAT ?g_XMASinCoefficients0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMASinCoefficients0@@3UXMVECTORF32@@B DD 0bd6dd42dr ; -0.0580637 ; g_XMASinCoefficients0
	DD	0bed65553r			; -0.41862
	DD	03e663246r			; 0.224801
	DD	0400b1889r			; 2.17337
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMTanCoefficients2@@3UXMVECTORF32@@B DD 03a1aac12r ; 0.000590027 ; g_XMTanCoefficients2
	DD	0397abeb9r			; 0.000239129
	DD	038cb3f0cr			; 9.69154e-005
	DD	03824bec9r			; 3.92783e-005
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMTanCoefficients1@@3UXMVECTORF32@@B DD 03cb327a4r ; 0.0218695 ; g_XMTanCoefficients1
	DD	03c11371br			; 0.00886324
	DD	03b6b69e9r			; 0.00359213
	DD	03abed1b3r			; 0.00145583
CONST	ENDS
;	COMDAT ?g_XMTanCoefficients0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMTanCoefficients0@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMTanCoefficients0
	DD	03eaaaaabr			; 0.333333
	DD	03e088889r			; 0.133333
	DD	03d5d0dd1r			; 0.0539683
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMCosCoefficients2@@3UXMVECTORF32@@B DD 029573f9fr ; 4.77948e-014 ; g_XMCosCoefficients2
	DD	0a53413c3r			; -1.56192e-016
	DD	020f2a15dr			; 4.11032e-019
	DD	09c8671cbr			; -8.89679e-022
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMCosCoefficients1@@3UXMVECTORF32@@B DD 037d00d01r ; 2.48016e-005 ; g_XMCosCoefficients1
	DD	0b493f27er			; -2.75573e-007
	DD	0310f76c8r			; 2.08768e-009
	DD	0ad49cba5r			; -1.14707e-011
CONST	ENDS
;	COMDAT ?g_XMCosCoefficients0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMCosCoefficients0@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMCosCoefficients0
	DD	0bf000000r			; -0.5
	DD	03d2aaaabr			; 0.0416667
	DD	0bab60b61r			; -0.00138889
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients2@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMSinCoefficients2@@3UXMVECTORF32@@B DD 0274a963cr ; 2.81146e-015 ; g_XMSinCoefficients2
	DD	0a317a4dar			; -8.22064e-018
	DD	01eb8dc78r			; 1.95729e-020
	DD	09a3b0da1r			; -3.86817e-023
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients1@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMSinCoefficients1@@3UXMVECTORF32@@B DD 03638ef1dr ; 2.75573e-006 ; g_XMSinCoefficients1
	DD	0b2d7322br			; -2.50521e-008
	DD	02f309231r			; 1.6059e-010
	DD	0ab573f9fr			; -7.64716e-013
CONST	ENDS
;	COMDAT ?g_XMSinCoefficients0@@3UXMVECTORF32@@B
CONST	SEGMENT
?g_XMSinCoefficients0@@3UXMVECTORF32@@B DD 03f800000r ; 1 ; g_XMSinCoefficients0
	DD	0be2aaaabr			; -0.166667
	DD	03c088889r			; 0.00833333
	DD	0b9500d01r			; -0.000198413
CONST	ENDS
PUBLIC	?SetLens@Camera@@QAEXMMMM@Z			; Camera::SetLens
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@447a0000
PUBLIC	??0_XMFLOAT4X4@@QAE@XZ				; _XMFLOAT4X4::_XMFLOAT4X4
PUBLIC	__real@3f800000
PUBLIC	??0_XMFLOAT3@@QAE@MMM@Z				; _XMFLOAT3::_XMFLOAT3
PUBLIC	__real@00000000
PUBLIC	??0Camera@@QAE@XZ				; Camera::Camera
EXTRN	?Pi@MathHelper@@2MB:DWORD			; MathHelper::Pi
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@3fd0000000000000
; File f:\common\camera.cpp
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv157 = -8						; size = 4
_this$ = -4						; size = 4
??0Camera@@QAE@XZ PROC					; Camera::Camera
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	51		 push	 ecx
  00018	d9 ee		 fldz
  0001a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0001d	51		 push	 ecx
  0001e	d9 ee		 fldz
  00020	d9 1c 24	 fstp	 DWORD PTR [esp]
  00023	51		 push	 ecx
  00024	d9 ee		 fldz
  00026	d9 1c 24	 fstp	 DWORD PTR [esp]
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ??0_XMFLOAT3@@QAE@MMM@Z	; _XMFLOAT3::_XMFLOAT3
  00031	51		 push	 ecx
  00032	d9 ee		 fldz
  00034	d9 1c 24	 fstp	 DWORD PTR [esp]
  00037	51		 push	 ecx
  00038	d9 ee		 fldz
  0003a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003d	51		 push	 ecx
  0003e	d9 e8		 fld1
  00040	d9 1c 24	 fstp	 DWORD PTR [esp]
  00043	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00049	e8 00 00 00 00	 call	 ??0_XMFLOAT3@@QAE@MMM@Z	; _XMFLOAT3::_XMFLOAT3
  0004e	51		 push	 ecx
  0004f	d9 ee		 fldz
  00051	d9 1c 24	 fstp	 DWORD PTR [esp]
  00054	51		 push	 ecx
  00055	d9 e8		 fld1
  00057	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005a	51		 push	 ecx
  0005b	d9 ee		 fldz
  0005d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 18	 add	 ecx, 24			; 00000018H
  00066	e8 00 00 00 00	 call	 ??0_XMFLOAT3@@QAE@MMM@Z	; _XMFLOAT3::_XMFLOAT3
  0006b	51		 push	 ecx
  0006c	d9 e8		 fld1
  0006e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00071	51		 push	 ecx
  00072	d9 ee		 fldz
  00074	d9 1c 24	 fstp	 DWORD PTR [esp]
  00077	51		 push	 ecx
  00078	d9 ee		 fldz
  0007a	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00080	83 c1 24	 add	 ecx, 36			; 00000024H
  00083	e8 00 00 00 00	 call	 ??0_XMFLOAT3@@QAE@MMM@Z	; _XMFLOAT3::_XMFLOAT3
  00088	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008b	83 c1 48	 add	 ecx, 72			; 00000048H
  0008e	e8 00 00 00 00	 call	 ??0_XMFLOAT4X4@@QAE@XZ	; _XMFLOAT4X4::_XMFLOAT4X4
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0009c	e8 00 00 00 00	 call	 ??0_XMFLOAT4X4@@QAE@XZ	; _XMFLOAT4X4::_XMFLOAT4X4

; 13   : 	SetLens(0.25f*MathHelper::Pi, 1.0f, 1.0f, 1000.0f);

  000a1	51		 push	 ecx
  000a2	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@447a0000
  000a8	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ab	51		 push	 ecx
  000ac	d9 e8		 fld1
  000ae	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b1	51		 push	 ecx
  000b2	d9 e8		 fld1
  000b4	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b7	d9 05 00 00 00
	00		 fld	 DWORD PTR ?Pi@MathHelper@@2MB ; MathHelper::Pi
  000bd	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fd0000000000000
  000c3	d9 5d f8	 fstp	 DWORD PTR tv157[ebp]
  000c6	d9 45 f8	 fld	 DWORD PTR tv157[ebp]
  000c9	51		 push	 ecx
  000ca	d9 1c 24	 fstp	 DWORD PTR [esp]
  000cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?SetLens@Camera@@QAEXMMMM@Z ; Camera::SetLens

; 14   : }

  000d5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d8	83 c4 08	 add	 esp, 8
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
??0Camera@@QAE@XZ ENDP					; Camera::Camera
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamath.h
_TEXT	ENDS
;	COMDAT ??0_XMFLOAT3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0_XMFLOAT3@@QAE@MMM@Z PROC				; _XMFLOAT3::_XMFLOAT3, COMDAT
; _this$ = ecx

; 523  :     _XMFLOAT3(FLOAT _x, FLOAT _y, FLOAT _z) : x(_x), y(_y), z(_z) {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	d9 45 08	 fld	 DWORD PTR __x$[ebp]
  00014	d9 18		 fstp	 DWORD PTR [eax]
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	d9 45 0c	 fld	 DWORD PTR __y$[ebp]
  0001c	d9 59 04	 fstp	 DWORD PTR [ecx+4]
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00022	d9 45 10	 fld	 DWORD PTR __z$[ebp]
  00025	d9 5a 08	 fstp	 DWORD PTR [edx+8]
  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
??0_XMFLOAT3@@QAE@MMM@Z ENDP				; _XMFLOAT3::_XMFLOAT3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0_XMFLOAT4X4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_XMFLOAT4X4@@QAE@XZ PROC				; _XMFLOAT4X4::_XMFLOAT4X4, COMDAT
; _this$ = ecx

; 1795 :     _XMFLOAT4X4() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_XMFLOAT4X4@@QAE@XZ ENDP				; _XMFLOAT4X4::_XMFLOAT4X4
_TEXT	ENDS
PUBLIC	??1Camera@@QAE@XZ				; Camera::~Camera
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Camera@@QAE@XZ PROC					; Camera::~Camera
; _this$ = ecx

; 17   : {

  000f0	55		 push	 ebp
  000f1	8b ec		 mov	 ebp, esp
  000f3	51		 push	 ecx
  000f4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  000fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : }

  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c3		 ret	 0
??1Camera@@QAE@XZ ENDP					; Camera::~Camera
_TEXT	ENDS
PUBLIC	?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z	; XMLoadFloat3
PUBLIC	?GetPositionXM@Camera@@QBE?AT__m128@@XZ		; Camera::GetPositionXM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T123916 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPositionXM@Camera@@QBE?AT__m128@@XZ PROC		; Camera::GetPositionXM
; _this$ = ecx

; 21   : {

  00110	53		 push	 ebx
  00111	8b dc		 mov	 ebx, esp
  00113	83 ec 08	 sub	 esp, 8
  00116	83 e4 f0	 and	 esp, -16		; fffffff0H
  00119	83 c4 04	 add	 esp, 4
  0011c	55		 push	 ebp
  0011d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00120	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00124	8b ec		 mov	 ebp, esp
  00126	83 ec 20	 sub	 esp, 32			; 00000020H
  00129	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0012e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00131	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00134	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00137	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0013a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0013d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00140	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00143	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00146	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 22   : 	return XMLoadFloat3(&mPosition);

  00149	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00152	83 c4 04	 add	 esp, 4
  00155	0f 29 45 e0	 movaps	 XMMWORD PTR $T123916[ebp], xmm0
  00159	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  0015c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T123916[ebp]
  00160	0f 29 01	 movaps	 XMMWORD PTR [ecx], xmm0
  00163	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 23   : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	8b e3		 mov	 esp, ebx
  0016b	5b		 pop	 ebx
  0016c	c2 04 00	 ret	 4
?GetPositionXM@Camera@@QBE?AT__m128@@XZ ENDP		; Camera::GetPositionXM
_TEXT	ENDS
PUBLIC	?XMAssert@@YAXPBD0I@Z				; XMAssert
PUBLIC	??_C@_07HPANBCJA@pSource?$AA@			; `string'
PUBLIC	??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ ; `string'
;	COMDAT ??_C@_07HPANBCJA@pSource?$AA@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathconvert.inl
CONST	SEGMENT
??_C@_07HPANBCJA@pSource?$AA@ DB 'pSource', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
CONST	SEGMENT
??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ DB 'c:\pr'
	DB	'ogram files (x86)\microsoft directx sdk (february 2010)\inclu'
	DB	'de\xnamathconvert.inl', 00H			; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z
_TEXT	SEGMENT
$T85939 = -144						; size = 16
$T85938 = -128						; size = 16
_xy$ = -112						; size = 16
$T85936 = -96						; size = 16
_z$ = -80						; size = 16
$T85934 = -64						; size = 16
_y$ = -48						; size = 16
$T85932 = -32						; size = 16
_x$ = -16						; size = 16
_pSource$ = 8						; size = 4
?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z PROC	; XMLoadFloat3, COMDAT

; 842  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0001c	57		 push	 edi
  0001d	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00023	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd

; 843  : #if defined(_XM_NO_INTRINSICS_)
; 844  :     XMVECTOR V;
; 845  :     XMASSERT(pSource);
; 846  : 
; 847  :     ((UINT *)(&V.vector4_f32[0]))[0] = ((const UINT *)(&pSource->x))[0];
; 848  :     ((UINT *)(&V.vector4_f32[1]))[0] = ((const UINT *)(&pSource->y))[0];
; 849  :     ((UINT *)(&V.vector4_f32[2]))[0] = ((const UINT *)(&pSource->z))[0];
; 850  :     return V;
; 851  : #elif defined(_XM_SSE_INTRINSICS_)
; 852  :     XMASSERT(pSource);

  0002f	83 7b 08 00	 cmp	 DWORD PTR _pSource$[ebx], 0
  00033	75 17		 jne	 SHORT $LN3@XMLoadFloa
  00035	68 54 03 00 00	 push	 852			; 00000354H
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_07HPANBCJA@pSource?$AA@
  00044	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMLoadFloa:

; 853  : 
; 854  : #ifdef _XM_ISVS2005_
; 855  :     // This reads 1 floats past the memory that should be ignored.
; 856  :     // Need to continue to do this for VS 2005 due to compiler issue but prefer new method
; 857  :     // to avoid triggering issues with memory debug tools (like AV)
; 858  :     return _mm_loadu_ps( &pSource->x );
; 859  : #else
; 860  :     __m128 x = _mm_load_ss( &pSource->x );

  0004c	8b 4b 08	 mov	 ecx, DWORD PTR _pSource$[ebx]
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
  00052	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00056	0f 29 45 e0	 movaps	 XMMWORD PTR $T85932[ebp], xmm0
  0005a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T85932[ebp]
  0005e	0f 29 45 f0	 movaps	 XMMWORD PTR _x$[ebp], xmm0

; 861  :     __m128 y = _mm_load_ss( &pSource->y );

  00062	8b 53 08	 mov	 edx, DWORD PTR _pSource$[ebx]
  00065	0f 57 c0	 xorps	 xmm0, xmm0
  00068	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  0006d	0f 29 45 c0	 movaps	 XMMWORD PTR $T85934[ebp], xmm0
  00071	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T85934[ebp]
  00075	0f 29 45 d0	 movaps	 XMMWORD PTR _y$[ebp], xmm0

; 862  :     __m128 z = _mm_load_ss( &pSource->z );

  00079	8b 43 08	 mov	 eax, DWORD PTR _pSource$[ebx]
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00084	0f 29 45 a0	 movaps	 XMMWORD PTR $T85936[ebp], xmm0
  00088	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T85936[ebp]
  0008c	0f 29 45 b0	 movaps	 XMMWORD PTR _z$[ebp], xmm0

; 863  :     __m128 xy = _mm_unpacklo_ps( x, y );

  00090	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _y$[ebp]
  00094	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _x$[ebp]
  00098	0f 14 c8	 unpcklps xmm1, xmm0
  0009b	0f 29 4d 80	 movaps	 XMMWORD PTR $T85938[ebp], xmm1
  0009f	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T85938[ebp]
  000a3	0f 29 45 90	 movaps	 XMMWORD PTR _xy$[ebp], xmm0

; 864  :     return _mm_movelh_ps( xy, z );

  000a7	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _z$[ebp]
  000ab	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _xy$[ebp]
  000af	0f 16 c8	 movlhps xmm1, xmm0
  000b2	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T85939[ebp], xmm1
  000b9	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T85939[ebp]

; 865  : #endif // !_XM_ISVS2005_
; 866  : #elif defined(XM_NO_MISALIGNED_VECTOR_ACCESS)
; 867  : #endif // _XM_VMX128_INTRINSICS_
; 868  : }

  000c0	5f		 pop	 edi
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	8b e3		 mov	 esp, ebx
  000c6	5b		 pop	 ebx
  000c7	c3		 ret	 0
?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ENDP	; XMLoadFloat3
_TEXT	ENDS
PUBLIC	??_C@_02PCIJFNDE@?$AN?6?$AA@			; `string'
PUBLIC	??_C@_07BAMMBJFH@?0?5line?5?$AA@		; `string'
PUBLIC	??_C@_07BLFOPCLK@?0?5file?5?$AA@		; `string'
PUBLIC	??_C@_0BD@CAENFOHP@Assertion?5failed?3?5?$AA@	; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6?$AA@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmisc.inl
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6?$AA@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAMMBJFH@?0?5line?5?$AA@
CONST	SEGMENT
??_C@_07BAMMBJFH@?0?5line?5?$AA@ DB ', line ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BLFOPCLK@?0?5file?5?$AA@
CONST	SEGMENT
??_C@_07BLFOPCLK@?0?5file?5?$AA@ DB ', file ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CAENFOHP@Assertion?5failed?3?5?$AA@
CONST	SEGMENT
??_C@_0BD@CAENFOHP@Assertion?5failed?3?5?$AA@ DB 'Assertion failed: ', 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMAssert@@YAXPBD0I@Z
_TEXT	SEGMENT
_Line$ = -36						; size = 4
_pLineString$ = -32					; size = 4
_aLineString$ = -24					; size = 16
__$ArrayPad$ = -4					; size = 4
_pExpression$ = 8					; size = 4
_pFileName$ = 12					; size = 4
_LineNumber$ = 16					; size = 4
?XMAssert@@YAXPBD0I@Z PROC				; XMAssert, COMDAT

; 1839 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0000f	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00012	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00015	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00018	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0001b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00021	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00024	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00027	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002c	33 c5		 xor	 eax, ebp
  0002e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 1840 :     CHAR        aLineString[XMASSERT_LINE_STRING_SIZE];
; 1841 :     CHAR*       pLineString;
; 1842 :     UINT        Line;
; 1843 : 
; 1844 :     aLineString[XMASSERT_LINE_STRING_SIZE - 2] = '0';

  00031	c6 45 f6 30	 mov	 BYTE PTR _aLineString$[ebp+14], 48 ; 00000030H

; 1845 :     aLineString[XMASSERT_LINE_STRING_SIZE - 1] = '\0';

  00035	c6 45 f7 00	 mov	 BYTE PTR _aLineString$[ebp+15], 0

; 1846 :     for (Line = LineNumber, pLineString = aLineString + XMASSERT_LINE_STRING_SIZE - 2;

  00039	8b 45 10	 mov	 eax, DWORD PTR _LineNumber$[ebp]
  0003c	89 45 dc	 mov	 DWORD PTR _Line$[ebp], eax
  0003f	8d 4d f6	 lea	 ecx, DWORD PTR _aLineString$[ebp+14]
  00042	89 4d e0	 mov	 DWORD PTR _pLineString$[ebp], ecx

; 1847 :          Line != 0 && pLineString >= aLineString;

  00045	eb 18		 jmp	 SHORT $LN3@XMAssert
$LN2@XMAssert:

; 1848 :          Line /= 10, pLineString--)

  00047	8b 45 dc	 mov	 eax, DWORD PTR _Line$[ebp]
  0004a	33 d2		 xor	 edx, edx
  0004c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00051	f7 f1		 div	 ecx
  00053	89 45 dc	 mov	 DWORD PTR _Line$[ebp], eax
  00056	8b 55 e0	 mov	 edx, DWORD PTR _pLineString$[ebp]
  00059	83 ea 01	 sub	 edx, 1
  0005c	89 55 e0	 mov	 DWORD PTR _pLineString$[ebp], edx
$LN3@XMAssert:
  0005f	83 7d dc 00	 cmp	 DWORD PTR _Line$[ebp], 0
  00063	74 20		 je	 SHORT $LN1@XMAssert
  00065	8b 45 e0	 mov	 eax, DWORD PTR _pLineString$[ebp]
  00068	8d 4d e8	 lea	 ecx, DWORD PTR _aLineString$[ebp]
  0006b	3b c1		 cmp	 eax, ecx
  0006d	72 16		 jb	 SHORT $LN1@XMAssert

; 1849 :     {
; 1850 :         *pLineString = (CHAR)('0' + (Line % 10));

  0006f	8b 45 dc	 mov	 eax, DWORD PTR _Line$[ebp]
  00072	33 d2		 xor	 edx, edx
  00074	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00079	f7 f1		 div	 ecx
  0007b	83 c2 30	 add	 edx, 48			; 00000030H
  0007e	8b 45 e0	 mov	 eax, DWORD PTR _pLineString$[ebp]
  00081	88 10		 mov	 BYTE PTR [eax], dl

; 1851 :     }

  00083	eb c2		 jmp	 SHORT $LN2@XMAssert
$LN1@XMAssert:

; 1852 : 
; 1853 : #ifndef NO_OUTPUT_DEBUG_STRING
; 1854 :     OutputDebugStringA("Assertion failed: ");

  00085	8b f4		 mov	 esi, esp
  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CAENFOHP@Assertion?5failed?3?5?$AA@
  0008c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  00092	3b f4		 cmp	 esi, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1855 :     OutputDebugStringA(pExpression);

  00099	8b f4		 mov	 esi, esp
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _pExpression$[ebp]
  0009e	51		 push	 ecx
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000a5	3b f4		 cmp	 esi, esp
  000a7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1856 :     OutputDebugStringA(", file ");

  000ac	8b f4		 mov	 esi, esp
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_07BLFOPCLK@?0?5file?5?$AA@
  000b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000b9	3b f4		 cmp	 esi, esp
  000bb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1857 :     OutputDebugStringA(pFileName);

  000c0	8b f4		 mov	 esi, esp
  000c2	8b 55 0c	 mov	 edx, DWORD PTR _pFileName$[ebp]
  000c5	52		 push	 edx
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1858 :     OutputDebugStringA(", line ");

  000d3	8b f4		 mov	 esi, esp
  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_07BAMMBJFH@?0?5line?5?$AA@
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1859 :     OutputDebugStringA(pLineString + 1);

  000e7	8b 45 e0	 mov	 eax, DWORD PTR _pLineString$[ebp]
  000ea	83 c0 01	 add	 eax, 1
  000ed	8b f4		 mov	 esi, esp
  000ef	50		 push	 eax
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1860 :     OutputDebugStringA("\r\n");

  000fd	8b f4		 mov	 esi, esp
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6?$AA@
  00104	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  0010a	3b f4		 cmp	 esi, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1861 : #else
; 1862 :     DbgPrint("Assertion failed: %s, file %s, line %d\r\n", pExpression, pFileName, LineNumber);
; 1863 : #endif
; 1864 : 
; 1865 :     __debugbreak();

  00111	cc		 int	 3

; 1866 : }

  00112	52		 push	 edx
  00113	8b cd		 mov	 ecx, ebp
  00115	50		 push	 eax
  00116	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@XMAssert
  0011c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00121	58		 pop	 eax
  00122	5a		 pop	 edx
  00123	5e		 pop	 esi
  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	83 c4 24	 add	 esp, 36			; 00000024H
  00131	3b ec		 cmp	 ebp, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c3		 ret	 0
$LN8@XMAssert:
  0013c	01 00 00 00	 DD	 1
  00140	00 00 00 00	 DD	 $LN7@XMAssert
$LN7@XMAssert:
  00144	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00148	10 00 00 00	 DD	 16			; 00000010H
  0014c	00 00 00 00	 DD	 $LN6@XMAssert
$LN6@XMAssert:
  00150	61		 DB	 97			; 00000061H
  00151	4c		 DB	 76			; 0000004cH
  00152	69		 DB	 105			; 00000069H
  00153	6e		 DB	 110			; 0000006eH
  00154	65		 DB	 101			; 00000065H
  00155	53		 DB	 83			; 00000053H
  00156	74		 DB	 116			; 00000074H
  00157	72		 DB	 114			; 00000072H
  00158	69		 DB	 105			; 00000069H
  00159	6e		 DB	 110			; 0000006eH
  0015a	67		 DB	 103			; 00000067H
  0015b	00		 DB	 0
?XMAssert@@YAXPBD0I@Z ENDP				; XMAssert
_TEXT	ENDS
PUBLIC	?GetPosition@Camera@@QBE?AU_XMFLOAT3@@XZ	; Camera::GetPosition
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPosition@Camera@@QBE?AU_XMFLOAT3@@XZ PROC		; Camera::GetPosition
; _this$ = ecx

; 26   : {

  00170	55		 push	 ebp
  00171	8b ec		 mov	 ebp, esp
  00173	51		 push	 ecx
  00174	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0017b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   : 	return mPosition;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00184	8b 10		 mov	 edx, DWORD PTR [eax]
  00186	89 11		 mov	 DWORD PTR [ecx], edx
  00188	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0018b	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0018e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00191	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00194	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 28   : }

  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
?GetPosition@Camera@@QBE?AU_XMFLOAT3@@XZ ENDP		; Camera::GetPosition
_TEXT	ENDS
PUBLIC	??4_XMFLOAT3@@QAEAAU0@ABU0@@Z			; _XMFLOAT3::operator=
PUBLIC	?SetPosition@Camera@@QAEXMMM@Z			; Camera::SetPosition
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T131034 = -16						; size = 12
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@Camera@@QAEXMMM@Z PROC			; Camera::SetPosition
; _this$ = ecx

; 31   : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp
  001a3	83 ec 10	 sub	 esp, 16			; 00000010H
  001a6	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  001ab	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  001ae	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  001b1	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  001b4	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  001b7	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 32   : 	mPosition = XMFLOAT3(x, y, z);

  001ba	51		 push	 ecx
  001bb	d9 45 10	 fld	 DWORD PTR _z$[ebp]
  001be	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c1	51		 push	 ecx
  001c2	d9 45 0c	 fld	 DWORD PTR _y$[ebp]
  001c5	d9 1c 24	 fstp	 DWORD PTR [esp]
  001c8	51		 push	 ecx
  001c9	d9 45 08	 fld	 DWORD PTR _x$[ebp]
  001cc	d9 1c 24	 fstp	 DWORD PTR [esp]
  001cf	8d 4d f0	 lea	 ecx, DWORD PTR $T131034[ebp]
  001d2	e8 00 00 00 00	 call	 ??0_XMFLOAT3@@QAE@MMM@Z	; _XMFLOAT3::_XMFLOAT3
  001d7	50		 push	 eax
  001d8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001db	e8 00 00 00 00	 call	 ??4_XMFLOAT3@@QAEAAU0@ABU0@@Z ; _XMFLOAT3::operator=

; 33   : }

  001e0	83 c4 10	 add	 esp, 16			; 00000010H
  001e3	3b ec		 cmp	 ebp, esp
  001e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001ea	8b e5		 mov	 esp, ebp
  001ec	5d		 pop	 ebp
  001ed	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@Camera@@QAEXMMM@Z ENDP			; Camera::SetPosition
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ??4_XMFLOAT3@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Float3$ = 8						; size = 4
??4_XMFLOAT3@@QAEAAU0@ABU0@@Z PROC			; _XMFLOAT3::operator=, COMDAT
; _this$ = ecx

; 11304: {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 11305:     x = Float3.x;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _Float3$[ebp]
  00014	d9 01		 fld	 DWORD PTR [ecx]
  00016	d9 18		 fstp	 DWORD PTR [eax]

; 11306:     y = Float3.y;

  00018	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001b	8b 45 08	 mov	 eax, DWORD PTR _Float3$[ebp]
  0001e	d9 40 04	 fld	 DWORD PTR [eax+4]
  00021	d9 5a 04	 fstp	 DWORD PTR [edx+4]

; 11307:     z = Float3.z;

  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 55 08	 mov	 edx, DWORD PTR _Float3$[ebp]
  0002a	d9 42 08	 fld	 DWORD PTR [edx+8]
  0002d	d9 59 08	 fstp	 DWORD PTR [ecx+8]

; 11308:     return *this;

  00030	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 11309: }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
??4_XMFLOAT3@@QAEAAU0@ABU0@@Z ENDP			; _XMFLOAT3::operator=
_TEXT	ENDS
PUBLIC	?SetPosition@Camera@@QAEXABU_XMFLOAT3@@@Z	; Camera::SetPosition
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?SetPosition@Camera@@QAEXABU_XMFLOAT3@@@Z PROC		; Camera::SetPosition
; _this$ = ecx

; 36   : {

  001f0	55		 push	 ebp
  001f1	8b ec		 mov	 ebp, esp
  001f3	51		 push	 ecx
  001f4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  001fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 37   : 	mPosition = v;

  001fe	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00201	50		 push	 eax
  00202	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00205	e8 00 00 00 00	 call	 ??4_XMFLOAT3@@QAEAAU0@ABU0@@Z ; _XMFLOAT3::operator=

; 38   : }

  0020a	83 c4 04	 add	 esp, 4
  0020d	3b ec		 cmp	 ebp, esp
  0020f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00214	8b e5		 mov	 esp, ebp
  00216	5d		 pop	 ebp
  00217	c2 04 00	 ret	 4
?SetPosition@Camera@@QAEXABU_XMFLOAT3@@@Z ENDP		; Camera::SetPosition
_TEXT	ENDS
PUBLIC	?GetRightXM@Camera@@QBE?AT__m128@@XZ		; Camera::GetRightXM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T123936 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRightXM@Camera@@QBE?AT__m128@@XZ PROC		; Camera::GetRightXM
; _this$ = ecx

; 41   : {

  00220	53		 push	 ebx
  00221	8b dc		 mov	 ebx, esp
  00223	83 ec 08	 sub	 esp, 8
  00226	83 e4 f0	 and	 esp, -16		; fffffff0H
  00229	83 c4 04	 add	 esp, 4
  0022c	55		 push	 ebp
  0022d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00230	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00234	8b ec		 mov	 ebp, esp
  00236	83 ec 20	 sub	 esp, 32			; 00000020H
  00239	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0023e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00241	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00244	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00247	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0024a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0024d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00250	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00253	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00256	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 42   : 	return XMLoadFloat3(&mRight);

  00259	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0025f	50		 push	 eax
  00260	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00265	83 c4 04	 add	 esp, 4
  00268	0f 29 45 e0	 movaps	 XMMWORD PTR $T123936[ebp], xmm0
  0026c	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  0026f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T123936[ebp]
  00273	0f 29 01	 movaps	 XMMWORD PTR [ecx], xmm0
  00276	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 43   : }

  00279	8b e5		 mov	 esp, ebp
  0027b	5d		 pop	 ebp
  0027c	8b e3		 mov	 esp, ebx
  0027e	5b		 pop	 ebx
  0027f	c2 04 00	 ret	 4
?GetRightXM@Camera@@QBE?AT__m128@@XZ ENDP		; Camera::GetRightXM
_TEXT	ENDS
PUBLIC	?GetRight@Camera@@QBE?AU_XMFLOAT3@@XZ		; Camera::GetRight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetRight@Camera@@QBE?AU_XMFLOAT3@@XZ PROC		; Camera::GetRight
; _this$ = ecx

; 46   : {

  00290	55		 push	 ebp
  00291	8b ec		 mov	 ebp, esp
  00293	51		 push	 ecx
  00294	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0029b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   : 	return mRight;

  0029e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a1	83 c0 0c	 add	 eax, 12			; 0000000cH
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  002a7	8b 10		 mov	 edx, DWORD PTR [eax]
  002a9	89 11		 mov	 DWORD PTR [ecx], edx
  002ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  002ae	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  002b1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002b4	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  002b7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 48   : }

  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c2 04 00	 ret	 4
?GetRight@Camera@@QBE?AU_XMFLOAT3@@XZ ENDP		; Camera::GetRight
_TEXT	ENDS
PUBLIC	?GetUpXM@Camera@@QBE?AT__m128@@XZ		; Camera::GetUpXM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T123945 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUpXM@Camera@@QBE?AT__m128@@XZ PROC			; Camera::GetUpXM
; _this$ = ecx

; 51   : {

  002c0	53		 push	 ebx
  002c1	8b dc		 mov	 ebx, esp
  002c3	83 ec 08	 sub	 esp, 8
  002c6	83 e4 f0	 and	 esp, -16		; fffffff0H
  002c9	83 c4 04	 add	 esp, 4
  002cc	55		 push	 ebp
  002cd	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  002d0	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  002d4	8b ec		 mov	 ebp, esp
  002d6	83 ec 20	 sub	 esp, 32			; 00000020H
  002d9	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  002de	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  002e1	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  002e4	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  002e7	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  002ea	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  002ed	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  002f0	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  002f3	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  002f6	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   : 	return XMLoadFloat3(&mUp);

  002f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002fc	83 c0 18	 add	 eax, 24			; 00000018H
  002ff	50		 push	 eax
  00300	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00305	83 c4 04	 add	 esp, 4
  00308	0f 29 45 e0	 movaps	 XMMWORD PTR $T123945[ebp], xmm0
  0030c	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  0030f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T123945[ebp]
  00313	0f 29 01	 movaps	 XMMWORD PTR [ecx], xmm0
  00316	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 53   : }

  00319	8b e5		 mov	 esp, ebp
  0031b	5d		 pop	 ebp
  0031c	8b e3		 mov	 esp, ebx
  0031e	5b		 pop	 ebx
  0031f	c2 04 00	 ret	 4
?GetUpXM@Camera@@QBE?AT__m128@@XZ ENDP			; Camera::GetUpXM
_TEXT	ENDS
PUBLIC	?GetUp@Camera@@QBE?AU_XMFLOAT3@@XZ		; Camera::GetUp
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetUp@Camera@@QBE?AU_XMFLOAT3@@XZ PROC			; Camera::GetUp
; _this$ = ecx

; 56   : {

  00330	55		 push	 ebp
  00331	8b ec		 mov	 ebp, esp
  00333	51		 push	 ecx
  00334	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0033b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 57   : 	return mUp;

  0033e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00341	83 c0 18	 add	 eax, 24			; 00000018H
  00344	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00347	8b 10		 mov	 edx, DWORD PTR [eax]
  00349	89 11		 mov	 DWORD PTR [ecx], edx
  0034b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0034e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00351	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00354	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00357	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 58   : }

  0035a	8b e5		 mov	 esp, ebp
  0035c	5d		 pop	 ebp
  0035d	c2 04 00	 ret	 4
?GetUp@Camera@@QBE?AU_XMFLOAT3@@XZ ENDP			; Camera::GetUp
_TEXT	ENDS
PUBLIC	?GetLookXM@Camera@@QBE?AT__m128@@XZ		; Camera::GetLookXM
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T123954 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetLookXM@Camera@@QBE?AT__m128@@XZ PROC		; Camera::GetLookXM
; _this$ = ecx

; 61   : {

  00360	53		 push	 ebx
  00361	8b dc		 mov	 ebx, esp
  00363	83 ec 08	 sub	 esp, 8
  00366	83 e4 f0	 and	 esp, -16		; fffffff0H
  00369	83 c4 04	 add	 esp, 4
  0036c	55		 push	 ebp
  0036d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00370	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00374	8b ec		 mov	 ebp, esp
  00376	83 ec 20	 sub	 esp, 32			; 00000020H
  00379	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0037e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00381	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00384	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00387	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0038a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0038d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00390	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00393	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00396	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   : 	return XMLoadFloat3(&mLook);

  00399	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039c	83 c0 24	 add	 eax, 36			; 00000024H
  0039f	50		 push	 eax
  003a0	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  003a5	83 c4 04	 add	 esp, 4
  003a8	0f 29 45 e0	 movaps	 XMMWORD PTR $T123954[ebp], xmm0
  003ac	8b 4b 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebx]
  003af	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR $T123954[ebp]
  003b3	0f 29 01	 movaps	 XMMWORD PTR [ecx], xmm0
  003b6	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 63   : }

  003b9	8b e5		 mov	 esp, ebp
  003bb	5d		 pop	 ebp
  003bc	8b e3		 mov	 esp, ebx
  003be	5b		 pop	 ebx
  003bf	c2 04 00	 ret	 4
?GetLookXM@Camera@@QBE?AT__m128@@XZ ENDP		; Camera::GetLookXM
_TEXT	ENDS
PUBLIC	?GetLook@Camera@@QBE?AU_XMFLOAT3@@XZ		; Camera::GetLook
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetLook@Camera@@QBE?AU_XMFLOAT3@@XZ PROC		; Camera::GetLook
; _this$ = ecx

; 66   : {

  003d0	55		 push	 ebp
  003d1	8b ec		 mov	 ebp, esp
  003d3	51		 push	 ecx
  003d4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  003db	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 67   : 	return mLook;

  003de	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003e1	83 c0 24	 add	 eax, 36			; 00000024H
  003e4	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  003e7	8b 10		 mov	 edx, DWORD PTR [eax]
  003e9	89 11		 mov	 DWORD PTR [ecx], edx
  003eb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  003ee	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  003f1	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  003f4	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  003f7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 68   : }

  003fa	8b e5		 mov	 esp, ebp
  003fc	5d		 pop	 ebp
  003fd	c2 04 00	 ret	 4
?GetLook@Camera@@QBE?AU_XMFLOAT3@@XZ ENDP		; Camera::GetLook
_TEXT	ENDS
PUBLIC	?GetNearZ@Camera@@QBEMXZ			; Camera::GetNearZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNearZ@Camera@@QBEMXZ PROC				; Camera::GetNearZ
; _this$ = ecx

; 71   : {

  00400	55		 push	 ebp
  00401	8b ec		 mov	 ebp, esp
  00403	51		 push	 ecx
  00404	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0040b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 72   : 	return mNearZ;

  0040e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00411	d9 40 30	 fld	 DWORD PTR [eax+48]

; 73   : }

  00414	8b e5		 mov	 esp, ebp
  00416	5d		 pop	 ebp
  00417	c3		 ret	 0
?GetNearZ@Camera@@QBEMXZ ENDP				; Camera::GetNearZ
_TEXT	ENDS
PUBLIC	?GetFarZ@Camera@@QBEMXZ				; Camera::GetFarZ
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFarZ@Camera@@QBEMXZ PROC				; Camera::GetFarZ
; _this$ = ecx

; 76   : {

  00420	55		 push	 ebp
  00421	8b ec		 mov	 ebp, esp
  00423	51		 push	 ecx
  00424	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0042b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 77   : 	return mFarZ;

  0042e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00431	d9 40 34	 fld	 DWORD PTR [eax+52]

; 78   : }

  00434	8b e5		 mov	 esp, ebp
  00436	5d		 pop	 ebp
  00437	c3		 ret	 0
?GetFarZ@Camera@@QBEMXZ ENDP				; Camera::GetFarZ
_TEXT	ENDS
PUBLIC	?GetAspect@Camera@@QBEMXZ			; Camera::GetAspect
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetAspect@Camera@@QBEMXZ PROC				; Camera::GetAspect
; _this$ = ecx

; 81   : {

  00440	55		 push	 ebp
  00441	8b ec		 mov	 ebp, esp
  00443	51		 push	 ecx
  00444	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0044b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 82   : 	return mAspect;

  0044e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00451	d9 40 38	 fld	 DWORD PTR [eax+56]

; 83   : }

  00454	8b e5		 mov	 esp, ebp
  00456	5d		 pop	 ebp
  00457	c3		 ret	 0
?GetAspect@Camera@@QBEMXZ ENDP				; Camera::GetAspect
_TEXT	ENDS
PUBLIC	?GetFovY@Camera@@QBEMXZ				; Camera::GetFovY
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFovY@Camera@@QBEMXZ PROC				; Camera::GetFovY
; _this$ = ecx

; 86   : {

  00460	55		 push	 ebp
  00461	8b ec		 mov	 ebp, esp
  00463	51		 push	 ecx
  00464	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0046b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 87   : 	return mFovY;

  0046e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00471	d9 40 3c	 fld	 DWORD PTR [eax+60]

; 88   : }

  00474	8b e5		 mov	 esp, ebp
  00476	5d		 pop	 ebp
  00477	c3		 ret	 0
?GetFovY@Camera@@QBEMXZ ENDP				; Camera::GetFovY
_TEXT	ENDS
PUBLIC	__real@4000000000000000
PUBLIC	?atan@@YAMM@Z					; atan
PUBLIC	__real@3fe0000000000000
PUBLIC	?GetNearWindowWidth@Camera@@QBEMXZ		; Camera::GetNearWindowWidth
PUBLIC	?GetFovX@Camera@@QBEMXZ				; Camera::GetFovX
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
tv92 = -16						; size = 4
tv85 = -12						; size = 4
_halfWidth$ = -8					; size = 4
_this$ = -4						; size = 4
?GetFovX@Camera@@QBEMXZ PROC				; Camera::GetFovX
; _this$ = ecx

; 91   : {

  00480	55		 push	 ebp
  00481	8b ec		 mov	 ebp, esp
  00483	83 ec 10	 sub	 esp, 16			; 00000010H
  00486	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0048b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0048e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00491	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00494	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00497	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   : 	float halfWidth = 0.5f*GetNearWindowWidth();

  0049a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049d	e8 00 00 00 00	 call	 ?GetNearWindowWidth@Camera@@QBEMXZ ; Camera::GetNearWindowWidth
  004a2	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  004a8	d9 5d f8	 fstp	 DWORD PTR _halfWidth$[ebp]

; 93   : 	return 2.0f*atan(halfWidth / mNearZ);

  004ab	d9 45 f8	 fld	 DWORD PTR _halfWidth$[ebp]
  004ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004b1	d8 70 30	 fdiv	 DWORD PTR [eax+48]
  004b4	d9 5d f4	 fstp	 DWORD PTR tv85[ebp]
  004b7	d9 45 f4	 fld	 DWORD PTR tv85[ebp]
  004ba	51		 push	 ecx
  004bb	d9 1c 24	 fstp	 DWORD PTR [esp]
  004be	e8 00 00 00 00	 call	 ?atan@@YAMM@Z		; atan
  004c3	83 c4 04	 add	 esp, 4
  004c6	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  004cc	d9 5d f0	 fstp	 DWORD PTR tv92[ebp]
  004cf	d9 45 f0	 fld	 DWORD PTR tv92[ebp]

; 94   : }

  004d2	83 c4 10	 add	 esp, 16			; 00000010H
  004d5	3b ec		 cmp	 ebp, esp
  004d7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004dc	8b e5		 mov	 esp, ebp
  004de	5d		 pop	 ebp
  004df	c3		 ret	 0
?GetFovX@Camera@@QBEMXZ ENDP				; Camera::GetFovX
_TEXT	ENDS
PUBLIC	_atanf
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT ?atan@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?atan@@YAMM@Z PROC					; atan, COMDAT

; 506  :         {return (atanf(_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  00007	d9 1c 24	 fstp	 DWORD PTR [esp]
  0000a	e8 00 00 00 00	 call	 _atanf
  0000f	83 c4 04	 add	 esp, 4
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?atan@@YAMM@Z ENDP					; atan
_TEXT	ENDS
EXTRN	_atan:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _atanf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_atanf	PROC						; COMDAT

; 404  :         {return ((float)atan((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	dd 1c 24	 fstp	 QWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 _atan
  00019	83 c4 08	 add	 esp, 8
  0001c	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0001f	d9 45 fc	 fld	 DWORD PTR tv73[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_atanf	ENDP
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	ENDS
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetNearWindowWidth@Camera@@QBEMXZ PROC			; Camera::GetNearWindowWidth
; _this$ = ecx

; 97   : {

  004e0	55		 push	 ebp
  004e1	8b ec		 mov	 ebp, esp
  004e3	83 ec 08	 sub	 esp, 8
  004e6	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  004ed	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  004f4	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 98   : 	return mAspect * mNearWindowHeight;

  004f7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004fa	d9 40 38	 fld	 DWORD PTR [eax+56]
  004fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00500	d8 49 40	 fmul	 DWORD PTR [ecx+64]
  00503	d9 5d f8	 fstp	 DWORD PTR tv72[ebp]
  00506	d9 45 f8	 fld	 DWORD PTR tv72[ebp]

; 99   : }

  00509	8b e5		 mov	 esp, ebp
  0050b	5d		 pop	 ebp
  0050c	c3		 ret	 0
?GetNearWindowWidth@Camera@@QBEMXZ ENDP			; Camera::GetNearWindowWidth
_TEXT	ENDS
PUBLIC	?GetNearWindowHeight@Camera@@QBEMXZ		; Camera::GetNearWindowHeight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetNearWindowHeight@Camera@@QBEMXZ PROC		; Camera::GetNearWindowHeight
; _this$ = ecx

; 102  : {

  00510	55		 push	 ebp
  00511	8b ec		 mov	 ebp, esp
  00513	51		 push	 ecx
  00514	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0051b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 103  : 	return mNearWindowHeight;

  0051e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00521	d9 40 40	 fld	 DWORD PTR [eax+64]

; 104  : }

  00524	8b e5		 mov	 esp, ebp
  00526	5d		 pop	 ebp
  00527	c3		 ret	 0
?GetNearWindowHeight@Camera@@QBEMXZ ENDP		; Camera::GetNearWindowHeight
_TEXT	ENDS
PUBLIC	?GetFarWindowWidth@Camera@@QBEMXZ		; Camera::GetFarWindowWidth
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?GetFarWindowWidth@Camera@@QBEMXZ PROC			; Camera::GetFarWindowWidth
; _this$ = ecx

; 107  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	83 ec 08	 sub	 esp, 8
  00536	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0053d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00544	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 108  : 	return mAspect * mFarWindowHeight;

  00547	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0054a	d9 40 38	 fld	 DWORD PTR [eax+56]
  0054d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00550	d8 49 44	 fmul	 DWORD PTR [ecx+68]
  00553	d9 5d f8	 fstp	 DWORD PTR tv72[ebp]
  00556	d9 45 f8	 fld	 DWORD PTR tv72[ebp]

; 109  : }

  00559	8b e5		 mov	 esp, ebp
  0055b	5d		 pop	 ebp
  0055c	c3		 ret	 0
?GetFarWindowWidth@Camera@@QBEMXZ ENDP			; Camera::GetFarWindowWidth
_TEXT	ENDS
PUBLIC	?GetFarWindowHeight@Camera@@QBEMXZ		; Camera::GetFarWindowHeight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFarWindowHeight@Camera@@QBEMXZ PROC			; Camera::GetFarWindowHeight
; _this$ = ecx

; 112  : {

  00560	55		 push	 ebp
  00561	8b ec		 mov	 ebp, esp
  00563	51		 push	 ecx
  00564	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0056b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  : 	return mFarWindowHeight;

  0056e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00571	d9 40 44	 fld	 DWORD PTR [eax+68]

; 114  : }

  00574	8b e5		 mov	 esp, ebp
  00576	5d		 pop	 ebp
  00577	c3		 ret	 0
?GetFarWindowHeight@Camera@@QBEMXZ ENDP			; Camera::GetFarWindowHeight
_TEXT	ENDS
PUBLIC	?XMStoreFloat4x4@@YAXPAU_XMFLOAT4X4@@ABU_XMMATRIX@@@Z ; XMStoreFloat4x4
PUBLIC	?XMMatrixPerspectiveFovLH@@YA?AU_XMMATRIX@@MMMM@Z ; XMMatrixPerspectiveFovLH
PUBLIC	_tanf
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv188 = -112						; size = 8
tv162 = -100						; size = 4
tv186 = -96						; size = 8
tv150 = -88						; size = 4
_P$ = -80						; size = 64
_this$ = -4						; size = 4
_fovY$ = 8						; size = 4
_aspect$ = 12						; size = 4
_zn$ = 16						; size = 4
_zf$ = 20						; size = 4
?SetLens@Camera@@QAEXMMMM@Z PROC			; Camera::SetLens
; _this$ = ecx

; 117  : {

  00580	53		 push	 ebx
  00581	8b dc		 mov	 ebx, esp
  00583	83 ec 08	 sub	 esp, 8
  00586	83 e4 f0	 and	 esp, -16		; fffffff0H
  00589	83 c4 04	 add	 esp, 4
  0058c	55		 push	 ebp
  0058d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00590	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00594	8b ec		 mov	 ebp, esp
  00596	83 ec 70	 sub	 esp, 112		; 00000070H
  00599	57		 push	 edi
  0059a	51		 push	 ecx
  0059b	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  0059e	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  005a3	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  005a8	f3 ab		 rep stosd
  005aa	59		 pop	 ecx
  005ab	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 118  : 	// cache properties
; 119  : 	mFovY = fovY;

  005ae	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005b1	d9 43 08	 fld	 DWORD PTR _fovY$[ebx]
  005b4	d9 58 3c	 fstp	 DWORD PTR [eax+60]

; 120  : 	mAspect = aspect;

  005b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005ba	d9 43 0c	 fld	 DWORD PTR _aspect$[ebx]
  005bd	d9 59 38	 fstp	 DWORD PTR [ecx+56]

; 121  : 	mNearZ = zn;

  005c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005c3	d9 43 10	 fld	 DWORD PTR _zn$[ebx]
  005c6	d9 5a 30	 fstp	 DWORD PTR [edx+48]

; 122  : 	mFarZ = zf;

  005c9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005cc	d9 43 14	 fld	 DWORD PTR _zf$[ebx]
  005cf	d9 58 34	 fstp	 DWORD PTR [eax+52]

; 123  : 
; 124  : 	mNearWindowHeight = 2.0f * mNearZ * tanf( 0.5f*mFovY );

  005d2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005d5	d9 41 30	 fld	 DWORD PTR [ecx+48]
  005d8	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  005de	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005e1	d9 42 3c	 fld	 DWORD PTR [edx+60]
  005e4	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  005ea	d9 5d a8	 fstp	 DWORD PTR tv150[ebp]
  005ed	d9 45 a8	 fld	 DWORD PTR tv150[ebp]
  005f0	51		 push	 ecx
  005f1	d9 1c 24	 fstp	 DWORD PTR [esp]
  005f4	dd 5d a0	 fstp	 QWORD PTR tv186[ebp]
  005f7	e8 00 00 00 00	 call	 _tanf
  005fc	83 c4 04	 add	 esp, 4
  005ff	dc 4d a0	 fmul	 QWORD PTR tv186[ebp]
  00602	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00605	d9 58 40	 fstp	 DWORD PTR [eax+64]

; 125  : 	mFarWindowHeight  = 2.0f * mFarZ * tanf( 0.5f*mFovY );

  00608	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0060b	d9 41 34	 fld	 DWORD PTR [ecx+52]
  0060e	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@4000000000000000
  00614	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00617	d9 42 3c	 fld	 DWORD PTR [edx+60]
  0061a	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  00620	d9 5d 9c	 fstp	 DWORD PTR tv162[ebp]
  00623	d9 45 9c	 fld	 DWORD PTR tv162[ebp]
  00626	51		 push	 ecx
  00627	d9 1c 24	 fstp	 DWORD PTR [esp]
  0062a	dd 5d 90	 fstp	 QWORD PTR tv188[ebp]
  0062d	e8 00 00 00 00	 call	 _tanf
  00632	83 c4 04	 add	 esp, 4
  00635	dc 4d 90	 fmul	 QWORD PTR tv188[ebp]
  00638	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0063b	d9 58 44	 fstp	 DWORD PTR [eax+68]

; 126  : 
; 127  : 	XMMATRIX P = XMMatrixPerspectiveFovLH(mFovY, mAspect, mNearZ, mFarZ);

  0063e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00641	51		 push	 ecx
  00642	d9 41 34	 fld	 DWORD PTR [ecx+52]
  00645	d9 1c 24	 fstp	 DWORD PTR [esp]
  00648	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0064b	51		 push	 ecx
  0064c	d9 42 30	 fld	 DWORD PTR [edx+48]
  0064f	d9 1c 24	 fstp	 DWORD PTR [esp]
  00652	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00655	51		 push	 ecx
  00656	d9 40 38	 fld	 DWORD PTR [eax+56]
  00659	d9 1c 24	 fstp	 DWORD PTR [esp]
  0065c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0065f	51		 push	 ecx
  00660	d9 41 3c	 fld	 DWORD PTR [ecx+60]
  00663	d9 1c 24	 fstp	 DWORD PTR [esp]
  00666	8d 55 b0	 lea	 edx, DWORD PTR _P$[ebp]
  00669	52		 push	 edx
  0066a	e8 00 00 00 00	 call	 ?XMMatrixPerspectiveFovLH@@YA?AU_XMMATRIX@@MMMM@Z ; XMMatrixPerspectiveFovLH
  0066f	83 c4 14	 add	 esp, 20			; 00000014H

; 128  : 	XMStoreFloat4x4(&mProj, P);

  00672	8d 45 b0	 lea	 eax, DWORD PTR _P$[ebp]
  00675	50		 push	 eax
  00676	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00679	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  0067f	51		 push	 ecx
  00680	e8 00 00 00 00	 call	 ?XMStoreFloat4x4@@YAXPAU_XMFLOAT4X4@@ABU_XMMATRIX@@@Z ; XMStoreFloat4x4
  00685	83 c4 08	 add	 esp, 8

; 129  : }

  00688	52		 push	 edx
  00689	8b cd		 mov	 ecx, ebp
  0068b	50		 push	 eax
  0068c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@SetLens
  00692	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00697	58		 pop	 eax
  00698	5a		 pop	 edx
  00699	5f		 pop	 edi
  0069a	8b e5		 mov	 esp, ebp
  0069c	5d		 pop	 ebp
  0069d	8b e3		 mov	 esp, ebx
  0069f	5b		 pop	 ebx
  006a0	c2 10 00	 ret	 16			; 00000010H
  006a3	90		 npad	 1
$LN5@SetLens:
  006a4	01 00 00 00	 DD	 1
  006a8	00 00 00 00	 DD	 $LN4@SetLens
$LN4@SetLens:
  006ac	b0 ff ff ff	 DD	 -80			; ffffffb0H
  006b0	40 00 00 00	 DD	 64			; 00000040H
  006b4	00 00 00 00	 DD	 $LN3@SetLens
$LN3@SetLens:
  006b8	50		 DB	 80			; 00000050H
  006b9	00		 DB	 0
?SetLens@Camera@@QAEXMMMM@Z ENDP			; Camera::SetLens
_TEXT	ENDS
EXTRN	_tan:PROC
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _tanf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_tanf	PROC						; COMDAT

; 436  :         {return ((float)tan((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	dd 1c 24	 fstp	 QWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 _tan
  00019	83 c4 08	 add	 esp, 8
  0001c	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0001f	d9 45 fc	 fld	 DWORD PTR tv73[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_tanf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MNKELLCL@pDestination?$AA@		; `string'
;	COMDAT ??_C@_0N@MNKELLCL@pDestination?$AA@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathconvert.inl
CONST	SEGMENT
??_C@_0N@MNKELLCL@pDestination?$AA@ DB 'pDestination', 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMStoreFloat4x4@@YAXPAU_XMFLOAT4X4@@ABU_XMMATRIX@@@Z
_TEXT	SEGMENT
_pDestination$ = 8					; size = 4
_M$ = 12						; size = 4
?XMStoreFloat4x4@@YAXPAU_XMFLOAT4X4@@ABU_XMMATRIX@@@Z PROC ; XMStoreFloat4x4, COMDAT

; 5682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 5683 : #if defined(_XM_NO_INTRINSICS_) || defined(XM_NO_MISALIGNED_VECTOR_ACCESS)
; 5684 : 
; 5685 :     XMStoreFloat4x4NC(pDestination, M);
; 5686 : 
; 5687 : #elif defined(_XM_SSE_INTRINSICS_)
; 5688 : 	XMASSERT(pDestination);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pDestination$[ebp], 0
  00007	75 17		 jne	 SHORT $LN3@XMStoreFlo
  00009	68 38 16 00 00	 push	 5688			; 00001638H
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNKELLCL@pDestination?$AA@
  00018	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMStoreFlo:

; 5689 : 
; 5690 : 	_mm_storeu_ps( &pDestination->_11, M.r[0] );

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _M$[ebp]
  00023	0f 28 01	 movaps	 xmm0, XMMWORD PTR [ecx]
  00026	8b 55 08	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00029	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 5691 : 	_mm_storeu_ps( &pDestination->_21, M.r[1] );

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _M$[ebp]
  0002f	0f 28 40 10	 movaps	 xmm0, XMMWORD PTR [eax+16]
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _pDestination$[ebp]
  00036	83 c1 10	 add	 ecx, 16			; 00000010H
  00039	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 5692 : 	_mm_storeu_ps( &pDestination->_31, M.r[2] );

  0003c	8b 55 0c	 mov	 edx, DWORD PTR _M$[ebp]
  0003f	0f 28 42 20	 movaps	 xmm0, XMMWORD PTR [edx+32]
  00043	8b 45 08	 mov	 eax, DWORD PTR _pDestination$[ebp]
  00046	83 c0 20	 add	 eax, 32			; 00000020H
  00049	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 5693 : 	_mm_storeu_ps( &pDestination->_41, M.r[3] );

  0004c	8b 4d 0c	 mov	 ecx, DWORD PTR _M$[ebp]
  0004f	0f 28 41 30	 movaps	 xmm0, XMMWORD PTR [ecx+48]
  00053	8b 55 08	 mov	 edx, DWORD PTR _pDestination$[ebp]
  00056	83 c2 30	 add	 edx, 48			; 00000030H
  00059	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0

; 5694 : #else // _XM_VMX128_INTRINSICS_
; 5695 : #endif // _XM_VMX128_INTRINSICS_
; 5696 : }

  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?XMStoreFloat4x4@@YAXPAU_XMFLOAT4X4@@ABU_XMMATRIX@@@Z ENDP ; XMStoreFloat4x4
_TEXT	ENDS
PUBLIC	??BXMVECTORF32@@QBE?AT__m128@@XZ		; XMVECTORF32::operator __m128
PUBLIC	??BXMVECTORI32@@QBE?AT__m128@@XZ		; XMVECTORI32::operator __m128
PUBLIC	?XMScalarSinCos@@YAXPAM0M@Z			; XMScalarSinCos
PUBLIC	??0_XMMATRIX@@QAE@XZ				; _XMMATRIX::_XMMATRIX
PUBLIC	??_C@_0CK@IFGBKHHO@?$CBXMScalarNearEqual?$CIFarZ?0?5NearZ?0?5@ ; `string'
PUBLIC	??_C@_0DA@IJOGHDLL@?$CBXMScalarNearEqual?$CIAspectRatio?0?5@ ; `string'
PUBLIC	__real@3727c5ac
PUBLIC	??_C@_0DF@NILLPPBG@?$CBXMScalarNearEqual?$CIFovAngleY?0?50?4@ ; `string'
PUBLIC	??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ ; `string'
PUBLIC	?XMScalarNearEqual@@YAHMMM@Z			; XMScalarNearEqual
PUBLIC	__real@37a7c5ac
;	COMDAT ??_C@_0CK@IFGBKHHO@?$CBXMScalarNearEqual?$CIFarZ?0?5NearZ?0?5@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmatrix.inl
CONST	SEGMENT
??_C@_0CK@IFGBKHHO@?$CBXMScalarNearEqual?$CIFarZ?0?5NearZ?0?5@ DB '!XMSca'
	DB	'larNearEqual(FarZ, NearZ, 0.00001f)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IJOGHDLL@?$CBXMScalarNearEqual?$CIAspectRatio?0?5@
CONST	SEGMENT
??_C@_0DA@IJOGHDLL@?$CBXMScalarNearEqual?$CIAspectRatio?0?5@ DB '!XMScala'
	DB	'rNearEqual(AspectRatio, 0.0f, 0.00001f)', 00H ; `string'
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-005
CONST	ENDS
;	COMDAT ??_C@_0DF@NILLPPBG@?$CBXMScalarNearEqual?$CIFovAngleY?0?50?4@
CONST	SEGMENT
??_C@_0DF@NILLPPBG@?$CBXMScalarNearEqual?$CIFovAngleY?0?50?4@ DB '!XMScal'
	DB	'arNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
CONST	SEGMENT
??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ DB 'c:\pr'
	DB	'ogram files (x86)\microsoft directx sdk (february 2010)\inclu'
	DB	'de\xnamathmatrix.inl', 00H			; `string'
CONST	ENDS
;	COMDAT __real@37a7c5ac
CONST	SEGMENT
__real@37a7c5ac DD 037a7c5acr			; 2e-005
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMMatrixPerspectiveFovLH@@YA?AU_XMMATRIX@@MMMM@Z
_TEXT	SEGMENT
tv236 = -324						; size = 4
$T94187 = -320						; size = 16
$T94186 = -304						; size = 16
$T94185 = -288						; size = 16
$T94184 = -272						; size = 16
$T94183 = -256						; size = 16
$T94182 = -240						; size = 16
$T94181 = -224						; size = 16
$T94180 = -208						; size = 16
$T94179 = -192						; size = 16
_vTemp$ = -176						; size = 16
_vValues$ = -160					; size = 16
_rMem$ = -144						; size = 16
_Height$ = -116						; size = 4
_fRange$ = -112						; size = 4
_CosFov$ = -104						; size = 4
_SinFov$ = -92						; size = 4
_M$ = -80						; size = 64
___$ReturnUdt$ = 8					; size = 4
_FovAngleY$ = 12					; size = 4
_AspectRatio$ = 16					; size = 4
_NearZ$ = 20						; size = 4
_FarZ$ = 24						; size = 4
?XMMatrixPerspectiveFovLH@@YA?AU_XMMATRIX@@MMMM@Z PROC	; XMMatrixPerspectiveFovLH, COMDAT

; 2317 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd b8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-328]
  00024	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd

; 2318 : #if defined(_XM_NO_INTRINSICS_)
; 2319 : 
; 2320 :     FLOAT    SinFov;
; 2321 :     FLOAT    CosFov;
; 2322 :     FLOAT    Height;
; 2323 :     FLOAT    Width;
; 2324 :     XMMATRIX M;
; 2325 : 
; 2326 :     XMASSERT(!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f));
; 2327 :     XMASSERT(!XMScalarNearEqual(AspectRatio, 0.0f, 0.00001f));
; 2328 :     XMASSERT(!XMScalarNearEqual(FarZ, NearZ, 0.00001f));
; 2329 : 
; 2330 :     XMScalarSinCos(&SinFov, &CosFov, 0.5f * FovAngleY);
; 2331 : 
; 2332 :     Height = CosFov / SinFov;
; 2333 :     Width = Height / AspectRatio;
; 2334 : 
; 2335 :     M.r[0] = XMVectorSet(Width, 0.0f, 0.0f, 0.0f);
; 2336 :     M.r[1] = XMVectorSet(0.0f, Height, 0.0f, 0.0f);
; 2337 :     M.r[2] = XMVectorSet(0.0f, 0.0f, FarZ / (FarZ - NearZ), 1.0f);
; 2338 :     M.r[3] = XMVectorSet(0.0f, 0.0f, -M.r[2].vector4_f32[2] * NearZ, 0.0f);
; 2339 : 
; 2340 :     return M;
; 2341 : 
; 2342 : #elif defined(_XM_SSE_INTRINSICS_)
; 2343 :     XMASSERT(!XMScalarNearEqual(FovAngleY, 0.0f, 0.00001f * 2.0f));

  00030	51		 push	 ecx
  00031	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@37a7c5ac
  00037	d9 1c 24	 fstp	 DWORD PTR [esp]
  0003a	51		 push	 ecx
  0003b	d9 ee		 fldz
  0003d	d9 1c 24	 fstp	 DWORD PTR [esp]
  00040	51		 push	 ecx
  00041	d9 43 0c	 fld	 DWORD PTR _FovAngleY$[ebx]
  00044	d9 1c 24	 fstp	 DWORD PTR [esp]
  00047	e8 00 00 00 00	 call	 ?XMScalarNearEqual@@YAHMMM@Z ; XMScalarNearEqual
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	85 c0		 test	 eax, eax
  00051	74 17		 je	 SHORT $LN3@XMMatrixPe
  00053	68 27 09 00 00	 push	 2343			; 00000927H
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@NILLPPBG@?$CBXMScalarNearEqual?$CIFovAngleY?0?50?4@
  00062	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMMatrixPe:

; 2344 :     XMASSERT(!XMScalarNearEqual(AspectRatio, 0.0f, 0.00001f));

  0006a	51		 push	 ecx
  0006b	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3727c5ac
  00071	d9 1c 24	 fstp	 DWORD PTR [esp]
  00074	51		 push	 ecx
  00075	d9 ee		 fldz
  00077	d9 1c 24	 fstp	 DWORD PTR [esp]
  0007a	51		 push	 ecx
  0007b	d9 43 10	 fld	 DWORD PTR _AspectRatio$[ebx]
  0007e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00081	e8 00 00 00 00	 call	 ?XMScalarNearEqual@@YAHMMM@Z ; XMScalarNearEqual
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	85 c0		 test	 eax, eax
  0008b	74 17		 je	 SHORT $LN4@XMMatrixPe
  0008d	68 28 09 00 00	 push	 2344			; 00000928H
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00097	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IJOGHDLL@?$CBXMScalarNearEqual?$CIAspectRatio?0?5@
  0009c	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  000a1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@XMMatrixPe:

; 2345 :     XMASSERT(!XMScalarNearEqual(FarZ, NearZ, 0.00001f));

  000a4	51		 push	 ecx
  000a5	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3727c5ac
  000ab	d9 1c 24	 fstp	 DWORD PTR [esp]
  000ae	51		 push	 ecx
  000af	d9 43 14	 fld	 DWORD PTR _NearZ$[ebx]
  000b2	d9 1c 24	 fstp	 DWORD PTR [esp]
  000b5	51		 push	 ecx
  000b6	d9 43 18	 fld	 DWORD PTR _FarZ$[ebx]
  000b9	d9 1c 24	 fstp	 DWORD PTR [esp]
  000bc	e8 00 00 00 00	 call	 ?XMScalarNearEqual@@YAHMMM@Z ; XMScalarNearEqual
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	85 c0		 test	 eax, eax
  000c6	74 17		 je	 SHORT $LN5@XMMatrixPe
  000c8	68 29 09 00 00	 push	 2345			; 00000929H
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  000d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@IFGBKHHO@?$CBXMScalarNearEqual?$CIFarZ?0?5NearZ?0?5@
  000d7	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  000dc	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN5@XMMatrixPe:

; 2346 : 	XMMATRIX M;

  000df	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  000e2	e8 00 00 00 00	 call	 ??0_XMMATRIX@@QAE@XZ	; _XMMATRIX::_XMMATRIX

; 2347 :     FLOAT    SinFov;
; 2348 :     FLOAT    CosFov;
; 2349 :     XMScalarSinCos(&SinFov, &CosFov, 0.5f * FovAngleY);

  000e7	d9 43 0c	 fld	 DWORD PTR _FovAngleY$[ebx]
  000ea	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe0000000000000
  000f0	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR tv236[ebp]
  000f6	d9 85 bc fe ff
	ff		 fld	 DWORD PTR tv236[ebp]
  000fc	51		 push	 ecx
  000fd	d9 1c 24	 fstp	 DWORD PTR [esp]
  00100	8d 45 98	 lea	 eax, DWORD PTR _CosFov$[ebp]
  00103	50		 push	 eax
  00104	8d 4d a4	 lea	 ecx, DWORD PTR _SinFov$[ebp]
  00107	51		 push	 ecx
  00108	e8 00 00 00 00	 call	 ?XMScalarSinCos@@YAXPAM0M@Z ; XMScalarSinCos
  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2350 :     FLOAT fRange = FarZ / (FarZ-NearZ);

  00110	d9 43 18	 fld	 DWORD PTR _FarZ$[ebx]
  00113	d8 63 14	 fsub	 DWORD PTR _NearZ$[ebx]
  00116	d8 7b 18	 fdivr	 DWORD PTR _FarZ$[ebx]
  00119	d9 5d 90	 fstp	 DWORD PTR _fRange$[ebp]

; 2351 :     // Note: This is recorded on the stack
; 2352 :     FLOAT Height = CosFov / SinFov;

  0011c	d9 45 98	 fld	 DWORD PTR _CosFov$[ebp]
  0011f	d8 75 a4	 fdiv	 DWORD PTR _SinFov$[ebp]
  00122	d9 5d 8c	 fstp	 DWORD PTR _Height$[ebp]

; 2353 :     XMVECTOR rMem = {
; 2354 :         Height / AspectRatio,

  00125	d9 45 8c	 fld	 DWORD PTR _Height$[ebp]
  00128	d8 73 10	 fdiv	 DWORD PTR _AspectRatio$[ebx]
  0012b	d9 9d 70 ff ff
	ff		 fstp	 DWORD PTR _rMem$[ebp]

; 2355 :         Height,

  00131	d9 45 8c	 fld	 DWORD PTR _Height$[ebp]
  00134	d9 9d 74 ff ff
	ff		 fstp	 DWORD PTR _rMem$[ebp+4]

; 2356 :         fRange,

  0013a	d9 45 90	 fld	 DWORD PTR _fRange$[ebp]
  0013d	d9 9d 78 ff ff
	ff		 fstp	 DWORD PTR _rMem$[ebp+8]

; 2357 :         -fRange * NearZ
; 2358 :     };

  00143	d9 45 90	 fld	 DWORD PTR _fRange$[ebp]
  00146	d9 e0		 fchs
  00148	d8 4b 14	 fmul	 DWORD PTR _NearZ$[ebx]
  0014b	d9 9d 7c ff ff
	ff		 fstp	 DWORD PTR _rMem$[ebp+12]

; 2359 :     // Copy from memory to SSE register
; 2360 :     XMVECTOR vValues = rMem;

  00151	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _rMem$[ebp]
  00158	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vValues$[ebp], xmm0

; 2361 :     XMVECTOR vTemp = _mm_setzero_ps(); 

  0015f	0f 57 c0	 xorps	 xmm0, xmm0
  00162	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T94179[ebp], xmm0
  00169	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94179[ebp]
  00170	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2362 :     // Copy x only
; 2363 :     vTemp = _mm_move_ss(vTemp,vValues);

  00177	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  0017e	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00185	f3 0f 10 c8	 _movss	 xmm1, xmm0
  00189	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T94180[ebp], xmm1
  00190	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94180[ebp]
  00197	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2364 :     // CosFov / SinFov,0,0,0
; 2365 :     M.r[0] = vTemp;

  0019e	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  001a5	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0

; 2366 :     // 0,Height / AspectRatio,0,0
; 2367 :     vTemp = vValues;

  001a9	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  001b0	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2368 :     vTemp = _mm_and_ps(vTemp,g_XMMaskY);

  001b7	8d 95 20 ff ff
	ff		 lea	 edx, DWORD PTR $T94181[ebp]
  001bd	52		 push	 edx
  001be	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMaskY@@3UXMVECTORI32@@B ; g_XMMaskY
  001c3	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  001c8	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  001cb	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  001d2	0f 54 c8	 andps	 xmm1, xmm0
  001d5	0f 29 8d 10 ff
	ff ff		 movaps	 XMMWORD PTR $T94182[ebp], xmm1
  001dc	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94182[ebp]
  001e3	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2369 :     M.r[1] = vTemp;

  001ea	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  001f1	0f 29 45 c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm0

; 2370 :     // x=fRange,y=-fRange * NearZ,0,1.0f
; 2371 :     vTemp = _mm_setzero_ps();

  001f5	0f 57 c0	 xorps	 xmm0, xmm0
  001f8	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR $T94183[ebp], xmm0
  001ff	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94183[ebp]
  00206	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2372 :     vValues = _mm_shuffle_ps(vValues,g_XMIdentityR3,_MM_SHUFFLE(3,2,3,2));

  0020d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR $T94184[ebp]
  00213	50		 push	 eax
  00214	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@@3UXMVECTORF32@@B ; g_XMIdentityR3
  00219	e8 00 00 00 00	 call	 ??BXMVECTORF32@@QBE?AT__m128@@XZ ; XMVECTORF32::operator __m128
  0021e	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00221	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vValues$[ebp]
  00228	0f c6 c8 ee	 shufps	 xmm1, xmm0, 238		; 000000eeH
  0022c	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR $T94185[ebp], xmm1
  00233	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94185[ebp]
  0023a	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vValues$[ebp], xmm0

; 2373 :     // 0,0,fRange,1.0f
; 2374 :     vTemp = _mm_shuffle_ps(vTemp,vValues,_MM_SHUFFLE(3,0,0,0));

  00241	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  00248	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  0024f	0f c6 c8 c0	 shufps	 xmm1, xmm0, 192		; 000000c0H
  00253	0f 29 8d d0 fe
	ff ff		 movaps	 XMMWORD PTR $T94186[ebp], xmm1
  0025a	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94186[ebp]
  00261	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2375 :     M.r[2] = vTemp;

  00268	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0026f	0f 29 45 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm0

; 2376 :     // 0,0,-fRange * NearZ,0.0f
; 2377 :     vTemp = _mm_shuffle_ps(vTemp,vValues,_MM_SHUFFLE(2,1,0,0));

  00273	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vValues$[ebp]
  0027a	0f 28 8d 50 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00281	0f c6 c8 90	 shufps	 xmm1, xmm0, 144		; 00000090H
  00285	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR $T94187[ebp], xmm1
  0028c	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T94187[ebp]
  00293	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 2378 :     M.r[3] = vTemp;

  0029a	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  002a1	0f 29 45 e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm0

; 2379 :     return M;

  002a5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002aa	8d 75 b0	 lea	 esi, DWORD PTR _M$[ebp]
  002ad	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  002b0	f3 a5		 rep movsd
  002b2	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 2380 : #else // _XM_VMX128_INTRINSICS_
; 2381 : #endif // _XM_VMX128_INTRINSICS_
; 2382 : }

  002b5	52		 push	 edx
  002b6	8b cd		 mov	 ecx, ebp
  002b8	50		 push	 eax
  002b9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@XMMatrixPe
  002bf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002c4	58		 pop	 eax
  002c5	5a		 pop	 edx
  002c6	5f		 pop	 edi
  002c7	5e		 pop	 esi
  002c8	8b e5		 mov	 esp, ebp
  002ca	5d		 pop	 ebp
  002cb	8b e3		 mov	 esp, ebx
  002cd	5b		 pop	 ebx
  002ce	c3		 ret	 0
  002cf	90		 npad	 1
$LN10@XMMatrixPe:
  002d0	03 00 00 00	 DD	 3
  002d4	00 00 00 00	 DD	 $LN9@XMMatrixPe
$LN9@XMMatrixPe:
  002d8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  002dc	40 00 00 00	 DD	 64			; 00000040H
  002e0	00 00 00 00	 DD	 $LN6@XMMatrixPe
  002e4	a4 ff ff ff	 DD	 -92			; ffffffa4H
  002e8	04 00 00 00	 DD	 4
  002ec	00 00 00 00	 DD	 $LN7@XMMatrixPe
  002f0	98 ff ff ff	 DD	 -104			; ffffff98H
  002f4	04 00 00 00	 DD	 4
  002f8	00 00 00 00	 DD	 $LN8@XMMatrixPe
$LN8@XMMatrixPe:
  002fc	43		 DB	 67			; 00000043H
  002fd	6f		 DB	 111			; 0000006fH
  002fe	73		 DB	 115			; 00000073H
  002ff	46		 DB	 70			; 00000046H
  00300	6f		 DB	 111			; 0000006fH
  00301	76		 DB	 118			; 00000076H
  00302	00		 DB	 0
$LN7@XMMatrixPe:
  00303	53		 DB	 83			; 00000053H
  00304	69		 DB	 105			; 00000069H
  00305	6e		 DB	 110			; 0000006eH
  00306	46		 DB	 70			; 00000046H
  00307	6f		 DB	 111			; 0000006fH
  00308	76		 DB	 118			; 00000076H
  00309	00		 DB	 0
$LN6@XMMatrixPe:
  0030a	4d		 DB	 77			; 0000004dH
  0030b	00		 DB	 0
?XMMatrixPerspectiveFovLH@@YA?AU_XMMATRIX@@MMMM@Z ENDP	; XMMatrixPerspectiveFovLH
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamath.h
_TEXT	ENDS
;	COMDAT ??BXMVECTORF32@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORF32@@QBE?AT__m128@@XZ PROC			; XMVECTORF32::operator __m128, COMDAT
; _this$ = ecx

; 240  :     inline operator XMVECTOR() const { return v; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	0f 28 01	 movaps	 xmm0, XMMWORD PTR [ecx]
  00017	0f 29 00	 movaps	 XMMWORD PTR [eax], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORF32@@QBE?AT__m128@@XZ ENDP			; XMVECTORF32::operator __m128
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BXMVECTORI32@@QBE?AT__m128@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BXMVECTORI32@@QBE?AT__m128@@XZ PROC			; XMVECTORI32::operator __m128, COMDAT
; _this$ = ecx

; 254  :     inline operator XMVECTOR() const { return v; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	0f 28 01	 movaps	 xmm0, XMMWORD PTR [ecx]
  00017	0f 29 00	 movaps	 XMMWORD PTR [eax], xmm0
  0001a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??BXMVECTORI32@@QBE?AT__m128@@XZ ENDP			; XMVECTORI32::operator __m128
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0_XMMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_XMMATRIX@@QAE@XZ PROC				; _XMMATRIX::_XMMATRIX, COMDAT
; _this$ = ecx

; 356  :     _XMMATRIX() {};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
??0_XMMATRIX@@QAE@XZ ENDP				; _XMMATRIX::_XMMATRIX
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmisc.inl
;	COMDAT ?XMScalarNearEqual@@YAHMMM@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_Delta$ = -4						; size = 4
_S1$ = 8						; size = 4
_S2$ = 12						; size = 4
_Epsilon$ = 16						; size = 4
?XMScalarNearEqual@@YAHMMM@Z PROC			; XMScalarNearEqual, COMDAT

; 1971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1972 :     FLOAT Delta = S1 - S2;

  00014	d9 45 08	 fld	 DWORD PTR _S1$[ebp]
  00017	d8 65 0c	 fsub	 DWORD PTR _S2$[ebp]
  0001a	d9 5d fc	 fstp	 DWORD PTR _Delta$[ebp]

; 1973 : #if defined(_XM_NO_INTRINSICS_)
; 1974 :     UINT  AbsDelta = *(UINT*)&Delta & 0x7FFFFFFF;
; 1975 :     return (*(FLOAT*)&AbsDelta <= Epsilon);
; 1976 : #elif defined(_XM_SSE_INTRINSICS_)
; 1977 :     return (fabsf(Delta) <= Epsilon);

  0001d	51		 push	 ecx
  0001e	d9 45 fc	 fld	 DWORD PTR _Delta$[ebp]
  00021	d9 1c 24	 fstp	 DWORD PTR [esp]
  00024	e8 00 00 00 00	 call	 _fabsf
  00029	83 c4 04	 add	 esp, 4
  0002c	d9 45 10	 fld	 DWORD PTR _Epsilon$[ebp]
  0002f	de d9		 fcompp
  00031	df e0		 fnstsw	 ax
  00033	f6 c4 01	 test	 ah, 1
  00036	75 09		 jne	 SHORT $LN3@XMScalarNe
  00038	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv73[ebp], 1
  0003f	eb 07		 jmp	 SHORT $LN4@XMScalarNe
$LN3@XMScalarNe:
  00041	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@XMScalarNe:
  00048	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1978 : #else
; 1979 :     return (__fabs(Delta) <= Epsilon);
; 1980 : #endif
; 1981 : }

  0004b	83 c4 08	 add	 esp, 8
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
?XMScalarNearEqual@@YAHMMM@Z ENDP			; XMScalarNearEqual
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 395  :         {return ((float)fabs((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	dd 1c 24	 fstp	 QWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 _fabs
  00019	83 c4 08	 add	 esp, 8
  0001c	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0001f	d9 45 fc	 fld	 DWORD PTR tv73[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_fabsf	ENDP
_TEXT	ENDS
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	??_C@_04ODHLJNG@pCos?$AA@			; `string'
PUBLIC	??_C@_04KFMPPOOH@pSin?$AA@			; `string'
PUBLIC	??_C@_0FF@JPJNPAEG@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ ; `string'
;	COMDAT ??_C@_04ODHLJNG@pCos?$AA@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmisc.inl
CONST	SEGMENT
??_C@_04ODHLJNG@pCos?$AA@ DB 'pCos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KFMPPOOH@pSin?$AA@
CONST	SEGMENT
??_C@_04KFMPPOOH@pSin?$AA@ DB 'pSin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@JPJNPAEG@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
CONST	SEGMENT
??_C@_0FF@JPJNPAEG@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@ DB 'c:\pr'
	DB	'ogram files (x86)\microsoft directx sdk (february 2010)\inclu'
	DB	'de\xnamathmisc.inl', 00H			; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMScalarSinCos@@YAXPAM0M@Z
_TEXT	SEGMENT
_pSin$ = 8						; size = 4
_pCos$ = 12						; size = 4
_Value$ = 16						; size = 4
?XMScalarSinCos@@YAXPAM0M@Z PROC			; XMScalarSinCos, COMDAT

; 2105 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2106 : #if defined(_XM_NO_INTRINSICS_)
; 2107 : 
; 2108 :     FLOAT                  ValueMod;
; 2109 :     FLOAT                  ValueSq;
; 2110 :     XMVECTOR               V0123, V0246, V1357, V8101214, V9111315, V16182022, V17192123;
; 2111 :     XMVECTOR               V1, V2, V6, V8;
; 2112 :     XMVECTOR               S0, S1, S2, C0, C1, C2;
; 2113 : 
; 2114 :     XMASSERT(pSin);
; 2115 :     XMASSERT(pCos);
; 2116 : 
; 2117 :     ValueMod = XMScalarModAngle(Value);
; 2118 : 
; 2119 :     // sin(V) ~= V - V^3 / 3! + V^5 / 5! - V^7 / 7! + V^9 / 9! - V^11 / 11! + V^13 / 13! - V^15 / 15! +
; 2120 :     //           V^17 / 17! - V^19 / 19! + V^21 / 21! - V^23 / 23! (for -PI <= V < PI)
; 2121 :     // cos(V) ~= 1 - V^2 / 2! + V^4 / 4! - V^6 / 6! + V^8 / 8! - V^10 / 10! +
; 2122 :     //           V^12 / 12! - V^14 / 14! + V^16 / 16! - V^18 / 18! + V^20 / 20! - V^22 / 22! (for -PI <= V < PI)
; 2123 : 
; 2124 :     ValueSq = ValueMod * ValueMod;
; 2125 : 
; 2126 :     V0123 = XMVectorSet(1.0f, ValueMod, ValueSq, ValueSq * ValueMod);
; 2127 : 
; 2128 :     V1 = XMVectorSplatY(V0123);
; 2129 :     V2 = XMVectorSplatZ(V0123);
; 2130 : 
; 2131 :     V0246 = XMVectorMultiply(V0123, V0123);
; 2132 :     V1357 = XMVectorMultiply(V0246, V1);
; 2133 : 
; 2134 :     V6 = XMVectorSplatW(V0246);
; 2135 :     V8 = XMVectorMultiply(V6, V2);
; 2136 : 
; 2137 :     V8101214 = XMVectorMultiply(V0246, V8);
; 2138 :     V9111315 = XMVectorMultiply(V1357, V8);
; 2139 :     V16182022 = XMVectorMultiply(V8101214, V8);
; 2140 :     V17192123 = XMVectorMultiply(V9111315, V8);
; 2141 : 
; 2142 :     C0 = XMVector4Dot(V0246, g_XMCosCoefficients0.v);
; 2143 :     S0 = XMVector4Dot(V1357, g_XMSinCoefficients0.v);
; 2144 :     C1 = XMVector4Dot(V8101214, g_XMCosCoefficients1.v);
; 2145 :     S1 = XMVector4Dot(V9111315, g_XMSinCoefficients1.v);
; 2146 :     C2 = XMVector4Dot(V16182022, g_XMCosCoefficients2.v);
; 2147 :     S2 = XMVector4Dot(V17192123, g_XMSinCoefficients2.v);
; 2148 : 
; 2149 :     *pCos = C0.vector4_f32[0] + C1.vector4_f32[0] + C2.vector4_f32[0];
; 2150 :     *pSin = S0.vector4_f32[0] + S1.vector4_f32[0] + S2.vector4_f32[0];
; 2151 : 
; 2152 : #elif defined(_XM_SSE_INTRINSICS_)
; 2153 :     XMASSERT(pSin);

  00003	83 7d 08 00	 cmp	 DWORD PTR _pSin$[ebp], 0
  00007	75 17		 jne	 SHORT $LN3@XMScalarSi
  00009	68 69 08 00 00	 push	 2153			; 00000869H
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JPJNPAEG@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00013	68 00 00 00 00	 push	 OFFSET ??_C@_04KFMPPOOH@pSin?$AA@
  00018	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMScalarSi:

; 2154 :     XMASSERT(pCos);

  00020	83 7d 0c 00	 cmp	 DWORD PTR _pCos$[ebp], 0
  00024	75 17		 jne	 SHORT $LN4@XMScalarSi
  00026	68 6a 08 00 00	 push	 2154			; 0000086aH
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@JPJNPAEG@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_04ODHLJNG@pCos?$AA@
  00035	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@XMScalarSi:

; 2155 : 
; 2156 :     *pSin = sinf(Value);

  0003d	51		 push	 ecx
  0003e	d9 45 10	 fld	 DWORD PTR _Value$[ebp]
  00041	d9 1c 24	 fstp	 DWORD PTR [esp]
  00044	e8 00 00 00 00	 call	 _sinf
  00049	83 c4 04	 add	 esp, 4
  0004c	8b 55 08	 mov	 edx, DWORD PTR _pSin$[ebp]
  0004f	d9 1a		 fstp	 DWORD PTR [edx]

; 2157 :     *pCos = cosf(Value);

  00051	51		 push	 ecx
  00052	d9 45 10	 fld	 DWORD PTR _Value$[ebp]
  00055	d9 1c 24	 fstp	 DWORD PTR [esp]
  00058	e8 00 00 00 00	 call	 _cosf
  0005d	83 c4 04	 add	 esp, 4
  00060	8b 45 0c	 mov	 eax, DWORD PTR _pCos$[ebp]
  00063	d9 18		 fstp	 DWORD PTR [eax]

; 2158 : #else // _XM_VMX128_INTRINSICS_
; 2159 : #endif // _XM_VMX128_INTRINSICS_
; 2160 : }

  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
?XMScalarSinCos@@YAXPAM0M@Z ENDP			; XMScalarSinCos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	dd 1c 24	 fstp	 QWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 _cos
  00019	83 c4 08	 add	 esp, 8
  0001c	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0001f	d9 45 fc	 fld	 DWORD PTR tv73[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	d9 45 08	 fld	 DWORD PTR __X$[ebp]
  0000e	83 ec 08	 sub	 esp, 8
  00011	dd 1c 24	 fstp	 QWORD PTR [esp]
  00014	e8 00 00 00 00	 call	 _sin
  00019	83 c4 08	 add	 esp, 8
  0001c	d9 5d fc	 fstp	 DWORD PTR tv73[ebp]
  0001f	d9 45 fc	 fld	 DWORD PTR tv73[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z	; XMStoreFloat3
PUBLIC	?XMVector3Cross@@YA?AT__m128@@T1@0@Z		; XMVector3Cross
PUBLIC	?XMVector3Normalize@@YA?AT__m128@@T1@@Z		; XMVector3Normalize
PUBLIC	?XMVectorSubtract@@YA?AT__m128@@T1@0@Z		; XMVectorSubtract
PUBLIC	?LookAt@Camera@@QAEXT__m128@@00@Z		; Camera::LookAt
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124009 = -192						; size = 16
_U$ = -176						; size = 16
$T124007 = -160						; size = 16
$T124006 = -144						; size = 16
_R$ = -128						; size = 16
$T124004 = -112						; size = 16
$T124003 = -96						; size = 16
_L$ = -80						; size = 16
_this$ = -52						; size = 4
_worldUp$ = -48						; size = 16
_target$ = -32						; size = 16
_pos$ = -16						; size = 16
?LookAt@Camera@@QAEXT__m128@@00@Z PROC			; Camera::LookAt
; _this$ = ecx
; _pos$ = xmm0
; _target$ = xmm1
; _worldUp$ = xmm2

; 132  : {

  006c0	53		 push	 ebx
  006c1	8b dc		 mov	 ebx, esp
  006c3	83 ec 08	 sub	 esp, 8
  006c6	83 e4 f0	 and	 esp, -16		; fffffff0H
  006c9	83 c4 04	 add	 esp, 4
  006cc	55		 push	 ebp
  006cd	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  006d0	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  006d4	8b ec		 mov	 ebp, esp
  006d6	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  006dc	57		 push	 edi
  006dd	51		 push	 ecx
  006de	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  006e4	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  006e9	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  006ee	f3 ab		 rep stosd
  006f0	59		 pop	 ecx
  006f1	0f 29 55 d0	 movaps	 XMMWORD PTR _worldUp$[ebp], xmm2
  006f5	0f 29 4d e0	 movaps	 XMMWORD PTR _target$[ebp], xmm1
  006f9	0f 29 45 f0	 movaps	 XMMWORD PTR _pos$[ebp], xmm0
  006fd	89 4d cc	 mov	 DWORD PTR _this$[ebp], ecx

; 133  : 	XMVECTOR L = XMVector3Normalize(XMVectorSubtract(target, pos));

  00700	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _pos$[ebp]
  00704	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _target$[ebp]
  00708	e8 00 00 00 00	 call	 ?XMVectorSubtract@@YA?AT__m128@@T1@0@Z ; XMVectorSubtract
  0070d	0f 29 45 a0	 movaps	 XMMWORD PTR $T124003[ebp], xmm0
  00711	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T124003[ebp]
  00715	e8 00 00 00 00	 call	 ?XMVector3Normalize@@YA?AT__m128@@T1@@Z ; XMVector3Normalize
  0071a	0f 29 45 90	 movaps	 XMMWORD PTR $T124004[ebp], xmm0
  0071e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124004[ebp]
  00722	0f 29 45 b0	 movaps	 XMMWORD PTR _L$[ebp], xmm0

; 134  : 	XMVECTOR R = XMVector3Normalize(XMVector3Cross(worldUp, L));

  00726	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _L$[ebp]
  0072a	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _worldUp$[ebp]
  0072e	e8 00 00 00 00	 call	 ?XMVector3Cross@@YA?AT__m128@@T1@0@Z ; XMVector3Cross
  00733	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T124006[ebp], xmm0
  0073a	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124006[ebp]
  00741	e8 00 00 00 00	 call	 ?XMVector3Normalize@@YA?AT__m128@@T1@@Z ; XMVector3Normalize
  00746	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T124007[ebp], xmm0
  0074d	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124007[ebp]
  00754	0f 29 45 80	 movaps	 XMMWORD PTR _R$[ebp], xmm0

; 135  : 	XMVECTOR U = XMVector3Cross(L, R);

  00758	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _R$[ebp]
  0075c	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  00760	e8 00 00 00 00	 call	 ?XMVector3Cross@@YA?AT__m128@@T1@0@Z ; XMVector3Cross
  00765	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T124009[ebp], xmm0
  0076c	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124009[ebp]
  00773	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _U$[ebp], xmm0

; 136  : 
; 137  : 	XMStoreFloat3(&mPosition, pos);

  0077a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _pos$[ebp]
  0077e	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  00781	50		 push	 eax
  00782	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00787	83 c4 04	 add	 esp, 4

; 138  : 	XMStoreFloat3(&mLook, L);

  0078a	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  0078e	8b 4d cc	 mov	 ecx, DWORD PTR _this$[ebp]
  00791	83 c1 24	 add	 ecx, 36			; 00000024H
  00794	51		 push	 ecx
  00795	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  0079a	83 c4 04	 add	 esp, 4

; 139  : 	XMStoreFloat3(&mRight, R);

  0079d	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _R$[ebp]
  007a1	8b 55 cc	 mov	 edx, DWORD PTR _this$[ebp]
  007a4	83 c2 0c	 add	 edx, 12			; 0000000cH
  007a7	52		 push	 edx
  007a8	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  007ad	83 c4 04	 add	 esp, 4

; 140  : 	XMStoreFloat3(&mUp, U);

  007b0	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _U$[ebp]
  007b7	8b 45 cc	 mov	 eax, DWORD PTR _this$[ebp]
  007ba	83 c0 18	 add	 eax, 24			; 00000018H
  007bd	50		 push	 eax
  007be	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  007c3	83 c4 04	 add	 esp, 4

; 141  : }

  007c6	5f		 pop	 edi
  007c7	8b e5		 mov	 esp, ebp
  007c9	5d		 pop	 ebp
  007ca	8b e3		 mov	 esp, ebx
  007cc	5b		 pop	 ebx
  007cd	c3		 ret	 0
?LookAt@Camera@@QAEXT__m128@@00@Z ENDP			; Camera::LookAt
_TEXT	ENDS
PUBLIC	??_C@_0CC@FICCIPMJ@?$CI?$CIUINT_PTR?$CJpDestination?5?$CG?53?$CJ?5?$DN?$DN?5@ ; `string'
;	COMDAT ??_C@_0CC@FICCIPMJ@?$CI?$CIUINT_PTR?$CJpDestination?5?$CG?53?$CJ?5?$DN?$DN?5@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathconvert.inl
CONST	SEGMENT
??_C@_0CC@FICCIPMJ@?$CI?$CIUINT_PTR?$CJpDestination?5?$CG?53?$CJ?5?$DN?$DN?5@ DB '('
	DB	'(UINT_PTR)pDestination & 3) == 0', 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z
_TEXT	SEGMENT
$T87031 = -80						; size = 16
_T2$ = -64						; size = 16
$T87029 = -48						; size = 16
_T1$ = -32						; size = 16
_V$ = -16						; size = 16
_pDestination$ = 8					; size = 4
?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z PROC	; XMStoreFloat3, COMDAT
; _V$ = xmm0

; 3465 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 50	 sub	 esp, 80			; 00000050H
  00019	57		 push	 edi
  0001a	8d 7d b0	 lea	 edi, DWORD PTR [ebp-80]
  0001d	b9 14 00 00 00	 mov	 ecx, 20			; 00000014H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0

; 3466 : #if defined(_XM_NO_INTRINSICS_)
; 3467 : 
; 3468 :     XMASSERT(pDestination);
; 3469 :     XMASSERT(((UINT_PTR)pDestination & 3) == 0);
; 3470 : 
; 3471 :     pDestination->x = V.vector4_f32[0];
; 3472 :     pDestination->y = V.vector4_f32[1];
; 3473 :     pDestination->z = V.vector4_f32[2];
; 3474 : 
; 3475 : #elif defined(_XM_SSE_INTRINSICS_)
; 3476 : 
; 3477 :     XMASSERT(pDestination);

  0002d	83 7b 08 00	 cmp	 DWORD PTR _pDestination$[ebx], 0
  00031	75 17		 jne	 SHORT $LN3@XMStoreFlo@2
  00033	68 95 0d 00 00	 push	 3477			; 00000d95H
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MNKELLCL@pDestination?$AA@
  00042	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMStoreFlo@2:

; 3478 :     XMASSERT(((UINT_PTR)pDestination & 3) == 0);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR _pDestination$[ebx]
  0004d	83 e1 03	 and	 ecx, 3
  00050	74 17		 je	 SHORT $LN4@XMStoreFlo@2
  00052	68 96 0d 00 00	 push	 3478			; 00000d96H
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FICCIPMJ@?$CI?$CIUINT_PTR?$CJpDestination?5?$CG?53?$CJ?5?$DN?$DN?5@
  00061	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00066	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@XMStoreFlo@2:

; 3479 : 
; 3480 :     XMVECTOR T1 = _mm_shuffle_ps(V,V,_MM_SHUFFLE(1,1,1,1));

  00069	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0006d	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  00071	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  00075	0f 29 4d d0	 movaps	 XMMWORD PTR $T87029[ebp], xmm1
  00079	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T87029[ebp]
  0007d	0f 29 45 e0	 movaps	 XMMWORD PTR _T1$[ebp], xmm0

; 3481 :     XMVECTOR T2 = _mm_shuffle_ps(V,V,_MM_SHUFFLE(2,2,2,2));

  00081	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00085	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  00089	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  0008d	0f 29 4d b0	 movaps	 XMMWORD PTR $T87031[ebp], xmm1
  00091	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T87031[ebp]
  00095	0f 29 45 c0	 movaps	 XMMWORD PTR _T2$[ebp], xmm0

; 3482 :     _mm_store_ss( &pDestination->x, V );

  00099	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0009d	8b 43 08	 mov	 eax, DWORD PTR _pDestination$[ebx]
  000a0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 3483 :     _mm_store_ss( &pDestination->y, T1 );

  000a4	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _T1$[ebp]
  000a8	8b 4b 08	 mov	 ecx, DWORD PTR _pDestination$[ebx]
  000ab	83 c1 04	 add	 ecx, 4
  000ae	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 3484 :     _mm_store_ss( &pDestination->z, T2 );

  000b2	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _T2$[ebp]
  000b6	8b 53 08	 mov	 edx, DWORD PTR _pDestination$[ebx]
  000b9	83 c2 08	 add	 edx, 8
  000bc	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 3485 : 
; 3486 : #else // _XM_VMX128_INTRINSICS_
; 3487 : #endif // _XM_VMX128_INTRINSICS_
; 3488 : }

  000c0	5f		 pop	 edi
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	8b e3		 mov	 esp, ebx
  000c6	5b		 pop	 ebx
  000c7	c3		 ret	 0
?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ENDP	; XMStoreFloat3
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ?XMVectorSubtract@@YA?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T88935 = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorSubtract@@YA?AT__m128@@T1@0@Z PROC		; XMVectorSubtract, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1

; 2510 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 30	 sub	 esp, 48			; 00000030H
  00019	57		 push	 edi
  0001a	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0001d	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 2511 : #if defined(_XM_NO_INTRINSICS_)
; 2512 : 
; 2513 :     XMVECTOR Result;
; 2514 : 
; 2515 :     Result.vector4_f32[0] = V1.vector4_f32[0] - V2.vector4_f32[0];
; 2516 :     Result.vector4_f32[1] = V1.vector4_f32[1] - V2.vector4_f32[1];
; 2517 :     Result.vector4_f32[2] = V1.vector4_f32[2] - V2.vector4_f32[2];
; 2518 :     Result.vector4_f32[3] = V1.vector4_f32[3] - V2.vector4_f32[3];
; 2519 : 
; 2520 :     return Result;
; 2521 : 
; 2522 : #elif defined(_XM_SSE_INTRINSICS_)
; 2523 : 	return _mm_sub_ps( V1, V2 );

  00031	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00035	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  00039	0f 5c c8	 subps	 xmm1, xmm0
  0003c	0f 29 4d d0	 movaps	 XMMWORD PTR $T88935[ebp], xmm1
  00040	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T88935[ebp]

; 2524 : #else // _XM_VMX128_INTRINSICS_
; 2525 : #endif // _XM_VMX128_INTRINSICS_
; 2526 : }

  00044	5f		 pop	 edi
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	8b e3		 mov	 esp, ebx
  0004a	5b		 pop	 ebx
  0004b	c3		 ret	 0
?XMVectorSubtract@@YA?AT__m128@@T1@0@Z ENDP		; XMVectorSubtract
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVector3Cross@@YA?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T91059 = -224						; size = 16
$T91058 = -208						; size = 16
$T91057 = -192						; size = 16
$T91056 = -176						; size = 16
$T91055 = -160						; size = 16
$T91054 = -144						; size = 16
$T91053 = -128						; size = 16
_vResult$ = -112					; size = 16
$T91051 = -96						; size = 16
_vTemp2$ = -80						; size = 16
$T91049 = -64						; size = 16
_vTemp1$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Cross@@YA?AT__m128@@T1@0@Z PROC		; XMVector3Cross, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1

; 7795 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  0001c	57		 push	 edi
  0001d	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00023	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 7796 : #if defined(_XM_NO_INTRINSICS_)
; 7797 :     XMVECTOR vResult = {
; 7798 :         (V1.vector4_f32[1] * V2.vector4_f32[2]) - (V1.vector4_f32[2] * V2.vector4_f32[1]),
; 7799 :         (V1.vector4_f32[2] * V2.vector4_f32[0]) - (V1.vector4_f32[0] * V2.vector4_f32[2]),
; 7800 :         (V1.vector4_f32[0] * V2.vector4_f32[1]) - (V1.vector4_f32[1] * V2.vector4_f32[0]),
; 7801 :         0.0f
; 7802 :     };
; 7803 :     return vResult;
; 7804 : 
; 7805 : #elif defined(_XM_SSE_INTRINSICS_)
; 7806 :     // y1,z1,x1,w1
; 7807 :     XMVECTOR vTemp1 = _mm_shuffle_ps(V1,V1,_MM_SHUFFLE(3,0,2,1));

  00037	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  0003b	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  0003f	0f c6 c8 c9	 shufps	 xmm1, xmm0, 201		; 000000c9H
  00043	0f 29 4d c0	 movaps	 XMMWORD PTR $T91049[ebp], xmm1
  00047	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T91049[ebp]
  0004b	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0

; 7808 :     // z2,x2,y2,w2
; 7809 :     XMVECTOR vTemp2 = _mm_shuffle_ps(V2,V2,_MM_SHUFFLE(3,1,0,2));

  0004f	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00053	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  00057	0f c6 c8 d2	 shufps	 xmm1, xmm0, 210		; 000000d2H
  0005b	0f 29 4d a0	 movaps	 XMMWORD PTR $T91051[ebp], xmm1
  0005f	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T91051[ebp]
  00063	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0

; 7810 :     // Perform the left operation
; 7811 :     XMVECTOR vResult = _mm_mul_ps(vTemp1,vTemp2);

  00067	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  0006b	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vTemp1$[ebp]
  0006f	0f 59 c8	 mulps	 xmm1, xmm0
  00072	0f 29 4d 80	 movaps	 XMMWORD PTR $T91053[ebp], xmm1
  00076	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T91053[ebp]
  0007a	0f 29 45 90	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 7812 :     // z1,x1,y1,w1
; 7813 :     vTemp1 = _mm_shuffle_ps(vTemp1,vTemp1,_MM_SHUFFLE(3,0,2,1));

  0007e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  00082	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vTemp1$[ebp]
  00086	0f c6 c8 c9	 shufps	 xmm1, xmm0, 201		; 000000c9H
  0008a	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T91054[ebp], xmm1
  00091	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91054[ebp]
  00098	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0

; 7814 :     // y2,z2,x2,w2
; 7815 :     vTemp2 = _mm_shuffle_ps(vTemp2,vTemp2,_MM_SHUFFLE(3,1,0,2));

  0009c	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  000a0	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _vTemp2$[ebp]
  000a4	0f c6 c8 d2	 shufps	 xmm1, xmm0, 210		; 000000d2H
  000a8	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T91055[ebp], xmm1
  000af	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91055[ebp]
  000b6	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp2$[ebp], xmm0

; 7816 :     // Perform the right operation
; 7817 :     vTemp1 = _mm_mul_ps(vTemp1,vTemp2);

  000ba	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp2$[ebp]
  000be	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vTemp1$[ebp]
  000c2	0f 59 c8	 mulps	 xmm1, xmm0
  000c5	0f 29 8d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T91056[ebp], xmm1
  000cc	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91056[ebp]
  000d3	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp1$[ebp], xmm0

; 7818 :     // Subract the right from left, and return answer
; 7819 :     vResult = _mm_sub_ps(vResult,vTemp1);

  000d7	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp1$[ebp]
  000db	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  000df	0f 5c c8	 subps	 xmm1, xmm0
  000e2	0f 29 8d 40 ff
	ff ff		 movaps	 XMMWORD PTR $T91057[ebp], xmm1
  000e9	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91057[ebp]
  000f0	0f 29 45 90	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 7820 :     // Set w to zero
; 7821 :     return _mm_and_ps(vResult,g_XMMask3);

  000f4	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T91058[ebp]
  000fa	50		 push	 eax
  000fb	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@@3UXMVECTORI32@@B ; g_XMMask3
  00100	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  00105	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00108	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  0010c	0f 54 c8	 andps	 xmm1, xmm0
  0010f	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T91059[ebp], xmm1
  00116	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91059[ebp]

; 7822 : #else // _XM_VMX128_INTRINSICS_
; 7823 : #endif // _XM_VMX128_INTRINSICS_
; 7824 : }

  0011d	5f		 pop	 edi
  0011e	8b e5		 mov	 esp, ebp
  00120	5d		 pop	 ebp
  00121	8b e3		 mov	 esp, ebx
  00123	5b		 pop	 ebx
  00124	c3		 ret	 0
?XMVector3Cross@@YA?AT__m128@@T1@0@Z ENDP		; XMVector3Cross
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVector3Normalize@@YA?AT__m128@@T1@@Z
_TEXT	SEGMENT
$T91143 = -240						; size = 16
$T91142 = -224						; size = 16
$T91141 = -208						; size = 16
$T91140 = -192						; size = 16
$T91139 = -176						; size = 16
_vResult$ = -160					; size = 16
$T91137 = -144						; size = 16
$T91136 = -128						; size = 16
$T91135 = -112						; size = 16
$T91134 = -96						; size = 16
$T91133 = -80						; size = 16
_vTemp$ = -64						; size = 16
$T91131 = -48						; size = 16
_vLengthSq$ = -32					; size = 16
_V$ = -16						; size = 16
?XMVector3Normalize@@YA?AT__m128@@T1@@Z PROC		; XMVector3Normalize, COMDAT
; _V$ = xmm0

; 8026 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec f0 00 00
	00		 sub	 esp, 240		; 000000f0H
  0001c	57		 push	 edi
  0001d	8d bd 10 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-240]
  00023	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0

; 8027 : #if defined(_XM_NO_INTRINSICS_)
; 8028 :     FLOAT fLengthSq;
; 8029 :     XMVECTOR vResult;
; 8030 : 
; 8031 :     fLengthSq = sqrtf((V.vector4_f32[0]*V.vector4_f32[0])+(V.vector4_f32[1]*V.vector4_f32[1])+(V.vector4_f32[2]*V.vector4_f32[2]));
; 8032 :     // Prevent divide by zero
; 8033 :     if (fLengthSq) {
; 8034 :         fLengthSq = 1.0f/fLengthSq;
; 8035 :     }
; 8036 :     
; 8037 :     vResult.vector4_f32[0] = V.vector4_f32[0]*fLengthSq;
; 8038 :     vResult.vector4_f32[1] = V.vector4_f32[1]*fLengthSq;
; 8039 :     vResult.vector4_f32[2] = V.vector4_f32[2]*fLengthSq;
; 8040 :     vResult.vector4_f32[3] = V.vector4_f32[3]*fLengthSq;
; 8041 :     return vResult;
; 8042 : 
; 8043 : #elif defined(_XM_SSE_INTRINSICS_)
; 8044 :     // Perform the dot product on x,y and z only
; 8045 :     XMVECTOR vLengthSq = _mm_mul_ps(V,V);

  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00037	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0003b	0f 59 c8	 mulps	 xmm1, xmm0
  0003e	0f 29 4d d0	 movaps	 XMMWORD PTR $T91131[ebp], xmm1
  00042	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T91131[ebp]
  00046	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0

; 8046 :     XMVECTOR vTemp = _mm_shuffle_ps(vLengthSq,vLengthSq,_MM_SHUFFLE(2,1,2,1));

  0004a	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  0004e	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  00052	0f c6 c8 99	 shufps	 xmm1, xmm0, 153		; 00000099H
  00056	0f 29 4d b0	 movaps	 XMMWORD PTR $T91133[ebp], xmm1
  0005a	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T91133[ebp]
  0005e	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8047 :     vLengthSq = _mm_add_ss(vLengthSq,vTemp);

  00062	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00066	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  0006a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0006e	0f 29 4d a0	 movaps	 XMMWORD PTR $T91134[ebp], xmm1
  00072	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T91134[ebp]
  00076	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0

; 8048 :     vTemp = _mm_shuffle_ps(vTemp,vTemp,_MM_SHUFFLE(1,1,1,1));

  0007a	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0007e	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00082	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  00086	0f 29 4d 90	 movaps	 XMMWORD PTR $T91135[ebp], xmm1
  0008a	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T91135[ebp]
  0008e	0f 29 45 c0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8049 :     vLengthSq = _mm_add_ss(vLengthSq,vTemp);

  00092	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00096	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  0009a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0009e	0f 29 4d 80	 movaps	 XMMWORD PTR $T91136[ebp], xmm1
  000a2	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T91136[ebp]
  000a6	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0

; 8050 : 	vLengthSq = _mm_shuffle_ps(vLengthSq,vLengthSq,_MM_SHUFFLE(0,0,0,0));

  000aa	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000ae	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  000b2	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  000b6	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T91137[ebp], xmm1
  000bd	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91137[ebp]
  000c4	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0

; 8051 :     // Prepare for the division
; 8052 :     XMVECTOR vResult = _mm_sqrt_ps(vLengthSq);

  000c8	0f 51 45 e0	 sqrtps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  000cc	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T91139[ebp], xmm0
  000d3	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91139[ebp]
  000da	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8053 :     // Failsafe on zero (Or epsilon) length planes
; 8054 :     // If the length is infinity, set the elements to zero
; 8055 :     vLengthSq = _mm_cmpneq_ps(vLengthSq,g_XMInfinity);

  000e1	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T91140[ebp]
  000e7	50		 push	 eax
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMInfinity@@3UXMVECTORI32@@B ; g_XMInfinity
  000ed	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  000f2	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  000f5	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vLengthSq$[ebp]
  000f9	0f c2 c8 04	 cmpneqps xmm1, xmm0
  000fd	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T91141[ebp], xmm1
  00104	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91141[ebp]
  0010b	0f 29 45 e0	 movaps	 XMMWORD PTR _vLengthSq$[ebp], xmm0

; 8056 :     // Divide to perform the normalization
; 8057 :     vResult = _mm_div_ps(V,vResult);

  0010f	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]
  00116	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0011a	0f 5e c8	 divps	 xmm1, xmm0
  0011d	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T91142[ebp], xmm1
  00124	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91142[ebp]
  0012b	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8058 :     // Any that are infinity, set to zero
; 8059 :     vResult = _mm_and_ps(vResult,vLengthSq);

  00132	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vLengthSq$[ebp]
  00136	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  0013d	0f 54 c8	 andps	 xmm1, xmm0
  00140	0f 29 8d 10 ff
	ff ff		 movaps	 XMMWORD PTR $T91143[ebp], xmm1
  00147	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91143[ebp]
  0014e	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8060 :     return vResult;

  00155	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]

; 8061 : #else // _XM_VMX128_INTRINSICS_
; 8062 : #endif // _XM_VMX128_INTRINSICS_
; 8063 : }

  0015c	5f		 pop	 edi
  0015d	8b e5		 mov	 esp, ebp
  0015f	5d		 pop	 ebp
  00160	8b e3		 mov	 esp, ebx
  00162	5b		 pop	 ebx
  00163	c3		 ret	 0
?XMVector3Normalize@@YA?AT__m128@@T1@@Z ENDP		; XMVector3Normalize
_TEXT	ENDS
PUBLIC	?LookAt@Camera@@QAEXABU_XMFLOAT3@@00@Z		; Camera::LookAt
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124021 = -112						; size = 16
_U$ = -96						; size = 16
$T124019 = -80						; size = 16
_T$ = -64						; size = 16
$T124017 = -48						; size = 16
_P$ = -32						; size = 16
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_target$ = 12						; size = 4
_up$ = 16						; size = 4
?LookAt@Camera@@QAEXABU_XMFLOAT3@@00@Z PROC		; Camera::LookAt
; _this$ = ecx

; 144  : {

  007d0	53		 push	 ebx
  007d1	8b dc		 mov	 ebx, esp
  007d3	83 ec 08	 sub	 esp, 8
  007d6	83 e4 f0	 and	 esp, -16		; fffffff0H
  007d9	83 c4 04	 add	 esp, 4
  007dc	55		 push	 ebp
  007dd	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  007e0	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  007e4	8b ec		 mov	 ebp, esp
  007e6	83 ec 70	 sub	 esp, 112		; 00000070H
  007e9	57		 push	 edi
  007ea	51		 push	 ecx
  007eb	8d 7d 90	 lea	 edi, DWORD PTR [ebp-112]
  007ee	b9 1c 00 00 00	 mov	 ecx, 28			; 0000001cH
  007f3	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  007f8	f3 ab		 rep stosd
  007fa	59		 pop	 ecx
  007fb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 145  : 	XMVECTOR P = XMLoadFloat3(&pos);

  007fe	8b 43 08	 mov	 eax, DWORD PTR _pos$[ebx]
  00801	50		 push	 eax
  00802	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00807	83 c4 04	 add	 esp, 4
  0080a	0f 29 45 d0	 movaps	 XMMWORD PTR $T124017[ebp], xmm0
  0080e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T124017[ebp]
  00812	0f 29 45 e0	 movaps	 XMMWORD PTR _P$[ebp], xmm0

; 146  : 	XMVECTOR T = XMLoadFloat3(&target);

  00816	8b 4b 0c	 mov	 ecx, DWORD PTR _target$[ebx]
  00819	51		 push	 ecx
  0081a	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  0081f	83 c4 04	 add	 esp, 4
  00822	0f 29 45 b0	 movaps	 XMMWORD PTR $T124019[ebp], xmm0
  00826	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T124019[ebp]
  0082a	0f 29 45 c0	 movaps	 XMMWORD PTR _T$[ebp], xmm0

; 147  : 	XMVECTOR U = XMLoadFloat3(&up);

  0082e	8b 53 10	 mov	 edx, DWORD PTR _up$[ebx]
  00831	52		 push	 edx
  00832	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00837	83 c4 04	 add	 esp, 4
  0083a	0f 29 45 90	 movaps	 XMMWORD PTR $T124021[ebp], xmm0
  0083e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124021[ebp]
  00842	0f 29 45 a0	 movaps	 XMMWORD PTR _U$[ebp], xmm0

; 148  : 
; 149  : 	LookAt(P, T, U);

  00846	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _U$[ebp]
  0084a	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _T$[ebp]
  0084e	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _P$[ebp]
  00852	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00855	e8 00 00 00 00	 call	 ?LookAt@Camera@@QAEXT__m128@@00@Z ; Camera::LookAt

; 150  : }

  0085a	5f		 pop	 edi
  0085b	8b e5		 mov	 esp, ebp
  0085d	5d		 pop	 ebp
  0085e	8b e3		 mov	 esp, ebx
  00860	5b		 pop	 ebx
  00861	c2 0c 00	 ret	 12			; 0000000cH
?LookAt@Camera@@QAEXABU_XMFLOAT3@@00@Z ENDP		; Camera::LookAt
_TEXT	ENDS
PUBLIC	?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z ; XMLoadFloat4x4
PUBLIC	?View@Camera@@QBE?AU_XMMATRIX@@XZ		; Camera::View
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?View@Camera@@QBE?AU_XMMATRIX@@XZ PROC			; Camera::View
; _this$ = ecx

; 153  : {

  00870	55		 push	 ebp
  00871	8b ec		 mov	 ebp, esp
  00873	51		 push	 ecx
  00874	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0087b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  : 	return XMLoadFloat4x4(&mView);

  0087e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00881	83 c0 48	 add	 eax, 72			; 00000048H
  00884	50		 push	 eax
  00885	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00888	51		 push	 ecx
  00889	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z ; XMLoadFloat4x4
  0088e	83 c4 08	 add	 esp, 8
  00891	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 155  : }

  00894	83 c4 04	 add	 esp, 4
  00897	3b ec		 cmp	 ebp, esp
  00899	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0089e	8b e5		 mov	 esp, ebp
  008a0	5d		 pop	 ebp
  008a1	c2 04 00	 ret	 4
?View@Camera@@QBE?AU_XMMATRIX@@XZ ENDP			; Camera::View
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathconvert.inl
_TEXT	ENDS
;	COMDAT ?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z
_TEXT	SEGMENT
$T86851 = -160						; size = 16
$T86850 = -144						; size = 16
$T86849 = -128						; size = 16
$T86848 = -112						; size = 16
_M$ = -80						; size = 64
___$ReturnUdt$ = 8					; size = 4
_pSource$ = 12						; size = 4
?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z PROC ; XMLoadFloat4x4, COMDAT

; 2971 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 58 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-168]
  00024	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd

; 2972 : #if defined(_XM_NO_INTRINSICS_)
; 2973 :     XMMATRIX M;
; 2974 :     XMASSERT(pSource);
; 2975 : 
; 2976 :     ((UINT *)(&M.r[0].vector4_f32[0]))[0] = ((const UINT *)(&pSource->m[0][0]))[0];
; 2977 :     ((UINT *)(&M.r[0].vector4_f32[1]))[0] = ((const UINT *)(&pSource->m[0][1]))[0];
; 2978 :     ((UINT *)(&M.r[0].vector4_f32[2]))[0] = ((const UINT *)(&pSource->m[0][2]))[0];
; 2979 :     ((UINT *)(&M.r[0].vector4_f32[3]))[0] = ((const UINT *)(&pSource->m[0][3]))[0];
; 2980 : 
; 2981 :     ((UINT *)(&M.r[1].vector4_f32[0]))[0] = ((const UINT *)(&pSource->m[1][0]))[0];
; 2982 :     ((UINT *)(&M.r[1].vector4_f32[1]))[0] = ((const UINT *)(&pSource->m[1][1]))[0];
; 2983 :     ((UINT *)(&M.r[1].vector4_f32[2]))[0] = ((const UINT *)(&pSource->m[1][2]))[0];
; 2984 :     ((UINT *)(&M.r[1].vector4_f32[3]))[0] = ((const UINT *)(&pSource->m[1][3]))[0];
; 2985 : 
; 2986 :     ((UINT *)(&M.r[2].vector4_f32[0]))[0] = ((const UINT *)(&pSource->m[2][0]))[0];
; 2987 :     ((UINT *)(&M.r[2].vector4_f32[1]))[0] = ((const UINT *)(&pSource->m[2][1]))[0];
; 2988 :     ((UINT *)(&M.r[2].vector4_f32[2]))[0] = ((const UINT *)(&pSource->m[2][2]))[0];
; 2989 :     ((UINT *)(&M.r[2].vector4_f32[3]))[0] = ((const UINT *)(&pSource->m[2][3]))[0];
; 2990 : 
; 2991 :     ((UINT *)(&M.r[3].vector4_f32[0]))[0] = ((const UINT *)(&pSource->m[3][0]))[0];
; 2992 :     ((UINT *)(&M.r[3].vector4_f32[1]))[0] = ((const UINT *)(&pSource->m[3][1]))[0];
; 2993 :     ((UINT *)(&M.r[3].vector4_f32[2]))[0] = ((const UINT *)(&pSource->m[3][2]))[0];
; 2994 :     ((UINT *)(&M.r[3].vector4_f32[3]))[0] = ((const UINT *)(&pSource->m[3][3]))[0];
; 2995 : 
; 2996 :     return M;
; 2997 : 
; 2998 : #elif defined(_XM_SSE_INTRINSICS_)
; 2999 :     XMASSERT(pSource);

  00030	83 7b 0c 00	 cmp	 DWORD PTR _pSource$[ebx], 0
  00034	75 17		 jne	 SHORT $LN3@XMLoadFloa@2
  00036	68 b7 0b 00 00	 push	 2999			; 00000bb7H
  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_0FI@IHOJKNMB@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00040	68 00 00 00 00	 push	 OFFSET ??_C@_07HPANBCJA@pSource?$AA@
  00045	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMLoadFloa@2:

; 3000 :     XMMATRIX M;

  0004d	8d 4d b0	 lea	 ecx, DWORD PTR _M$[ebp]
  00050	e8 00 00 00 00	 call	 ??0_XMMATRIX@@QAE@XZ	; _XMMATRIX::_XMMATRIX

; 3001 : 
; 3002 :     M.r[0] = _mm_loadu_ps( &pSource->_11 );

  00055	8b 4b 0c	 mov	 ecx, DWORD PTR _pSource$[ebx]
  00058	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  0005b	0f 29 45 90	 movaps	 XMMWORD PTR $T86848[ebp], xmm0
  0005f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T86848[ebp]
  00063	0f 29 45 b0	 movaps	 XMMWORD PTR _M$[ebp], xmm0

; 3003 :     M.r[1] = _mm_loadu_ps( &pSource->_21 );

  00067	8b 53 0c	 mov	 edx, DWORD PTR _pSource$[ebx]
  0006a	83 c2 10	 add	 edx, 16			; 00000010H
  0006d	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  00070	0f 29 45 80	 movaps	 XMMWORD PTR $T86849[ebp], xmm0
  00074	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T86849[ebp]
  00078	0f 29 45 c0	 movaps	 XMMWORD PTR _M$[ebp+16], xmm0

; 3004 :     M.r[2] = _mm_loadu_ps( &pSource->_31 );

  0007c	8b 43 0c	 mov	 eax, DWORD PTR _pSource$[ebx]
  0007f	83 c0 20	 add	 eax, 32			; 00000020H
  00082	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00085	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T86850[ebp], xmm0
  0008c	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T86850[ebp]
  00093	0f 29 45 d0	 movaps	 XMMWORD PTR _M$[ebp+32], xmm0

; 3005 :     M.r[3] = _mm_loadu_ps( &pSource->_41 );

  00097	8b 4b 0c	 mov	 ecx, DWORD PTR _pSource$[ebx]
  0009a	83 c1 30	 add	 ecx, 48			; 00000030H
  0009d	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  000a0	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T86851[ebp], xmm0
  000a7	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T86851[ebp]
  000ae	0f 29 45 e0	 movaps	 XMMWORD PTR _M$[ebp+48], xmm0

; 3006 : 
; 3007 :     return M;

  000b2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b7	8d 75 b0	 lea	 esi, DWORD PTR _M$[ebp]
  000ba	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  000bd	f3 a5		 rep movsd
  000bf	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 3008 : #elif defined(XM_NO_MISALIGNED_VECTOR_ACCESS)
; 3009 : #endif // _XM_VMX128_INTRINSICS_
; 3010 : }

  000c2	52		 push	 edx
  000c3	8b cd		 mov	 ecx, ebp
  000c5	50		 push	 eax
  000c6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@XMLoadFloa@2
  000cc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d1	58		 pop	 eax
  000d2	5a		 pop	 edx
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	8b e3		 mov	 esp, ebx
  000da	5b		 pop	 ebx
  000db	c3		 ret	 0
$LN6@XMLoadFloa@2:
  000dc	01 00 00 00	 DD	 1
  000e0	00 00 00 00	 DD	 $LN5@XMLoadFloa@2
$LN5@XMLoadFloa@2:
  000e4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  000e8	40 00 00 00	 DD	 64			; 00000040H
  000ec	00 00 00 00	 DD	 $LN4@XMLoadFloa@2
$LN4@XMLoadFloa@2:
  000f0	4d		 DB	 77			; 0000004dH
  000f1	00		 DB	 0
?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z ENDP ; XMLoadFloat4x4
_TEXT	ENDS
PUBLIC	?Proj@Camera@@QBE?AU_XMMATRIX@@XZ		; Camera::Proj
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Proj@Camera@@QBE?AU_XMMATRIX@@XZ PROC			; Camera::Proj
; _this$ = ecx

; 158  : {

  008b0	55		 push	 ebp
  008b1	8b ec		 mov	 ebp, esp
  008b3	51		 push	 ecx
  008b4	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  008bb	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  : 	return XMLoadFloat4x4(&mProj);

  008be	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  008c1	05 88 00 00 00	 add	 eax, 136		; 00000088H
  008c6	50		 push	 eax
  008c7	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  008ca	51		 push	 ecx
  008cb	e8 00 00 00 00	 call	 ?XMLoadFloat4x4@@YA?AU_XMMATRIX@@PBU_XMFLOAT4X4@@@Z ; XMLoadFloat4x4
  008d0	83 c4 08	 add	 esp, 8
  008d3	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 160  : }

  008d6	83 c4 04	 add	 esp, 4
  008d9	3b ec		 cmp	 ebp, esp
  008db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008e0	8b e5		 mov	 esp, ebp
  008e2	5d		 pop	 ebp
  008e3	c2 04 00	 ret	 4
?Proj@Camera@@QBE?AU_XMMATRIX@@XZ ENDP			; Camera::Proj
_TEXT	ENDS
PUBLIC	?XMMatrixMultiply@@YA?AU_XMMATRIX@@ABU1@0@Z	; XMMatrixMultiply
PUBLIC	?ViewProj@Camera@@QBE?AU_XMMATRIX@@XZ		; Camera::ViewProj
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T124037 = -144						; size = 64
$T124036 = -80						; size = 64
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?ViewProj@Camera@@QBE?AU_XMMATRIX@@XZ PROC		; Camera::ViewProj
; _this$ = ecx

; 163  : {

  008f0	53		 push	 ebx
  008f1	8b dc		 mov	 ebx, esp
  008f3	83 ec 08	 sub	 esp, 8
  008f6	83 e4 f0	 and	 esp, -16		; fffffff0H
  008f9	83 c4 04	 add	 esp, 4
  008fc	55		 push	 ebp
  008fd	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00900	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00904	8b ec		 mov	 ebp, esp
  00906	81 ec 90 00 00
	00		 sub	 esp, 144		; 00000090H
  0090c	57		 push	 edi
  0090d	51		 push	 ecx
  0090e	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00914	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00919	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0091e	f3 ab		 rep stosd
  00920	59		 pop	 ecx
  00921	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 164  : 	return XMMatrixMultiply(View(), Proj());

  00924	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T124037[ebp]
  0092a	50		 push	 eax
  0092b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0092e	e8 00 00 00 00	 call	 ?Proj@Camera@@QBE?AU_XMMATRIX@@XZ ; Camera::Proj
  00933	50		 push	 eax
  00934	8d 4d b0	 lea	 ecx, DWORD PTR $T124036[ebp]
  00937	51		 push	 ecx
  00938	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0093b	e8 00 00 00 00	 call	 ?View@Camera@@QBE?AU_XMMATRIX@@XZ ; Camera::View
  00940	50		 push	 eax
  00941	8b 53 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebx]
  00944	52		 push	 edx
  00945	e8 00 00 00 00	 call	 ?XMMatrixMultiply@@YA?AU_XMMATRIX@@ABU1@0@Z ; XMMatrixMultiply
  0094a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0094d	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 165  : }

  00950	5f		 pop	 edi
  00951	8b e5		 mov	 esp, ebp
  00953	5d		 pop	 ebp
  00954	8b e3		 mov	 esp, ebx
  00956	5b		 pop	 ebx
  00957	c2 04 00	 ret	 4
?ViewProj@Camera@@QBE?AU_XMMATRIX@@XZ ENDP		; Camera::ViewProj
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmatrix.inl
_TEXT	ENDS
;	COMDAT ?XMMatrixMultiply@@YA?AU_XMMATRIX@@ABU1@0@Z
_TEXT	SEGMENT
$T93268 = -864						; size = 16
$T93267 = -848						; size = 16
$T93266 = -832						; size = 16
$T93265 = -816						; size = 16
$T93264 = -800						; size = 16
$T93263 = -784						; size = 16
$T93262 = -768						; size = 16
$T93261 = -752						; size = 16
$T93260 = -736						; size = 16
$T93259 = -720						; size = 16
$T93258 = -704						; size = 16
$T93257 = -688						; size = 16
$T93256 = -672						; size = 16
$T93255 = -656						; size = 16
$T93254 = -640						; size = 16
$T93253 = -624						; size = 16
$T93252 = -608						; size = 16
$T93251 = -592						; size = 16
$T93250 = -576						; size = 16
$T93249 = -560						; size = 16
$T93248 = -544						; size = 16
$T93247 = -528						; size = 16
$T93246 = -512						; size = 16
$T93245 = -496						; size = 16
$T93244 = -480						; size = 16
$T93243 = -464						; size = 16
$T93242 = -448						; size = 16
$T93241 = -432						; size = 16
$T93240 = -416						; size = 16
$T93239 = -400						; size = 16
$T93238 = -384						; size = 16
$T93237 = -368						; size = 16
$T93236 = -352						; size = 16
$T93235 = -336						; size = 16
$T93234 = -320						; size = 16
$T93233 = -304						; size = 16
$T93232 = -288						; size = 16
$T93231 = -272						; size = 16
$T93230 = -256						; size = 16
$T93229 = -240						; size = 16
$T93228 = -224						; size = 16
$T93227 = -208						; size = 16
_vZ$ = -192						; size = 16
$T93225 = -176						; size = 16
_vY$ = -160						; size = 16
$T93223 = -144						; size = 16
_vX$ = -128						; size = 16
_vW$ = -112						; size = 16
_mResult$ = -80						; size = 64
___$ReturnUdt$ = 8					; size = 4
_M1$ = 12						; size = 4
_M2$ = 16						; size = 4
?XMMatrixMultiply@@YA?AU_XMMATRIX@@ABU1@0@Z PROC	; XMMatrixMultiply, COMDAT

; 190  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 68 03 00
	00		 sub	 esp, 872		; 00000368H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 98 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-872]
  00024	b9 da 00 00 00	 mov	 ecx, 218		; 000000daH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd

; 191  : #if defined(_XM_NO_INTRINSICS_)
; 192  :     XMMATRIX mResult;
; 193  :     // Cache the invariants in registers
; 194  :     float x = M1.m[0][0];
; 195  :     float y = M1.m[0][1];
; 196  :     float z = M1.m[0][2];
; 197  :     float w = M1.m[0][3];
; 198  :     // Perform the operation on the first row
; 199  :     mResult.m[0][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 200  :     mResult.m[0][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 201  :     mResult.m[0][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 202  :     mResult.m[0][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 203  :     // Repeat for all the other rows
; 204  :     x = M1.m[1][0];
; 205  :     y = M1.m[1][1];
; 206  :     z = M1.m[1][2];
; 207  :     w = M1.m[1][3];
; 208  :     mResult.m[1][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 209  :     mResult.m[1][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 210  :     mResult.m[1][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 211  :     mResult.m[1][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 212  :     x = M1.m[2][0];
; 213  :     y = M1.m[2][1];
; 214  :     z = M1.m[2][2];
; 215  :     w = M1.m[2][3];
; 216  :     mResult.m[2][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 217  :     mResult.m[2][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 218  :     mResult.m[2][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 219  :     mResult.m[2][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 220  :     x = M1.m[3][0];
; 221  :     y = M1.m[3][1];
; 222  :     z = M1.m[3][2];
; 223  :     w = M1.m[3][3];
; 224  :     mResult.m[3][0] = (M2.m[0][0]*x)+(M2.m[1][0]*y)+(M2.m[2][0]*z)+(M2.m[3][0]*w);
; 225  :     mResult.m[3][1] = (M2.m[0][1]*x)+(M2.m[1][1]*y)+(M2.m[2][1]*z)+(M2.m[3][1]*w);
; 226  :     mResult.m[3][2] = (M2.m[0][2]*x)+(M2.m[1][2]*y)+(M2.m[2][2]*z)+(M2.m[3][2]*w);
; 227  :     mResult.m[3][3] = (M2.m[0][3]*x)+(M2.m[1][3]*y)+(M2.m[2][3]*z)+(M2.m[3][3]*w);
; 228  :     return mResult;
; 229  : #elif defined(_XM_SSE_INTRINSICS_)
; 230  :     XMMATRIX mResult;

  00030	8d 4d b0	 lea	 ecx, DWORD PTR _mResult$[ebp]
  00033	e8 00 00 00 00	 call	 ??0_XMMATRIX@@QAE@XZ	; _XMMATRIX::_XMMATRIX

; 231  :     // Use vW to hold the original row
; 232  :     XMVECTOR vW = M1.r[0];

  00038	8b 43 0c	 mov	 eax, DWORD PTR _M1$[ebx]
  0003b	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  0003e	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 233  :     // Splat the component X,Y,Z then W
; 234  :     XMVECTOR vX = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(0,0,0,0));

  00042	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00046	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  0004a	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  0004e	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T93223[ebp], xmm1
  00055	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93223[ebp]
  0005c	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 235  :     XMVECTOR vY = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(1,1,1,1));

  00060	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00064	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00068	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  0006c	0f 29 8d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T93225[ebp], xmm1
  00073	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93225[ebp]
  0007a	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 236  :     XMVECTOR vZ = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(2,2,2,2));

  00081	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00085	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00089	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  0008d	0f 29 8d 30 ff
	ff ff		 movaps	 XMMWORD PTR $T93227[ebp], xmm1
  00094	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93227[ebp]
  0009b	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 237  :     vW = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(3,3,3,3));

  000a2	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  000a6	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  000aa	0f c6 c8 ff	 shufps	 xmm1, xmm0, 255		; 000000ffH
  000ae	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T93228[ebp], xmm1
  000b5	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93228[ebp]
  000bc	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 238  :     // Perform the opertion on the first row
; 239  :     vX = _mm_mul_ps(vX,M2.r[0]);

  000c0	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  000c3	0f 28 01	 movaps	 xmm0, XMMWORD PTR [ecx]
  000c6	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  000ca	0f 59 c8	 mulps	 xmm1, xmm0
  000cd	0f 29 8d 10 ff
	ff ff		 movaps	 XMMWORD PTR $T93229[ebp], xmm1
  000d4	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93229[ebp]
  000db	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 240  :     vY = _mm_mul_ps(vY,M2.r[1]);

  000df	8b 53 10	 mov	 edx, DWORD PTR _M2$[ebx]
  000e2	0f 28 42 10	 movaps	 xmm0, XMMWORD PTR [edx+16]
  000e6	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  000ed	0f 59 c8	 mulps	 xmm1, xmm0
  000f0	0f 29 8d 00 ff
	ff ff		 movaps	 XMMWORD PTR $T93230[ebp], xmm1
  000f7	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93230[ebp]
  000fe	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 241  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00105	8b 43 10	 mov	 eax, DWORD PTR _M2$[ebx]
  00108	0f 28 40 20	 movaps	 xmm0, XMMWORD PTR [eax+32]
  0010c	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vZ$[ebp]
  00113	0f 59 c8	 mulps	 xmm1, xmm0
  00116	0f 29 8d f0 fe
	ff ff		 movaps	 XMMWORD PTR $T93231[ebp], xmm1
  0011d	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93231[ebp]
  00124	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 242  :     vW = _mm_mul_ps(vW,M2.r[3]);

  0012b	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  0012e	0f 28 41 30	 movaps	 xmm0, XMMWORD PTR [ecx+48]
  00132	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00136	0f 59 c8	 mulps	 xmm1, xmm0
  00139	0f 29 8d e0 fe
	ff ff		 movaps	 XMMWORD PTR $T93232[ebp], xmm1
  00140	0f 28 85 e0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93232[ebp]
  00147	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 243  :     // Perform a binary add to reduce cumulative errors
; 244  :     vX = _mm_add_ps(vX,vZ);

  0014b	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00152	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00156	0f 58 c8	 addps	 xmm1, xmm0
  00159	0f 29 8d d0 fe
	ff ff		 movaps	 XMMWORD PTR $T93233[ebp], xmm1
  00160	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93233[ebp]
  00167	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 245  :     vY = _mm_add_ps(vY,vW);

  0016b	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0016f	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  00176	0f 58 c8	 addps	 xmm1, xmm0
  00179	0f 29 8d c0 fe
	ff ff		 movaps	 XMMWORD PTR $T93234[ebp], xmm1
  00180	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93234[ebp]
  00187	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 246  :     vX = _mm_add_ps(vX,vY);

  0018e	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00195	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00199	0f 58 c8	 addps	 xmm1, xmm0
  0019c	0f 29 8d b0 fe
	ff ff		 movaps	 XMMWORD PTR $T93235[ebp], xmm1
  001a3	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93235[ebp]
  001aa	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 247  :     mResult.r[0] = vX;

  001ae	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  001b2	0f 29 45 b0	 movaps	 XMMWORD PTR _mResult$[ebp], xmm0

; 248  :     // Repeat for the other 3 rows
; 249  :     vW = M1.r[1];

  001b6	8b 53 0c	 mov	 edx, DWORD PTR _M1$[ebx]
  001b9	0f 28 42 10	 movaps	 xmm0, XMMWORD PTR [edx+16]
  001bd	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 250  :     vX = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(0,0,0,0));

  001c1	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  001c5	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  001c9	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  001cd	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR $T93236[ebp], xmm1
  001d4	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93236[ebp]
  001db	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 251  :     vY = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(1,1,1,1));

  001df	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  001e3	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  001e7	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  001eb	0f 29 8d 90 fe
	ff ff		 movaps	 XMMWORD PTR $T93237[ebp], xmm1
  001f2	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93237[ebp]
  001f9	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 252  :     vZ = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(2,2,2,2));

  00200	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00204	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00208	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  0020c	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR $T93238[ebp], xmm1
  00213	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93238[ebp]
  0021a	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 253  :     vW = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(3,3,3,3));

  00221	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00225	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00229	0f c6 c8 ff	 shufps	 xmm1, xmm0, 255		; 000000ffH
  0022d	0f 29 8d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T93239[ebp], xmm1
  00234	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93239[ebp]
  0023b	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 254  :     vX = _mm_mul_ps(vX,M2.r[0]);

  0023f	8b 43 10	 mov	 eax, DWORD PTR _M2$[ebx]
  00242	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00245	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00249	0f 59 c8	 mulps	 xmm1, xmm0
  0024c	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR $T93240[ebp], xmm1
  00253	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93240[ebp]
  0025a	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 255  :     vY = _mm_mul_ps(vY,M2.r[1]);

  0025e	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  00261	0f 28 41 10	 movaps	 xmm0, XMMWORD PTR [ecx+16]
  00265	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  0026c	0f 59 c8	 mulps	 xmm1, xmm0
  0026f	0f 29 8d 50 fe
	ff ff		 movaps	 XMMWORD PTR $T93241[ebp], xmm1
  00276	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93241[ebp]
  0027d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 256  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00284	8b 53 10	 mov	 edx, DWORD PTR _M2$[ebx]
  00287	0f 28 42 20	 movaps	 xmm0, XMMWORD PTR [edx+32]
  0028b	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vZ$[ebp]
  00292	0f 59 c8	 mulps	 xmm1, xmm0
  00295	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR $T93242[ebp], xmm1
  0029c	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93242[ebp]
  002a3	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 257  :     vW = _mm_mul_ps(vW,M2.r[3]);

  002aa	8b 43 10	 mov	 eax, DWORD PTR _M2$[ebx]
  002ad	0f 28 40 30	 movaps	 xmm0, XMMWORD PTR [eax+48]
  002b1	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  002b5	0f 59 c8	 mulps	 xmm1, xmm0
  002b8	0f 29 8d 30 fe
	ff ff		 movaps	 XMMWORD PTR $T93243[ebp], xmm1
  002bf	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93243[ebp]
  002c6	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 258  :     vX = _mm_add_ps(vX,vZ);

  002ca	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  002d1	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  002d5	0f 58 c8	 addps	 xmm1, xmm0
  002d8	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR $T93244[ebp], xmm1
  002df	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93244[ebp]
  002e6	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 259  :     vY = _mm_add_ps(vY,vW);

  002ea	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  002ee	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  002f5	0f 58 c8	 addps	 xmm1, xmm0
  002f8	0f 29 8d 10 fe
	ff ff		 movaps	 XMMWORD PTR $T93245[ebp], xmm1
  002ff	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93245[ebp]
  00306	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 260  :     vX = _mm_add_ps(vX,vY);

  0030d	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00314	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00318	0f 58 c8	 addps	 xmm1, xmm0
  0031b	0f 29 8d 00 fe
	ff ff		 movaps	 XMMWORD PTR $T93246[ebp], xmm1
  00322	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93246[ebp]
  00329	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 261  :     mResult.r[1] = vX;

  0032d	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  00331	0f 29 45 c0	 movaps	 XMMWORD PTR _mResult$[ebp+16], xmm0

; 262  :     vW = M1.r[2];

  00335	8b 4b 0c	 mov	 ecx, DWORD PTR _M1$[ebx]
  00338	0f 28 41 20	 movaps	 xmm0, XMMWORD PTR [ecx+32]
  0033c	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 263  :     vX = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(0,0,0,0));

  00340	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00344	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00348	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  0034c	0f 29 8d f0 fd
	ff ff		 movaps	 XMMWORD PTR $T93247[ebp], xmm1
  00353	0f 28 85 f0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93247[ebp]
  0035a	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 264  :     vY = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(1,1,1,1));

  0035e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00362	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00366	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  0036a	0f 29 8d e0 fd
	ff ff		 movaps	 XMMWORD PTR $T93248[ebp], xmm1
  00371	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93248[ebp]
  00378	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 265  :     vZ = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(2,2,2,2));

  0037f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00383	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00387	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  0038b	0f 29 8d d0 fd
	ff ff		 movaps	 XMMWORD PTR $T93249[ebp], xmm1
  00392	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93249[ebp]
  00399	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 266  :     vW = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(3,3,3,3));

  003a0	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  003a4	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  003a8	0f c6 c8 ff	 shufps	 xmm1, xmm0, 255		; 000000ffH
  003ac	0f 29 8d c0 fd
	ff ff		 movaps	 XMMWORD PTR $T93250[ebp], xmm1
  003b3	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93250[ebp]
  003ba	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 267  :     vX = _mm_mul_ps(vX,M2.r[0]);

  003be	8b 53 10	 mov	 edx, DWORD PTR _M2$[ebx]
  003c1	0f 28 02	 movaps	 xmm0, XMMWORD PTR [edx]
  003c4	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  003c8	0f 59 c8	 mulps	 xmm1, xmm0
  003cb	0f 29 8d b0 fd
	ff ff		 movaps	 XMMWORD PTR $T93251[ebp], xmm1
  003d2	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93251[ebp]
  003d9	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 268  :     vY = _mm_mul_ps(vY,M2.r[1]);

  003dd	8b 43 10	 mov	 eax, DWORD PTR _M2$[ebx]
  003e0	0f 28 40 10	 movaps	 xmm0, XMMWORD PTR [eax+16]
  003e4	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  003eb	0f 59 c8	 mulps	 xmm1, xmm0
  003ee	0f 29 8d a0 fd
	ff ff		 movaps	 XMMWORD PTR $T93252[ebp], xmm1
  003f5	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93252[ebp]
  003fc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 269  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00403	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  00406	0f 28 41 20	 movaps	 xmm0, XMMWORD PTR [ecx+32]
  0040a	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vZ$[ebp]
  00411	0f 59 c8	 mulps	 xmm1, xmm0
  00414	0f 29 8d 90 fd
	ff ff		 movaps	 XMMWORD PTR $T93253[ebp], xmm1
  0041b	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93253[ebp]
  00422	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 270  :     vW = _mm_mul_ps(vW,M2.r[3]);

  00429	8b 53 10	 mov	 edx, DWORD PTR _M2$[ebx]
  0042c	0f 28 42 30	 movaps	 xmm0, XMMWORD PTR [edx+48]
  00430	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00434	0f 59 c8	 mulps	 xmm1, xmm0
  00437	0f 29 8d 80 fd
	ff ff		 movaps	 XMMWORD PTR $T93254[ebp], xmm1
  0043e	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93254[ebp]
  00445	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 271  :     vX = _mm_add_ps(vX,vZ);

  00449	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  00450	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00454	0f 58 c8	 addps	 xmm1, xmm0
  00457	0f 29 8d 70 fd
	ff ff		 movaps	 XMMWORD PTR $T93255[ebp], xmm1
  0045e	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93255[ebp]
  00465	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 272  :     vY = _mm_add_ps(vY,vW);

  00469	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  0046d	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  00474	0f 58 c8	 addps	 xmm1, xmm0
  00477	0f 29 8d 60 fd
	ff ff		 movaps	 XMMWORD PTR $T93256[ebp], xmm1
  0047e	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93256[ebp]
  00485	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 273  :     vX = _mm_add_ps(vX,vY);

  0048c	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00493	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00497	0f 58 c8	 addps	 xmm1, xmm0
  0049a	0f 29 8d 50 fd
	ff ff		 movaps	 XMMWORD PTR $T93257[ebp], xmm1
  004a1	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93257[ebp]
  004a8	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 274  :     mResult.r[2] = vX;

  004ac	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  004b0	0f 29 45 d0	 movaps	 XMMWORD PTR _mResult$[ebp+32], xmm0

; 275  :     vW = M1.r[3];

  004b4	8b 43 0c	 mov	 eax, DWORD PTR _M1$[ebx]
  004b7	0f 28 40 30	 movaps	 xmm0, XMMWORD PTR [eax+48]
  004bb	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 276  :     vX = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(0,0,0,0));

  004bf	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  004c3	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  004c7	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  004cb	0f 29 8d 40 fd
	ff ff		 movaps	 XMMWORD PTR $T93258[ebp], xmm1
  004d2	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93258[ebp]
  004d9	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 277  :     vY = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(1,1,1,1));

  004dd	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  004e1	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  004e5	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  004e9	0f 29 8d 30 fd
	ff ff		 movaps	 XMMWORD PTR $T93259[ebp], xmm1
  004f0	0f 28 85 30 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93259[ebp]
  004f7	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 278  :     vZ = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(2,2,2,2));

  004fe	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00502	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00506	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  0050a	0f 29 8d 20 fd
	ff ff		 movaps	 XMMWORD PTR $T93260[ebp], xmm1
  00511	0f 28 85 20 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93260[ebp]
  00518	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 279  :     vW = _mm_shuffle_ps(vW,vW,_MM_SHUFFLE(3,3,3,3));

  0051f	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  00523	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  00527	0f c6 c8 ff	 shufps	 xmm1, xmm0, 255		; 000000ffH
  0052b	0f 29 8d 10 fd
	ff ff		 movaps	 XMMWORD PTR $T93261[ebp], xmm1
  00532	0f 28 85 10 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93261[ebp]
  00539	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 280  :     vX = _mm_mul_ps(vX,M2.r[0]);

  0053d	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  00540	0f 28 01	 movaps	 xmm0, XMMWORD PTR [ecx]
  00543	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00547	0f 59 c8	 mulps	 xmm1, xmm0
  0054a	0f 29 8d 00 fd
	ff ff		 movaps	 XMMWORD PTR $T93262[ebp], xmm1
  00551	0f 28 85 00 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93262[ebp]
  00558	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 281  :     vY = _mm_mul_ps(vY,M2.r[1]);

  0055c	8b 53 10	 mov	 edx, DWORD PTR _M2$[ebx]
  0055f	0f 28 42 10	 movaps	 xmm0, XMMWORD PTR [edx+16]
  00563	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  0056a	0f 59 c8	 mulps	 xmm1, xmm0
  0056d	0f 29 8d f0 fc
	ff ff		 movaps	 XMMWORD PTR $T93263[ebp], xmm1
  00574	0f 28 85 f0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93263[ebp]
  0057b	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 282  :     vZ = _mm_mul_ps(vZ,M2.r[2]);

  00582	8b 43 10	 mov	 eax, DWORD PTR _M2$[ebx]
  00585	0f 28 40 20	 movaps	 xmm0, XMMWORD PTR [eax+32]
  00589	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vZ$[ebp]
  00590	0f 59 c8	 mulps	 xmm1, xmm0
  00593	0f 29 8d e0 fc
	ff ff		 movaps	 XMMWORD PTR $T93264[ebp], xmm1
  0059a	0f 28 85 e0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93264[ebp]
  005a1	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _vZ$[ebp], xmm0

; 283  :     vW = _mm_mul_ps(vW,M2.r[3]);

  005a8	8b 4b 10	 mov	 ecx, DWORD PTR _M2$[ebx]
  005ab	0f 28 41 30	 movaps	 xmm0, XMMWORD PTR [ecx+48]
  005af	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _vW$[ebp]
  005b3	0f 59 c8	 mulps	 xmm1, xmm0
  005b6	0f 29 8d d0 fc
	ff ff		 movaps	 XMMWORD PTR $T93265[ebp], xmm1
  005bd	0f 28 85 d0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93265[ebp]
  005c4	0f 29 45 90	 movaps	 XMMWORD PTR _vW$[ebp], xmm0

; 284  :     vX = _mm_add_ps(vX,vZ);

  005c8	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vZ$[ebp]
  005cf	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  005d3	0f 58 c8	 addps	 xmm1, xmm0
  005d6	0f 29 8d c0 fc
	ff ff		 movaps	 XMMWORD PTR $T93266[ebp], xmm1
  005dd	0f 28 85 c0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93266[ebp]
  005e4	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 285  :     vY = _mm_add_ps(vY,vW);

  005e8	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR _vW$[ebp]
  005ec	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _vY$[ebp]
  005f3	0f 58 c8	 addps	 xmm1, xmm0
  005f6	0f 29 8d b0 fc
	ff ff		 movaps	 XMMWORD PTR $T93267[ebp], xmm1
  005fd	0f 28 85 b0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93267[ebp]
  00604	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _vY$[ebp], xmm0

; 286  :     vX = _mm_add_ps(vX,vY);

  0060b	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _vY$[ebp]
  00612	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _vX$[ebp]
  00616	0f 58 c8	 addps	 xmm1, xmm0
  00619	0f 29 8d a0 fc
	ff ff		 movaps	 XMMWORD PTR $T93268[ebp], xmm1
  00620	0f 28 85 a0 fc
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93268[ebp]
  00627	0f 29 45 80	 movaps	 XMMWORD PTR _vX$[ebp], xmm0

; 287  :     mResult.r[3] = vX;

  0062b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _vX$[ebp]
  0062f	0f 29 45 e0	 movaps	 XMMWORD PTR _mResult$[ebp+48], xmm0

; 288  :     return mResult;

  00633	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00638	8d 75 b0	 lea	 esi, DWORD PTR _mResult$[ebp]
  0063b	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  0063e	f3 a5		 rep movsd
  00640	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 289  : #else // _XM_VMX128_INTRINSICS_
; 290  : #endif // _XM_VMX128_INTRINSICS_
; 291  : }

  00643	52		 push	 edx
  00644	8b cd		 mov	 ecx, ebp
  00646	50		 push	 eax
  00647	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixMu
  0064d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00652	58		 pop	 eax
  00653	5a		 pop	 edx
  00654	5f		 pop	 edi
  00655	5e		 pop	 esi
  00656	8b e5		 mov	 esp, ebp
  00658	5d		 pop	 ebp
  00659	8b e3		 mov	 esp, ebx
  0065b	5b		 pop	 ebx
  0065c	c3		 ret	 0
  0065d	8d 49 00	 npad	 3
$LN5@XMMatrixMu:
  00660	01 00 00 00	 DD	 1
  00664	00 00 00 00	 DD	 $LN4@XMMatrixMu
$LN4@XMMatrixMu:
  00668	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0066c	40 00 00 00	 DD	 64			; 00000040H
  00670	00 00 00 00	 DD	 $LN3@XMMatrixMu
$LN3@XMMatrixMu:
  00674	6d		 DB	 109			; 0000006dH
  00675	52		 DB	 82			; 00000052H
  00676	65		 DB	 101			; 00000065H
  00677	73		 DB	 115			; 00000073H
  00678	75		 DB	 117			; 00000075H
  00679	6c		 DB	 108			; 0000006cH
  0067a	74		 DB	 116			; 00000074H
  0067b	00		 DB	 0
?XMMatrixMultiply@@YA?AU_XMMATRIX@@ABU1@0@Z ENDP	; XMMatrixMultiply
_TEXT	ENDS
PUBLIC	?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z	; XMVectorMultiplyAdd
PUBLIC	?XMVectorReplicate@@YA?AT__m128@@M@Z		; XMVectorReplicate
PUBLIC	?Strafe@Camera@@QAEXM@Z				; Camera::Strafe
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124049 = -128						; size = 16
$T124048 = -112						; size = 16
_p$ = -96						; size = 16
$T124046 = -80						; size = 16
_r$ = -64						; size = 16
$T124044 = -48						; size = 16
_s$ = -32						; size = 16
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?Strafe@Camera@@QAEXM@Z PROC				; Camera::Strafe
; _this$ = ecx

; 168  : {

  00960	53		 push	 ebx
  00961	8b dc		 mov	 ebx, esp
  00963	83 ec 08	 sub	 esp, 8
  00966	83 e4 f0	 and	 esp, -16		; fffffff0H
  00969	83 c4 04	 add	 esp, 4
  0096c	55		 push	 ebp
  0096d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00970	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00974	8b ec		 mov	 ebp, esp
  00976	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0097c	57		 push	 edi
  0097d	51		 push	 ecx
  0097e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00981	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00986	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0098b	f3 ab		 rep stosd
  0098d	59		 pop	 ecx
  0098e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  : 	// mPosition += d*mRight
; 170  : 	XMVECTOR s = XMVectorReplicate(d);

  00991	51		 push	 ecx
  00992	d9 43 08	 fld	 DWORD PTR _d$[ebx]
  00995	d9 1c 24	 fstp	 DWORD PTR [esp]
  00998	e8 00 00 00 00	 call	 ?XMVectorReplicate@@YA?AT__m128@@M@Z ; XMVectorReplicate
  0099d	83 c4 04	 add	 esp, 4
  009a0	0f 29 45 d0	 movaps	 XMMWORD PTR $T124044[ebp], xmm0
  009a4	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T124044[ebp]
  009a8	0f 29 45 e0	 movaps	 XMMWORD PTR _s$[ebp], xmm0

; 171  : 	XMVECTOR r = XMLoadFloat3(&mRight);

  009ac	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  009af	83 c0 0c	 add	 eax, 12			; 0000000cH
  009b2	50		 push	 eax
  009b3	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  009b8	83 c4 04	 add	 esp, 4
  009bb	0f 29 45 b0	 movaps	 XMMWORD PTR $T124046[ebp], xmm0
  009bf	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T124046[ebp]
  009c3	0f 29 45 c0	 movaps	 XMMWORD PTR _r$[ebp], xmm0

; 172  : 	XMVECTOR p = XMLoadFloat3(&mPosition);

  009c7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  009ca	51		 push	 ecx
  009cb	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  009d0	83 c4 04	 add	 esp, 4
  009d3	0f 29 45 90	 movaps	 XMMWORD PTR $T124048[ebp], xmm0
  009d7	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124048[ebp]
  009db	0f 29 45 a0	 movaps	 XMMWORD PTR _p$[ebp], xmm0

; 173  : 	XMStoreFloat3(&mPosition, XMVectorMultiplyAdd(s, r, p));

  009df	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _p$[ebp]
  009e3	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _r$[ebp]
  009e7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _s$[ebp]
  009eb	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z ; XMVectorMultiplyAdd
  009f0	0f 29 45 80	 movaps	 XMMWORD PTR $T124049[ebp], xmm0
  009f4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T124049[ebp]
  009f8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  009fb	52		 push	 edx
  009fc	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00a01	83 c4 04	 add	 esp, 4

; 174  : }

  00a04	5f		 pop	 edi
  00a05	8b e5		 mov	 esp, ebp
  00a07	5d		 pop	 ebp
  00a08	8b e3		 mov	 esp, ebx
  00a0a	5b		 pop	 ebx
  00a0b	c2 04 00	 ret	 4
?Strafe@Camera@@QAEXM@Z ENDP				; Camera::Strafe
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ?XMVectorReplicate@@YA?AT__m128@@M@Z
_TEXT	SEGMENT
$T88142 = -16						; size = 16
_Value$ = 8						; size = 4
?XMVectorReplicate@@YA?AT__m128@@M@Z PROC		; XMVectorReplicate, COMDAT

; 94   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00021	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00024	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00027	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 95   : #if defined(_XM_NO_INTRINSICS_) || defined(XM_NO_MISALIGNED_VECTOR_ACCESS)
; 96   :     XMVECTORF32 vResult = {Value,Value,Value,Value};
; 97   :     return vResult.v;
; 98   : #elif defined(_XM_SSE_INTRINSICS_)
; 99   :     return _mm_set_ps1( Value );

  0002a	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _Value$[ebx]
  0002f	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR $T88142[ebp], xmm0
  00037	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR $T88142[ebp]

; 100  : #else // _XM_VMX128_INTRINSICS_
; 101  : #endif // _XM_VMX128_INTRINSICS_
; 102  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	8b e3		 mov	 esp, ebx
  00040	5b		 pop	 ebx
  00041	c3		 ret	 0
?XMVectorReplicate@@YA?AT__m128@@M@Z ENDP		; XMVectorReplicate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z
_TEXT	SEGMENT
$T88965 = -96						; size = 16
$T88964 = -80						; size = 16
_vResult$ = -64						; size = 16
_V3$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z PROC		; XMVectorMultiplyAdd, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1
; _V3$ = xmm2

; 2607 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 55 d0	 movaps	 XMMWORD PTR _V3$[ebp], xmm2
  0002d	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00031	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 2608 : #if defined(_XM_NO_INTRINSICS_)
; 2609 :     XMVECTOR vResult = {
; 2610 :         (V1.vector4_f32[0] * V2.vector4_f32[0]) + V3.vector4_f32[0],
; 2611 :         (V1.vector4_f32[1] * V2.vector4_f32[1]) + V3.vector4_f32[1],
; 2612 :         (V1.vector4_f32[2] * V2.vector4_f32[2]) + V3.vector4_f32[2],
; 2613 :         (V1.vector4_f32[3] * V2.vector4_f32[3]) + V3.vector4_f32[3]
; 2614 :     };
; 2615 :     return vResult;
; 2616 : 
; 2617 : #elif defined(_XM_SSE_INTRINSICS_)
; 2618 : 	XMVECTOR vResult = _mm_mul_ps( V1, V2 );

  00035	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00039	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  0003d	0f 59 c8	 mulps	 xmm1, xmm0
  00040	0f 29 4d b0	 movaps	 XMMWORD PTR $T88964[ebp], xmm1
  00044	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T88964[ebp]
  00048	0f 29 45 c0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 2619 : 	return _mm_add_ps(vResult, V3 );

  0004c	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _V3$[ebp]
  00050	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  00054	0f 58 c8	 addps	 xmm1, xmm0
  00057	0f 29 4d a0	 movaps	 XMMWORD PTR $T88965[ebp], xmm1
  0005b	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T88965[ebp]

; 2620 : #else // _XM_VMX128_INTRINSICS_
; 2621 : #endif // _XM_VMX128_INTRINSICS_
; 2622 : }

  0005f	5f		 pop	 edi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	8b e3		 mov	 esp, ebx
  00065	5b		 pop	 ebx
  00066	c3		 ret	 0
?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z ENDP		; XMVectorMultiplyAdd
_TEXT	ENDS
PUBLIC	?Walk@Camera@@QAEXM@Z				; Camera::Walk
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124060 = -128						; size = 16
$T124059 = -112						; size = 16
_p$ = -96						; size = 16
$T124057 = -80						; size = 16
_l$ = -64						; size = 16
$T124055 = -48						; size = 16
_s$ = -32						; size = 16
_this$ = -4						; size = 4
_d$ = 8							; size = 4
?Walk@Camera@@QAEXM@Z PROC				; Camera::Walk
; _this$ = ecx

; 177  : {

  00a10	53		 push	 ebx
  00a11	8b dc		 mov	 ebx, esp
  00a13	83 ec 08	 sub	 esp, 8
  00a16	83 e4 f0	 and	 esp, -16		; fffffff0H
  00a19	83 c4 04	 add	 esp, 4
  00a1c	55		 push	 ebp
  00a1d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00a20	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00a24	8b ec		 mov	 ebp, esp
  00a26	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00a2c	57		 push	 edi
  00a2d	51		 push	 ecx
  00a2e	8d 7d 80	 lea	 edi, DWORD PTR [ebp-128]
  00a31	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a36	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00a3b	f3 ab		 rep stosd
  00a3d	59		 pop	 ecx
  00a3e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  : 	// mPosition += d*mLook
; 179  : 	XMVECTOR s = XMVectorReplicate(d);

  00a41	51		 push	 ecx
  00a42	d9 43 08	 fld	 DWORD PTR _d$[ebx]
  00a45	d9 1c 24	 fstp	 DWORD PTR [esp]
  00a48	e8 00 00 00 00	 call	 ?XMVectorReplicate@@YA?AT__m128@@M@Z ; XMVectorReplicate
  00a4d	83 c4 04	 add	 esp, 4
  00a50	0f 29 45 d0	 movaps	 XMMWORD PTR $T124055[ebp], xmm0
  00a54	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T124055[ebp]
  00a58	0f 29 45 e0	 movaps	 XMMWORD PTR _s$[ebp], xmm0

; 180  : 	XMVECTOR l = XMLoadFloat3(&mLook);

  00a5c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00a5f	83 c0 24	 add	 eax, 36			; 00000024H
  00a62	50		 push	 eax
  00a63	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00a68	83 c4 04	 add	 esp, 4
  00a6b	0f 29 45 b0	 movaps	 XMMWORD PTR $T124057[ebp], xmm0
  00a6f	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T124057[ebp]
  00a73	0f 29 45 c0	 movaps	 XMMWORD PTR _l$[ebp], xmm0

; 181  : 	XMVECTOR p = XMLoadFloat3(&mPosition);

  00a77	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00a7a	51		 push	 ecx
  00a7b	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00a80	83 c4 04	 add	 esp, 4
  00a83	0f 29 45 90	 movaps	 XMMWORD PTR $T124059[ebp], xmm0
  00a87	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124059[ebp]
  00a8b	0f 29 45 a0	 movaps	 XMMWORD PTR _p$[ebp], xmm0

; 182  : 	XMStoreFloat3(&mPosition, XMVectorMultiplyAdd(s, l, p));

  00a8f	0f 28 55 a0	 movaps	 xmm2, XMMWORD PTR _p$[ebp]
  00a93	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _l$[ebp]
  00a97	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _s$[ebp]
  00a9b	e8 00 00 00 00	 call	 ?XMVectorMultiplyAdd@@YA?AT__m128@@T1@00@Z ; XMVectorMultiplyAdd
  00aa0	0f 29 45 80	 movaps	 XMMWORD PTR $T124060[ebp], xmm0
  00aa4	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T124060[ebp]
  00aa8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00aab	52		 push	 edx
  00aac	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00ab1	83 c4 04	 add	 esp, 4

; 183  : }

  00ab4	5f		 pop	 edi
  00ab5	8b e5		 mov	 esp, ebp
  00ab7	5d		 pop	 ebp
  00ab8	8b e3		 mov	 esp, ebx
  00aba	5b		 pop	 ebx
  00abb	c2 04 00	 ret	 4
?Walk@Camera@@QAEXM@Z ENDP				; Camera::Walk
_TEXT	ENDS
PUBLIC	?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
PUBLIC	?XMMatrixRotationAxis@@YA?AU_XMMATRIX@@T__m128@@M@Z ; XMMatrixRotationAxis
PUBLIC	?Pitch@Camera@@QAEXM@Z				; Camera::Pitch
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T124071 = -176						; size = 16
$T124070 = -160						; size = 16
$T124069 = -144						; size = 16
$T124068 = -128						; size = 16
$T124066 = -112						; size = 16
_R$ = -80						; size = 64
_this$ = -4						; size = 4
_angle$ = 8						; size = 4
?Pitch@Camera@@QAEXM@Z PROC				; Camera::Pitch
; _this$ = ecx

; 186  : {

  00ac0	53		 push	 ebx
  00ac1	8b dc		 mov	 ebx, esp
  00ac3	83 ec 08	 sub	 esp, 8
  00ac6	83 e4 f0	 and	 esp, -16		; fffffff0H
  00ac9	83 c4 04	 add	 esp, 4
  00acc	55		 push	 ebp
  00acd	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00ad0	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00ad4	8b ec		 mov	 ebp, esp
  00ad6	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00adc	57		 push	 edi
  00add	51		 push	 ecx
  00ade	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00ae4	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00ae9	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00aee	f3 ab		 rep stosd
  00af0	59		 pop	 ecx
  00af1	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 187  : 	// Rotate up and look vector about the right vector.
; 188  : 
; 189  : 	XMMATRIX R = XMMatrixRotationAxis(XMLoadFloat3(&mRight), angle);

  00af4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00af7	83 c0 0c	 add	 eax, 12			; 0000000cH
  00afa	50		 push	 eax
  00afb	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00b00	83 c4 04	 add	 esp, 4
  00b03	0f 29 45 90	 movaps	 XMMWORD PTR $T124066[ebp], xmm0
  00b07	51		 push	 ecx
  00b08	d9 43 08	 fld	 DWORD PTR _angle$[ebx]
  00b0b	d9 1c 24	 fstp	 DWORD PTR [esp]
  00b0e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124066[ebp]
  00b12	8d 4d b0	 lea	 ecx, DWORD PTR _R$[ebp]
  00b15	51		 push	 ecx
  00b16	e8 00 00 00 00	 call	 ?XMMatrixRotationAxis@@YA?AU_XMMATRIX@@T__m128@@M@Z ; XMMatrixRotationAxis
  00b1b	83 c4 08	 add	 esp, 8

; 190  : 
; 191  : 	XMStoreFloat3(&mUp,   XMVector3TransformNormal(XMLoadFloat3(&mUp), R));

  00b1e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b21	83 c2 18	 add	 edx, 24			; 00000018H
  00b24	52		 push	 edx
  00b25	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00b2a	83 c4 04	 add	 esp, 4
  00b2d	0f 29 45 80	 movaps	 XMMWORD PTR $T124068[ebp], xmm0
  00b31	8d 45 b0	 lea	 eax, DWORD PTR _R$[ebp]
  00b34	50		 push	 eax
  00b35	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T124068[ebp]
  00b39	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
  00b3e	83 c4 04	 add	 esp, 4
  00b41	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T124069[ebp], xmm0
  00b48	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124069[ebp]
  00b4f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b52	83 c1 18	 add	 ecx, 24			; 00000018H
  00b55	51		 push	 ecx
  00b56	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00b5b	83 c4 04	 add	 esp, 4

; 192  : 	XMStoreFloat3(&mLook, XMVector3TransformNormal(XMLoadFloat3(&mLook), R));

  00b5e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00b61	83 c2 24	 add	 edx, 36			; 00000024H
  00b64	52		 push	 edx
  00b65	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00b6a	83 c4 04	 add	 esp, 4
  00b6d	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T124070[ebp], xmm0
  00b74	8d 45 b0	 lea	 eax, DWORD PTR _R$[ebp]
  00b77	50		 push	 eax
  00b78	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124070[ebp]
  00b7f	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
  00b84	83 c4 04	 add	 esp, 4
  00b87	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T124071[ebp], xmm0
  00b8e	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124071[ebp]
  00b95	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00b98	83 c1 24	 add	 ecx, 36			; 00000024H
  00b9b	51		 push	 ecx
  00b9c	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00ba1	83 c4 04	 add	 esp, 4

; 193  : }

  00ba4	52		 push	 edx
  00ba5	8b cd		 mov	 ecx, ebp
  00ba7	50		 push	 eax
  00ba8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Pitch
  00bae	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00bb3	58		 pop	 eax
  00bb4	5a		 pop	 edx
  00bb5	5f		 pop	 edi
  00bb6	8b e5		 mov	 esp, ebp
  00bb8	5d		 pop	 ebp
  00bb9	8b e3		 mov	 esp, ebx
  00bbb	5b		 pop	 ebx
  00bbc	c2 04 00	 ret	 4
  00bbf	90		 npad	 1
$LN5@Pitch:
  00bc0	01 00 00 00	 DD	 1
  00bc4	00 00 00 00	 DD	 $LN4@Pitch
$LN4@Pitch:
  00bc8	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00bcc	40 00 00 00	 DD	 64			; 00000040H
  00bd0	00 00 00 00	 DD	 $LN3@Pitch
$LN3@Pitch:
  00bd4	52		 DB	 82			; 00000052H
  00bd5	00		 DB	 0
?Pitch@Camera@@QAEXM@Z ENDP				; Camera::Pitch
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z
_TEXT	SEGMENT
$T91503 = -176						; size = 16
$T91502 = -160						; size = 16
$T91501 = -144						; size = 16
$T91500 = -128						; size = 16
$T91499 = -112						; size = 16
$T91498 = -96						; size = 16
_vTemp$ = -80						; size = 16
$T91496 = -64						; size = 16
$T91495 = -48						; size = 16
_vResult$ = -32						; size = 16
_V$ = -16						; size = 16
_M$ = 8							; size = 4
?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z PROC ; XMVector3TransformNormal, COMDAT
; _V$ = xmm0

; 8960 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  0001c	57		 push	 edi
  0001d	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00023	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0

; 8961 : #if defined(_XM_NO_INTRINSICS_)
; 8962 : 
; 8963 :     XMVECTOR X;
; 8964 :     XMVECTOR Y;
; 8965 :     XMVECTOR Z;
; 8966 :     XMVECTOR Result;
; 8967 : 
; 8968 :     Z = XMVectorSplatZ(V);
; 8969 :     Y = XMVectorSplatY(V);
; 8970 :     X = XMVectorSplatX(V);
; 8971 : 
; 8972 :     Result = XMVectorMultiply(Z, M.r[2]);
; 8973 :     Result = XMVectorMultiplyAdd(Y, M.r[1], Result);
; 8974 :     Result = XMVectorMultiplyAdd(X, M.r[0], Result);
; 8975 : 
; 8976 :     return Result;
; 8977 : 
; 8978 : #elif defined(_XM_SSE_INTRINSICS_)
; 8979 :     XMVECTOR vResult = _mm_shuffle_ps(V,V,_MM_SHUFFLE(0,0,0,0));

  00033	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00037	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0003b	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  0003f	0f 29 4d d0	 movaps	 XMMWORD PTR $T91495[ebp], xmm1
  00043	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T91495[ebp]
  00047	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8980 :     vResult = _mm_mul_ps(vResult,M.r[0]);

  0004b	8b 43 08	 mov	 eax, DWORD PTR _M$[ebx]
  0004e	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00051	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  00055	0f 59 c8	 mulps	 xmm1, xmm0
  00058	0f 29 4d c0	 movaps	 XMMWORD PTR $T91496[ebp], xmm1
  0005c	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T91496[ebp]
  00060	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8981 :     XMVECTOR vTemp = _mm_shuffle_ps(V,V,_MM_SHUFFLE(1,1,1,1));

  00064	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  00068	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  0006c	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  00070	0f 29 4d a0	 movaps	 XMMWORD PTR $T91498[ebp], xmm1
  00074	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T91498[ebp]
  00078	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8982 :     vTemp = _mm_mul_ps(vTemp,M.r[1]);

  0007c	8b 4b 08	 mov	 ecx, DWORD PTR _M$[ebx]
  0007f	0f 28 41 10	 movaps	 xmm0, XMMWORD PTR [ecx+16]
  00083	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00087	0f 59 c8	 mulps	 xmm1, xmm0
  0008a	0f 29 4d 90	 movaps	 XMMWORD PTR $T91499[ebp], xmm1
  0008e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T91499[ebp]
  00092	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8983 :     vResult = _mm_add_ps(vResult,vTemp);

  00096	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0009a	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  0009e	0f 58 c8	 addps	 xmm1, xmm0
  000a1	0f 29 4d 80	 movaps	 XMMWORD PTR $T91500[ebp], xmm1
  000a5	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T91500[ebp]
  000a9	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8984 :     vTemp = _mm_shuffle_ps(V,V,_MM_SHUFFLE(2,2,2,2));

  000ad	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  000b1	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  000b5	0f c6 c8 aa	 shufps	 xmm1, xmm0, 170		; 000000aaH
  000b9	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T91501[ebp], xmm1
  000c0	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91501[ebp]
  000c7	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8985 :     vTemp = _mm_mul_ps(vTemp,M.r[2]);

  000cb	8b 53 08	 mov	 edx, DWORD PTR _M$[ebx]
  000ce	0f 28 42 20	 movaps	 xmm0, XMMWORD PTR [edx+32]
  000d2	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  000d6	0f 59 c8	 mulps	 xmm1, xmm0
  000d9	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T91502[ebp], xmm1
  000e0	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91502[ebp]
  000e7	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 8986 :     vResult = _mm_add_ps(vResult,vTemp);

  000eb	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  000ef	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vResult$[ebp]
  000f3	0f 58 c8	 addps	 xmm1, xmm0
  000f6	0f 29 8d 50 ff
	ff ff		 movaps	 XMMWORD PTR $T91503[ebp], xmm1
  000fd	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91503[ebp]
  00104	0f 29 45 e0	 movaps	 XMMWORD PTR _vResult$[ebp], xmm0

; 8987 :     return vResult;

  00108	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vResult$[ebp]

; 8988 : #else // _XM_VMX128_INTRINSICS_
; 8989 : #endif // _XM_VMX128_INTRINSICS_
; 8990 : }

  0010c	5f		 pop	 edi
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	8b e3		 mov	 esp, ebx
  00112	5b		 pop	 ebx
  00113	c3		 ret	 0
?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ENDP ; XMVector3TransformNormal
_TEXT	ENDS
PUBLIC	?XMMatrixRotationNormal@@YA?AU_XMMATRIX@@T__m128@@M@Z ; XMMatrixRotationNormal
PUBLIC	??_C@_0BL@KCIHIPPB@?$CBXMVector3IsInfinite?$CIAxis?$CJ?$AA@ ; `string'
PUBLIC	?XMVector3IsInfinite@@YAHT__m128@@@Z		; XMVector3IsInfinite
PUBLIC	??_C@_0CG@CLAMCMIO@?$CBXMVector3Equal?$CIAxis?0?5XMVectorZe@ ; `string'
PUBLIC	?XMVector3Equal@@YAHT__m128@@0@Z		; XMVector3Equal
PUBLIC	?XMVectorZero@@YA?AT__m128@@XZ			; XMVectorZero
;	COMDAT ??_C@_0BL@KCIHIPPB@?$CBXMVector3IsInfinite?$CIAxis?$CJ?$AA@
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmatrix.inl
CONST	SEGMENT
??_C@_0BL@KCIHIPPB@?$CBXMVector3IsInfinite?$CIAxis?$CJ?$AA@ DB '!XMVector'
	DB	'3IsInfinite(Axis)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CLAMCMIO@?$CBXMVector3Equal?$CIAxis?0?5XMVectorZe@
CONST	SEGMENT
??_C@_0CG@CLAMCMIO@?$CBXMVector3Equal?$CIAxis?0?5XMVectorZe@ DB '!XMVecto'
	DB	'r3Equal(Axis, XMVectorZero())', 00H		; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMMatrixRotationAxis@@YA?AU_XMMATRIX@@T__m128@@M@Z
_TEXT	SEGMENT
_M$ = -144						; size = 64
$T93764 = -64						; size = 16
_Normal$ = -48						; size = 16
$T93759 = -32						; size = 16
_Axis$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_Angle$ = 12						; size = 4
?XMMatrixRotationAxis@@YA?AU_XMMATRIX@@T__m128@@M@Z PROC ; XMMatrixRotationAxis, COMDAT
; _Axis$ = xmm0

; 1426 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 68 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-152]
  00024	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _Axis$[ebp], xmm0

; 1427 : #if defined(_XM_NO_INTRINSICS_)
; 1428 : 
; 1429 :     XMVECTOR Normal;
; 1430 :     XMMATRIX M;
; 1431 : 
; 1432 :     XMASSERT(!XMVector3Equal(Axis, XMVectorZero()));
; 1433 :     XMASSERT(!XMVector3IsInfinite(Axis));
; 1434 : 
; 1435 :     Normal = XMVector3Normalize(Axis);
; 1436 :     M = XMMatrixRotationNormal(Normal, Angle);
; 1437 : 
; 1438 :     return M;
; 1439 : 
; 1440 : #elif defined(_XM_SSE_INTRINSICS_)
; 1441 :     XMASSERT(!XMVector3Equal(Axis, XMVectorZero()));

  00034	e8 00 00 00 00	 call	 ?XMVectorZero@@YA?AT__m128@@XZ ; XMVectorZero
  00039	0f 29 45 e0	 movaps	 XMMWORD PTR $T93759[ebp], xmm0
  0003d	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR $T93759[ebp]
  00041	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Axis$[ebp]
  00045	e8 00 00 00 00	 call	 ?XMVector3Equal@@YAHT__m128@@0@Z ; XMVector3Equal
  0004a	85 c0		 test	 eax, eax
  0004c	74 17		 je	 SHORT $LN3@XMMatrixRo
  0004e	68 a1 05 00 00	 push	 1441			; 000005a1H
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@CLAMCMIO@?$CBXMVector3Equal?$CIAxis?0?5XMVectorZe@
  0005d	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@XMMatrixRo:

; 1442 :     XMASSERT(!XMVector3IsInfinite(Axis));

  00065	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Axis$[ebp]
  00069	e8 00 00 00 00	 call	 ?XMVector3IsInfinite@@YAHT__m128@@@Z ; XMVector3IsInfinite
  0006e	85 c0		 test	 eax, eax
  00070	74 17		 je	 SHORT $LN4@XMMatrixRo
  00072	68 a2 05 00 00	 push	 1442			; 000005a2H
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@HBDDGJLJ@c?3?2program?5files?5?$CIx86?$CJ?2microsoft@
  0007c	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@KCIHIPPB@?$CBXMVector3IsInfinite?$CIAxis?$CJ?$AA@
  00081	e8 00 00 00 00	 call	 ?XMAssert@@YAXPBD0I@Z	; XMAssert
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@XMMatrixRo:

; 1443 :     XMVECTOR Normal = XMVector3Normalize(Axis);

  00089	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _Axis$[ebp]
  0008d	e8 00 00 00 00	 call	 ?XMVector3Normalize@@YA?AT__m128@@T1@@Z ; XMVector3Normalize
  00092	0f 29 45 c0	 movaps	 XMMWORD PTR $T93764[ebp], xmm0
  00096	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T93764[ebp]
  0009a	0f 29 45 d0	 movaps	 XMMWORD PTR _Normal$[ebp], xmm0

; 1444 :     XMMATRIX M = XMMatrixRotationNormal(Normal, Angle);

  0009e	51		 push	 ecx
  0009f	d9 43 0c	 fld	 DWORD PTR _Angle$[ebx]
  000a2	d9 1c 24	 fstp	 DWORD PTR [esp]
  000a5	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _Normal$[ebp]
  000a9	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR _M$[ebp]
  000af	52		 push	 edx
  000b0	e8 00 00 00 00	 call	 ?XMMatrixRotationNormal@@YA?AU_XMMATRIX@@T__m128@@M@Z ; XMMatrixRotationNormal
  000b5	83 c4 08	 add	 esp, 8

; 1445 :     return M;

  000b8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000bd	8d b5 70 ff ff
	ff		 lea	 esi, DWORD PTR _M$[ebp]
  000c3	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  000c6	f3 a5		 rep movsd
  000c8	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 1446 : #else // _XM_VMX128_INTRINSICS_
; 1447 : #endif // _XM_VMX128_INTRINSICS_
; 1448 : }

  000cb	52		 push	 edx
  000cc	8b cd		 mov	 ecx, ebp
  000ce	50		 push	 eax
  000cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@XMMatrixRo
  000d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000da	58		 pop	 eax
  000db	5a		 pop	 edx
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	8b e3		 mov	 esp, ebx
  000e3	5b		 pop	 ebx
  000e4	c3		 ret	 0
  000e5	8d 49 00	 npad	 3
$LN7@XMMatrixRo:
  000e8	01 00 00 00	 DD	 1
  000ec	00 00 00 00	 DD	 $LN6@XMMatrixRo
$LN6@XMMatrixRo:
  000f0	70 ff ff ff	 DD	 -144			; ffffff70H
  000f4	40 00 00 00	 DD	 64			; 00000040H
  000f8	00 00 00 00	 DD	 $LN5@XMMatrixRo
$LN5@XMMatrixRo:
  000fc	4d		 DB	 77			; 0000004dH
  000fd	00		 DB	 0
?XMMatrixRotationAxis@@YA?AU_XMMATRIX@@T__m128@@M@Z ENDP ; XMMatrixRotationAxis
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ?XMVectorZero@@YA?AT__m128@@XZ
_TEXT	SEGMENT
$T88122 = -16						; size = 16
?XMVectorZero@@YA?AT__m128@@XZ PROC			; XMVectorZero, COMDAT

; 39   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 10	 sub	 esp, 16			; 00000010H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00021	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00024	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00027	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 40   : #if defined(_XM_NO_INTRINSICS_)
; 41   :     XMVECTOR vResult = {0.0f,0.0f,0.0f,0.0f};
; 42   :     return vResult;
; 43   : #elif defined(_XM_SSE_INTRINSICS_)
; 44   :     return _mm_setzero_ps();

  0002a	0f 57 c0	 xorps	 xmm0, xmm0
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR $T88122[ebp], xmm0
  00031	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR $T88122[ebp]

; 45   : #else // _XM_VMX128_INTRINSICS_
; 46   : #endif // _XM_VMX128_INTRINSICS_
; 47   : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	8b e3		 mov	 esp, ebx
  0003a	5b		 pop	 ebx
  0003b	c3		 ret	 0
?XMVectorZero@@YA?AT__m128@@XZ ENDP			; XMVectorZero
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVector3Equal@@YAHT__m128@@0@Z
_TEXT	SEGMENT
$T90877 = -64						; size = 16
_vTemp$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Equal@@YAHT__m128@@0@Z PROC			; XMVector3Equal, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1

; 7304 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 40	 sub	 esp, 64			; 00000040H
  00019	57		 push	 edi
  0001a	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0001d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  0002d	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 7305 : #if defined(_XM_NO_INTRINSICS_)
; 7306 :     return (((V1.vector4_f32[0] == V2.vector4_f32[0]) && (V1.vector4_f32[1] == V2.vector4_f32[1]) && (V1.vector4_f32[2] == V2.vector4_f32[2])) != 0);
; 7307 : #elif defined(_XM_SSE_INTRINSICS_)
; 7308 :     XMVECTOR vTemp = _mm_cmpeq_ps(V1,V2);

  00031	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  00035	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  00039	0f c2 c8 00	 cmpeqps xmm1, xmm0
  0003d	0f 29 4d c0	 movaps	 XMMWORD PTR $T90877[ebp], xmm1
  00041	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T90877[ebp]
  00045	0f 29 45 d0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 7309 :     return (((_mm_movemask_ps(vTemp)&7)==7) != 0);

  00049	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0004d	0f 50 c0	 movmskps eax, xmm0
  00050	83 e0 07	 and	 eax, 7
  00053	33 c9		 xor	 ecx, ecx
  00055	83 f8 07	 cmp	 eax, 7
  00058	0f 94 c1	 sete	 cl
  0005b	f7 d9		 neg	 ecx
  0005d	1b c9		 sbb	 ecx, ecx
  0005f	f7 d9		 neg	 ecx
  00061	8b c1		 mov	 eax, ecx

; 7310 : #else // _XM_VMX128_INTRINSICS_
; 7311 :     return XMComparisonAllTrue(XMVector3EqualR(V1, V2));
; 7312 : #endif
; 7313 : }

  00063	5f		 pop	 edi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	8b e3		 mov	 esp, ebx
  00069	5b		 pop	 ebx
  0006a	c3		 ret	 0
?XMVector3Equal@@YAHT__m128@@0@Z ENDP			; XMVector3Equal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVector3IsInfinite@@YAHT__m128@@@Z
_TEXT	SEGMENT
$T91031 = -96						; size = 16
$T91030 = -80						; size = 16
$T91029 = -64						; size = 16
$T91028 = -48						; size = 16
_vTemp$ = -32						; size = 16
_V$ = -16						; size = 16
?XMVector3IsInfinite@@YAHT__m128@@@Z PROC		; XMVector3IsInfinite, COMDAT
; _V$ = xmm0

; 7733 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 60	 sub	 esp, 96			; 00000060H
  00019	57		 push	 edi
  0001a	8d 7d a0	 lea	 edi, DWORD PTR [ebp-96]
  0001d	b9 18 00 00 00	 mov	 ecx, 24			; 00000018H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0

; 7734 : #if defined(_XM_NO_INTRINSICS_)
; 7735 :     return (XMISINF(V.vector4_f32[0]) ||
; 7736 :             XMISINF(V.vector4_f32[1]) ||
; 7737 :             XMISINF(V.vector4_f32[2]));
; 7738 : #elif defined(_XM_SSE_INTRINSICS_)
; 7739 :     // Mask off the sign bit
; 7740 :     __m128 vTemp = _mm_and_ps(V,g_XMAbsMask);

  0002d	8d 45 d0	 lea	 eax, DWORD PTR $T91028[ebp]
  00030	50		 push	 eax
  00031	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMAbsMask@@3UXMVECTORI32@@B ; g_XMAbsMask
  00036	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  0003b	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  0003e	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V$[ebp]
  00042	0f 54 c8	 andps	 xmm1, xmm0
  00045	0f 29 4d c0	 movaps	 XMMWORD PTR $T91029[ebp], xmm1
  00049	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T91029[ebp]
  0004d	0f 29 45 e0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 7741 :     // Compare to infinity
; 7742 :     vTemp = _mm_cmpeq_ps(vTemp,g_XMInfinity);

  00051	8d 4d b0	 lea	 ecx, DWORD PTR $T91030[ebp]
  00054	51		 push	 ecx
  00055	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMInfinity@@3UXMVECTORI32@@B ; g_XMInfinity
  0005a	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  0005f	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00062	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00066	0f c2 c8 00	 cmpeqps xmm1, xmm0
  0006a	0f 29 4d a0	 movaps	 XMMWORD PTR $T91031[ebp], xmm1
  0006e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T91031[ebp]
  00072	0f 29 45 e0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 7743 :     // If x,y or z are infinity, the signs are true.
; 7744 :     return ((_mm_movemask_ps(vTemp)&7) != 0);

  00076	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0007a	0f 50 c0	 movmskps eax, xmm0
  0007d	83 e0 07	 and	 eax, 7
  00080	f7 d8		 neg	 eax
  00082	1b c0		 sbb	 eax, eax
  00084	f7 d8		 neg	 eax

; 7745 : #else // _XM_VMX128_INTRINSICS_
; 7746 : #endif // _XM_VMX128_INTRINSICS_
; 7747 : }

  00086	5f		 pop	 edi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	8b e3		 mov	 esp, ebx
  0008c	5b		 pop	 ebx
  0008d	c3		 ret	 0
?XMVector3IsInfinite@@YAHT__m128@@@Z ENDP		; XMVector3IsInfinite
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
;	COMDAT __real@3ff0000000000000
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmatrix.inl
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?XMMatrixRotationNormal@@YA?AU_XMMATRIX@@T__m128@@M@Z
_TEXT	SEGMENT
tv234 = -712						; size = 4
tv233 = -708						; size = 4
$T93751 = -704						; size = 16
$T93750 = -688						; size = 16
$T93749 = -672						; size = 16
$T93748 = -656						; size = 16
$T93747 = -640						; size = 16
$T93746 = -624						; size = 16
$T93745 = -608						; size = 16
$T93744 = -592						; size = 16
$T93743 = -576						; size = 16
$T93742 = -560						; size = 16
$T93741 = -544						; size = 16
$T93740 = -528						; size = 16
$T93739 = -512						; size = 16
$T93738 = -496						; size = 16
$T93737 = -480						; size = 16
$T93736 = -464						; size = 16
$T93735 = -448						; size = 16
$T93734 = -432						; size = 16
$T93733 = -416						; size = 16
$T93732 = -400						; size = 16
$T93731 = -384						; size = 16
$T93730 = -368						; size = 16
$T93729 = -352						; size = 16
$T93728 = -336						; size = 16
$T93727 = -320						; size = 16
$T93726 = -304						; size = 16
_fCosAngle$ = -284					; size = 4
_fSinAngle$ = -280					; size = 4
_M$ = -272						; size = 64
_C2$ = -192						; size = 16
_C1$ = -176						; size = 16
_C0$ = -160						; size = 16
_R2$ = -144						; size = 16
_R1$ = -128						; size = 16
_R0$ = -112						; size = 16
_V2$ = -96						; size = 16
_V1$ = -80						; size = 16
_V0$ = -64						; size = 16
_N1$ = -48						; size = 16
_N0$ = -32						; size = 16
_NormalAxis$ = -16					; size = 16
___$ReturnUdt$ = 8					; size = 4
_Angle$ = 12						; size = 4
?XMMatrixRotationNormal@@YA?AU_XMMATRIX@@T__m128@@M@Z PROC ; XMMatrixRotationNormal, COMDAT
; _NormalAxis$ = xmm0

; 1313 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec c8 02 00
	00		 sub	 esp, 712		; 000002c8H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd 38 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-712]
  00024	b9 b2 00 00 00	 mov	 ecx, 178		; 000000b2H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	0f 29 45 f0	 movaps	 XMMWORD PTR _NormalAxis$[ebp], xmm0

; 1314 : #if defined(_XM_NO_INTRINSICS_)
; 1315 :     XMVECTOR               A;
; 1316 :     XMVECTOR               N0, N1;
; 1317 :     XMVECTOR               V0, V1, V2;
; 1318 :     XMVECTOR               R0, R1, R2;
; 1319 :     XMVECTOR               C0, C1, C2;
; 1320 :     XMMATRIX               M;
; 1321 :     static CONST XMVECTORU32 SwizzleYZXW = {XM_PERMUTE_0Y, XM_PERMUTE_0Z, XM_PERMUTE_0X, XM_PERMUTE_0W};
; 1322 :     static CONST XMVECTORU32 SwizzleZXYW = {XM_PERMUTE_0Z, XM_PERMUTE_0X, XM_PERMUTE_0Y, XM_PERMUTE_0W};
; 1323 :     static CONST XMVECTORU32 Permute0Z1Y1Z0X = {XM_PERMUTE_0Z, XM_PERMUTE_1Y, XM_PERMUTE_1Z, XM_PERMUTE_0X};
; 1324 :     static CONST XMVECTORU32 Permute0Y1X0Y1X = {XM_PERMUTE_0Y, XM_PERMUTE_1X, XM_PERMUTE_0Y, XM_PERMUTE_1X};
; 1325 :     static CONST XMVECTORU32 Permute0X1X1Y0W = {XM_PERMUTE_0X, XM_PERMUTE_1X, XM_PERMUTE_1Y, XM_PERMUTE_0W};
; 1326 :     static CONST XMVECTORU32 Permute1Z0Y1W0W = {XM_PERMUTE_1Z, XM_PERMUTE_0Y, XM_PERMUTE_1W, XM_PERMUTE_0W};
; 1327 :     static CONST XMVECTORU32 Permute1X1Y0Z0W = {XM_PERMUTE_1X, XM_PERMUTE_1Y, XM_PERMUTE_0Z, XM_PERMUTE_0W};
; 1328 : 
; 1329 :     FLOAT fSinAngle = sinf(Angle);
; 1330 :     FLOAT fCosAngle = cosf(Angle);
; 1331 : 
; 1332 :     A = XMVectorSet(fSinAngle, fCosAngle, 1.0f - fCosAngle, 0.0f);
; 1333 : 
; 1334 :     C2 = XMVectorSplatZ(A);
; 1335 :     C1 = XMVectorSplatY(A);
; 1336 :     C0 = XMVectorSplatX(A);
; 1337 : 
; 1338 :     N0 = XMVectorPermute(NormalAxis, NormalAxis, SwizzleYZXW.v);
; 1339 :     N1 = XMVectorPermute(NormalAxis, NormalAxis, SwizzleZXYW.v);
; 1340 : 
; 1341 :     V0 = XMVectorMultiply(C2, N0);
; 1342 :     V0 = XMVectorMultiply(V0, N1);
; 1343 : 
; 1344 :     R0 = XMVectorMultiply(C2, NormalAxis);
; 1345 :     R0 = XMVectorMultiplyAdd(R0, NormalAxis, C1);
; 1346 : 
; 1347 :     R1 = XMVectorMultiplyAdd(C0, NormalAxis, V0);
; 1348 :     R2 = XMVectorNegativeMultiplySubtract(C0, NormalAxis, V0);
; 1349 : 
; 1350 :     V0 = XMVectorSelect(A, R0, g_XMSelect1110.v);
; 1351 :     V1 = XMVectorPermute(R1, R2, Permute0Z1Y1Z0X.v);
; 1352 :     V2 = XMVectorPermute(R1, R2, Permute0Y1X0Y1X.v);
; 1353 : 
; 1354 :     M.r[0] = XMVectorPermute(V0, V1, Permute0X1X1Y0W.v);
; 1355 :     M.r[1] = XMVectorPermute(V0, V1, Permute1Z0Y1W0W.v);
; 1356 :     M.r[2] = XMVectorPermute(V0, V2, Permute1X1Y0Z0W.v);
; 1357 :     M.r[3] = g_XMIdentityR3.v;
; 1358 : 
; 1359 :     return M;
; 1360 : 
; 1361 : #elif defined(_XM_SSE_INTRINSICS_)
; 1362 :     XMVECTOR               N0, N1;
; 1363 :     XMVECTOR               V0, V1, V2;
; 1364 :     XMVECTOR               R0, R1, R2;
; 1365 :     XMVECTOR               C0, C1, C2;
; 1366 :     XMMATRIX               M;

  00034	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  0003a	e8 00 00 00 00	 call	 ??0_XMMATRIX@@QAE@XZ	; _XMMATRIX::_XMMATRIX

; 1367 : 
; 1368 :     FLOAT fSinAngle = sinf(Angle);

  0003f	51		 push	 ecx
  00040	d9 43 0c	 fld	 DWORD PTR _Angle$[ebx]
  00043	d9 1c 24	 fstp	 DWORD PTR [esp]
  00046	e8 00 00 00 00	 call	 _sinf
  0004b	83 c4 04	 add	 esp, 4
  0004e	d9 9d e8 fe ff
	ff		 fstp	 DWORD PTR _fSinAngle$[ebp]

; 1369 :     FLOAT fCosAngle = cosf(Angle);

  00054	51		 push	 ecx
  00055	d9 43 0c	 fld	 DWORD PTR _Angle$[ebx]
  00058	d9 1c 24	 fstp	 DWORD PTR [esp]
  0005b	e8 00 00 00 00	 call	 _cosf
  00060	83 c4 04	 add	 esp, 4
  00063	d9 9d e4 fe ff
	ff		 fstp	 DWORD PTR _fCosAngle$[ebp]

; 1370 : 
; 1371 :     C2 = _mm_set_ps1(1.0f - fCosAngle);

  00069	d9 85 e4 fe ff
	ff		 fld	 DWORD PTR _fCosAngle$[ebp]
  0006f	d9 e8		 fld1
  00071	de e1		 fsubrp	 ST(1), ST(0)
  00073	d9 9d 3c fd ff
	ff		 fstp	 DWORD PTR tv233[ebp]
  00079	d9 85 3c fd ff
	ff		 fld	 DWORD PTR tv233[ebp]
  0007f	d9 9d 38 fd ff
	ff		 fstp	 DWORD PTR tv234[ebp]
  00085	f3 0f 10 85 38
	fd ff ff	 movss	 xmm0, DWORD PTR tv234[ebp]
  0008d	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  00091	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T93726[ebp], xmm0
  00098	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93726[ebp]
  0009f	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR _C2$[ebp], xmm0

; 1372 :     C1 = _mm_set_ps1(fCosAngle);

  000a6	f3 0f 10 85 e4
	fe ff ff	 movss	 xmm0, DWORD PTR _fCosAngle$[ebp]
  000ae	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  000b2	0f 29 85 c0 fe
	ff ff		 movaps	 XMMWORD PTR $T93727[ebp], xmm0
  000b9	0f 28 85 c0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93727[ebp]
  000c0	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _C1$[ebp], xmm0

; 1373 :     C0 = _mm_set_ps1(fSinAngle);

  000c7	f3 0f 10 85 e8
	fe ff ff	 movss	 xmm0, DWORD PTR _fSinAngle$[ebp]
  000cf	0f c6 c0 00	 shufps	 xmm0, xmm0, 0
  000d3	0f 29 85 b0 fe
	ff ff		 movaps	 XMMWORD PTR $T93728[ebp], xmm0
  000da	0f 28 85 b0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93728[ebp]
  000e1	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _C0$[ebp], xmm0

; 1374 : 
; 1375 :     N0 = _mm_shuffle_ps(NormalAxis,NormalAxis,_MM_SHUFFLE(3,0,2,1));

  000e8	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  000ec	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _NormalAxis$[ebp]
  000f0	0f c6 c8 c9	 shufps	 xmm1, xmm0, 201		; 000000c9H
  000f4	0f 29 8d a0 fe
	ff ff		 movaps	 XMMWORD PTR $T93729[ebp], xmm1
  000fb	0f 28 85 a0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93729[ebp]
  00102	0f 29 45 e0	 movaps	 XMMWORD PTR _N0$[ebp], xmm0

; 1376 : //    N0 = XMVectorPermute(NormalAxis, NormalAxis, SwizzleYZXW);
; 1377 :     N1 = _mm_shuffle_ps(NormalAxis,NormalAxis,_MM_SHUFFLE(3,1,0,2));

  00106	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  0010a	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _NormalAxis$[ebp]
  0010e	0f c6 c8 d2	 shufps	 xmm1, xmm0, 210		; 000000d2H
  00112	0f 29 8d 90 fe
	ff ff		 movaps	 XMMWORD PTR $T93730[ebp], xmm1
  00119	0f 28 85 90 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93730[ebp]
  00120	0f 29 45 d0	 movaps	 XMMWORD PTR _N1$[ebp], xmm0

; 1378 : //    N1 = XMVectorPermute(NormalAxis, NormalAxis, SwizzleZXYW);
; 1379 : 
; 1380 :     V0 = _mm_mul_ps(C2, N0);

  00124	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _N0$[ebp]
  00128	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _C2$[ebp]
  0012f	0f 59 c8	 mulps	 xmm1, xmm0
  00132	0f 29 8d 80 fe
	ff ff		 movaps	 XMMWORD PTR $T93731[ebp], xmm1
  00139	0f 28 85 80 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93731[ebp]
  00140	0f 29 45 c0	 movaps	 XMMWORD PTR _V0$[ebp], xmm0

; 1381 :     V0 = _mm_mul_ps(V0, N1);

  00144	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _N1$[ebp]
  00148	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  0014c	0f 59 c8	 mulps	 xmm1, xmm0
  0014f	0f 29 8d 70 fe
	ff ff		 movaps	 XMMWORD PTR $T93732[ebp], xmm1
  00156	0f 28 85 70 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93732[ebp]
  0015d	0f 29 45 c0	 movaps	 XMMWORD PTR _V0$[ebp], xmm0

; 1382 : 
; 1383 :     R0 = _mm_mul_ps(C2, NormalAxis);

  00161	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  00165	0f 28 8d 40 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _C2$[ebp]
  0016c	0f 59 c8	 mulps	 xmm1, xmm0
  0016f	0f 29 8d 60 fe
	ff ff		 movaps	 XMMWORD PTR $T93733[ebp], xmm1
  00176	0f 28 85 60 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93733[ebp]
  0017d	0f 29 45 90	 movaps	 XMMWORD PTR _R0$[ebp], xmm0

; 1384 :     R0 = _mm_mul_ps(R0, NormalAxis);

  00181	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  00185	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  00189	0f 59 c8	 mulps	 xmm1, xmm0
  0018c	0f 29 8d 50 fe
	ff ff		 movaps	 XMMWORD PTR $T93734[ebp], xmm1
  00193	0f 28 85 50 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93734[ebp]
  0019a	0f 29 45 90	 movaps	 XMMWORD PTR _R0$[ebp], xmm0

; 1385 :     R0 = _mm_add_ps(R0, C1);

  0019e	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _C1$[ebp]
  001a5	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  001a9	0f 58 c8	 addps	 xmm1, xmm0
  001ac	0f 29 8d 40 fe
	ff ff		 movaps	 XMMWORD PTR $T93735[ebp], xmm1
  001b3	0f 28 85 40 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93735[ebp]
  001ba	0f 29 45 90	 movaps	 XMMWORD PTR _R0$[ebp], xmm0

; 1386 : 
; 1387 :     R1 = _mm_mul_ps(C0, NormalAxis);

  001be	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  001c2	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _C0$[ebp]
  001c9	0f 59 c8	 mulps	 xmm1, xmm0
  001cc	0f 29 8d 30 fe
	ff ff		 movaps	 XMMWORD PTR $T93736[ebp], xmm1
  001d3	0f 28 85 30 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93736[ebp]
  001da	0f 29 45 80	 movaps	 XMMWORD PTR _R1$[ebp], xmm0

; 1388 :     R1 = _mm_add_ps(R1, V0);

  001de	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  001e2	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _R1$[ebp]
  001e6	0f 58 c8	 addps	 xmm1, xmm0
  001e9	0f 29 8d 20 fe
	ff ff		 movaps	 XMMWORD PTR $T93737[ebp], xmm1
  001f0	0f 28 85 20 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93737[ebp]
  001f7	0f 29 45 80	 movaps	 XMMWORD PTR _R1$[ebp], xmm0

; 1389 :     R2 = _mm_mul_ps(C0, NormalAxis);

  001fb	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _NormalAxis$[ebp]
  001ff	0f 28 8d 60 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _C0$[ebp]
  00206	0f 59 c8	 mulps	 xmm1, xmm0
  00209	0f 29 8d 10 fe
	ff ff		 movaps	 XMMWORD PTR $T93738[ebp], xmm1
  00210	0f 28 85 10 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93738[ebp]
  00217	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1390 :     R2 = _mm_sub_ps(V0,R2);

  0021e	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  00225	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  00229	0f 5c c8	 subps	 xmm1, xmm0
  0022c	0f 29 8d 00 fe
	ff ff		 movaps	 XMMWORD PTR $T93739[ebp], xmm1
  00233	0f 28 85 00 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93739[ebp]
  0023a	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1391 : 
; 1392 :     V0 = _mm_and_ps(R0,g_XMMask3);

  00241	8d 85 f0 fd ff
	ff		 lea	 eax, DWORD PTR $T93740[ebp]
  00247	50		 push	 eax
  00248	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMMask3@@3UXMVECTORI32@@B ; g_XMMask3
  0024d	e8 00 00 00 00	 call	 ??BXMVECTORI32@@QBE?AT__m128@@XZ ; XMVECTORI32::operator __m128
  00252	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00255	0f 28 4d 90	 movaps	 xmm1, XMMWORD PTR _R0$[ebp]
  00259	0f 54 c8	 andps	 xmm1, xmm0
  0025c	0f 29 8d e0 fd
	ff ff		 movaps	 XMMWORD PTR $T93741[ebp], xmm1
  00263	0f 28 85 e0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93741[ebp]
  0026a	0f 29 45 c0	 movaps	 XMMWORD PTR _V0$[ebp], xmm0

; 1393 : //    V0 = XMVectorSelect(A, R0, g_XMSelect1110);
; 1394 :     V1 = _mm_shuffle_ps(R1,R2,_MM_SHUFFLE(2,1,2,0));

  0026e	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  00275	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _R1$[ebp]
  00279	0f c6 c8 98	 shufps	 xmm1, xmm0, 152		; 00000098H
  0027d	0f 29 8d d0 fd
	ff ff		 movaps	 XMMWORD PTR $T93742[ebp], xmm1
  00284	0f 28 85 d0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93742[ebp]
  0028b	0f 29 45 b0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 1395 :     V1 = _mm_shuffle_ps(V1,V1,_MM_SHUFFLE(0,3,2,1));

  0028f	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00293	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  00297	0f c6 c8 39	 shufps	 xmm1, xmm0, 57		; 00000039H
  0029b	0f 29 8d c0 fd
	ff ff		 movaps	 XMMWORD PTR $T93743[ebp], xmm1
  002a2	0f 28 85 c0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93743[ebp]
  002a9	0f 29 45 b0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 1396 : //    V1 = XMVectorPermute(R1, R2, Permute0Z1Y1Z0X);
; 1397 :     V2 = _mm_shuffle_ps(R1,R2,_MM_SHUFFLE(0,0,1,1));

  002ad	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  002b4	0f 28 4d 80	 movaps	 xmm1, XMMWORD PTR _R1$[ebp]
  002b8	0f c6 c8 05	 shufps	 xmm1, xmm0, 5
  002bc	0f 29 8d b0 fd
	ff ff		 movaps	 XMMWORD PTR $T93744[ebp], xmm1
  002c3	0f 28 85 b0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93744[ebp]
  002ca	0f 29 45 a0	 movaps	 XMMWORD PTR _V2$[ebp], xmm0

; 1398 :     V2 = _mm_shuffle_ps(V2,V2,_MM_SHUFFLE(2,0,2,0));

  002ce	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  002d2	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  002d6	0f c6 c8 88	 shufps	 xmm1, xmm0, 136		; 00000088H
  002da	0f 29 8d a0 fd
	ff ff		 movaps	 XMMWORD PTR $T93745[ebp], xmm1
  002e1	0f 28 85 a0 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93745[ebp]
  002e8	0f 29 45 a0	 movaps	 XMMWORD PTR _V2$[ebp], xmm0

; 1399 : //    V2 = XMVectorPermute(R1, R2, Permute0Y1X0Y1X);
; 1400 : 
; 1401 :     R2 = _mm_shuffle_ps(V0,V1,_MM_SHUFFLE(1,0,3,0));

  002ec	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  002f0	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  002f4	0f c6 c8 4c	 shufps	 xmm1, xmm0, 76		; 0000004cH
  002f8	0f 29 8d 90 fd
	ff ff		 movaps	 XMMWORD PTR $T93746[ebp], xmm1
  002ff	0f 28 85 90 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93746[ebp]
  00306	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1402 :     R2 = _mm_shuffle_ps(R2,R2,_MM_SHUFFLE(1,3,2,0));

  0030d	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  00314	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R2$[ebp]
  0031b	0f c6 c8 78	 shufps	 xmm1, xmm0, 120		; 00000078H
  0031f	0f 29 8d 80 fd
	ff ff		 movaps	 XMMWORD PTR $T93747[ebp], xmm1
  00326	0f 28 85 80 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93747[ebp]
  0032d	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1403 :     M.r[0] = R2;

  00334	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  0033b	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR _M$[ebp], xmm0

; 1404 : //    M.r[0] = XMVectorPermute(V0, V1, Permute0X1X1Y0W);
; 1405 :     R2 = _mm_shuffle_ps(V0,V1,_MM_SHUFFLE(3,2,3,1));

  00342	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _V1$[ebp]
  00346	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _V0$[ebp]
  0034a	0f c6 c8 ed	 shufps	 xmm1, xmm0, 237		; 000000edH
  0034e	0f 29 8d 70 fd
	ff ff		 movaps	 XMMWORD PTR $T93748[ebp], xmm1
  00355	0f 28 85 70 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93748[ebp]
  0035c	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1406 :     R2 = _mm_shuffle_ps(R2,R2,_MM_SHUFFLE(1,3,0,2));

  00363	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  0036a	0f 28 8d 70 ff
	ff ff		 movaps	 xmm1, XMMWORD PTR _R2$[ebp]
  00371	0f c6 c8 72	 shufps	 xmm1, xmm0, 114		; 00000072H
  00375	0f 29 8d 60 fd
	ff ff		 movaps	 XMMWORD PTR $T93749[ebp], xmm1
  0037c	0f 28 85 60 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93749[ebp]
  00383	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _R2$[ebp], xmm0

; 1407 :     M.r[1] = R2;

  0038a	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR _R2$[ebp]
  00391	0f 29 85 00 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp+16], xmm0

; 1408 : //    M.r[1] = XMVectorPermute(V0, V1, Permute1Z0Y1W0W);
; 1409 :     V2 = _mm_shuffle_ps(V2,V0,_MM_SHUFFLE(3,2,1,0));

  00398	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _V0$[ebp]
  0039c	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _V2$[ebp]
  003a0	0f c6 c8 e4	 shufps	 xmm1, xmm0, 228		; 000000e4H
  003a4	0f 29 8d 50 fd
	ff ff		 movaps	 XMMWORD PTR $T93750[ebp], xmm1
  003ab	0f 28 85 50 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93750[ebp]
  003b2	0f 29 45 a0	 movaps	 XMMWORD PTR _V2$[ebp], xmm0

; 1410 : //    R2 = _mm_shuffle_ps(R2,R2,_MM_SHUFFLE(3,2,1,0));
; 1411 :     M.r[2] = V2;

  003b6	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  003ba	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp+32], xmm0

; 1412 : //    M.r[2] = XMVectorPermute(V0, V2, Permute1X1Y0Z0W);
; 1413 :     M.r[3] = g_XMIdentityR3;

  003c1	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR $T93751[ebp]
  003c7	51		 push	 ecx
  003c8	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@@3UXMVECTORF32@@B ; g_XMIdentityR3
  003cd	e8 00 00 00 00	 call	 ??BXMVECTORF32@@QBE?AT__m128@@XZ ; XMVECTORF32::operator __m128
  003d2	0f 28 85 40 fd
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93751[ebp]
  003d9	0f 29 85 20 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp+48], xmm0

; 1414 :     return M;

  003e0	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003e5	8d b5 f0 fe ff
	ff		 lea	 esi, DWORD PTR _M$[ebp]
  003eb	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  003ee	f3 a5		 rep movsd
  003f0	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 1415 : #else // _XM_VMX128_INTRINSICS_
; 1416 : #endif // _XM_VMX128_INTRINSICS_
; 1417 : }

  003f3	52		 push	 edx
  003f4	8b cd		 mov	 ecx, ebp
  003f6	50		 push	 eax
  003f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixRo@2
  003fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00402	58		 pop	 eax
  00403	5a		 pop	 edx
  00404	5f		 pop	 edi
  00405	5e		 pop	 esi
  00406	8b e5		 mov	 esp, ebp
  00408	5d		 pop	 ebp
  00409	8b e3		 mov	 esp, ebx
  0040b	5b		 pop	 ebx
  0040c	c3		 ret	 0
  0040d	8d 49 00	 npad	 3
$LN5@XMMatrixRo@2:
  00410	01 00 00 00	 DD	 1
  00414	00 00 00 00	 DD	 $LN4@XMMatrixRo@2
$LN4@XMMatrixRo@2:
  00418	f0 fe ff ff	 DD	 -272			; fffffef0H
  0041c	40 00 00 00	 DD	 64			; 00000040H
  00420	00 00 00 00	 DD	 $LN3@XMMatrixRo@2
$LN3@XMMatrixRo@2:
  00424	4d		 DB	 77			; 0000004dH
  00425	00		 DB	 0
?XMMatrixRotationNormal@@YA?AU_XMMATRIX@@T__m128@@M@Z ENDP ; XMMatrixRotationNormal
_TEXT	ENDS
PUBLIC	?XMMatrixRotationY@@YA?AU_XMMATRIX@@M@Z		; XMMatrixRotationY
PUBLIC	?RotateY@Camera@@QAEXM@Z			; Camera::RotateY
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124083 = -192						; size = 16
$T124082 = -176						; size = 16
$T124081 = -160						; size = 16
$T124080 = -144						; size = 16
$T124079 = -128						; size = 16
$T124078 = -112						; size = 16
_R$ = -80						; size = 64
_this$ = -4						; size = 4
_angle$ = 8						; size = 4
?RotateY@Camera@@QAEXM@Z PROC				; Camera::RotateY
; _this$ = ecx

; 196  : {

  00be0	53		 push	 ebx
  00be1	8b dc		 mov	 ebx, esp
  00be3	83 ec 08	 sub	 esp, 8
  00be6	83 e4 f0	 and	 esp, -16		; fffffff0H
  00be9	83 c4 04	 add	 esp, 4
  00bec	55		 push	 ebp
  00bed	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00bf0	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00bf4	8b ec		 mov	 ebp, esp
  00bf6	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00bfc	57		 push	 edi
  00bfd	51		 push	 ecx
  00bfe	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00c04	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00c09	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00c0e	f3 ab		 rep stosd
  00c10	59		 pop	 ecx
  00c11	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 197  : 	// Rotate the basis vectors about the world y-axis.
; 198  : 
; 199  : 	XMMATRIX R = XMMatrixRotationY(angle);

  00c14	51		 push	 ecx
  00c15	d9 43 08	 fld	 DWORD PTR _angle$[ebx]
  00c18	d9 1c 24	 fstp	 DWORD PTR [esp]
  00c1b	8d 45 b0	 lea	 eax, DWORD PTR _R$[ebp]
  00c1e	50		 push	 eax
  00c1f	e8 00 00 00 00	 call	 ?XMMatrixRotationY@@YA?AU_XMMATRIX@@M@Z ; XMMatrixRotationY
  00c24	83 c4 08	 add	 esp, 8

; 200  : 
; 201  : 	XMStoreFloat3(&mRight,   XMVector3TransformNormal(XMLoadFloat3(&mRight), R));

  00c27	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c2a	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00c2d	51		 push	 ecx
  00c2e	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00c33	83 c4 04	 add	 esp, 4
  00c36	0f 29 45 90	 movaps	 XMMWORD PTR $T124078[ebp], xmm0
  00c3a	8d 55 b0	 lea	 edx, DWORD PTR _R$[ebp]
  00c3d	52		 push	 edx
  00c3e	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124078[ebp]
  00c42	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
  00c47	83 c4 04	 add	 esp, 4
  00c4a	0f 29 45 80	 movaps	 XMMWORD PTR $T124079[ebp], xmm0
  00c4e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T124079[ebp]
  00c52	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c55	83 c0 0c	 add	 eax, 12			; 0000000cH
  00c58	50		 push	 eax
  00c59	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00c5e	83 c4 04	 add	 esp, 4

; 202  : 	XMStoreFloat3(&mUp, XMVector3TransformNormal(XMLoadFloat3(&mUp), R));

  00c61	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00c64	83 c1 18	 add	 ecx, 24			; 00000018H
  00c67	51		 push	 ecx
  00c68	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00c6d	83 c4 04	 add	 esp, 4
  00c70	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T124080[ebp], xmm0
  00c77	8d 55 b0	 lea	 edx, DWORD PTR _R$[ebp]
  00c7a	52		 push	 edx
  00c7b	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124080[ebp]
  00c82	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
  00c87	83 c4 04	 add	 esp, 4
  00c8a	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T124081[ebp], xmm0
  00c91	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124081[ebp]
  00c98	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00c9b	83 c0 18	 add	 eax, 24			; 00000018H
  00c9e	50		 push	 eax
  00c9f	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00ca4	83 c4 04	 add	 esp, 4

; 203  : 	XMStoreFloat3(&mLook, XMVector3TransformNormal(XMLoadFloat3(&mLook), R));

  00ca7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00caa	83 c1 24	 add	 ecx, 36			; 00000024H
  00cad	51		 push	 ecx
  00cae	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00cb3	83 c4 04	 add	 esp, 4
  00cb6	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T124082[ebp], xmm0
  00cbd	8d 55 b0	 lea	 edx, DWORD PTR _R$[ebp]
  00cc0	52		 push	 edx
  00cc1	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124082[ebp]
  00cc8	e8 00 00 00 00	 call	 ?XMVector3TransformNormal@@YA?AT__m128@@T1@ABU_XMMATRIX@@@Z ; XMVector3TransformNormal
  00ccd	83 c4 04	 add	 esp, 4
  00cd0	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T124083[ebp], xmm0
  00cd7	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124083[ebp]
  00cde	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ce1	83 c0 24	 add	 eax, 36			; 00000024H
  00ce4	50		 push	 eax
  00ce5	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00cea	83 c4 04	 add	 esp, 4

; 204  : }

  00ced	52		 push	 edx
  00cee	8b cd		 mov	 ecx, ebp
  00cf0	50		 push	 eax
  00cf1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@RotateY
  00cf7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00cfc	58		 pop	 eax
  00cfd	5a		 pop	 edx
  00cfe	5f		 pop	 edi
  00cff	8b e5		 mov	 esp, ebp
  00d01	5d		 pop	 ebp
  00d02	8b e3		 mov	 esp, ebx
  00d04	5b		 pop	 ebx
  00d05	c2 04 00	 ret	 4
$LN5@RotateY:
  00d08	01 00 00 00	 DD	 1
  00d0c	00 00 00 00	 DD	 $LN4@RotateY
$LN4@RotateY:
  00d10	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00d14	40 00 00 00	 DD	 64			; 00000040H
  00d18	00 00 00 00	 DD	 $LN3@RotateY
$LN3@RotateY:
  00d1c	52		 DB	 82			; 00000052H
  00d1d	00		 DB	 0
?RotateY@Camera@@QAEXM@Z ENDP				; Camera::RotateY
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathmatrix.inl
_TEXT	ENDS
;	COMDAT ?XMMatrixRotationY@@YA?AU_XMMATRIX@@M@Z
_TEXT	SEGMENT
$T93668 = -272						; size = 16
$T93667 = -256						; size = 16
$T93666 = -240						; size = 16
$T93665 = -224						; size = 16
$T93663 = -208						; size = 16
_M$ = -176						; size = 64
$T93661 = -96						; size = 16
$T93660 = -80						; size = 16
_vCos$ = -64						; size = 16
$T93658 = -48						; size = 16
_vSin$ = -32						; size = 16
_CosAngle$ = -8						; size = 4
_SinAngle$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_Angle$ = 12						; size = 4
?XMMatrixRotationY@@YA?AU_XMMATRIX@@M@Z PROC		; XMMatrixRotationY, COMDAT

; 1167 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd e8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-280]
  00024	b9 46 00 00 00	 mov	 ecx, 70			; 00000046H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd

; 1168 : #if defined(_XM_NO_INTRINSICS_)
; 1169 :     XMMATRIX M;
; 1170 :  
; 1171 :     FLOAT fSinAngle = sinf(Angle);
; 1172 :     FLOAT fCosAngle = cosf(Angle);
; 1173 : 
; 1174 :     M.m[0][0] = fCosAngle;
; 1175 :     M.m[0][1] = 0.0f;
; 1176 :     M.m[0][2] = -fSinAngle;
; 1177 :     M.m[0][3] = 0.0f;
; 1178 : 
; 1179 :     M.m[1][0] = 0.0f;
; 1180 :     M.m[1][1] = 1.0f;
; 1181 :     M.m[1][2] = 0.0f;
; 1182 :     M.m[1][3] = 0.0f;
; 1183 : 
; 1184 :     M.m[2][0] = fSinAngle;
; 1185 :     M.m[2][1] = 0.0f;
; 1186 :     M.m[2][2] = fCosAngle;
; 1187 :     M.m[2][3] = 0.0f;
; 1188 : 
; 1189 :     M.m[3][0] = 0.0f;
; 1190 :     M.m[3][1] = 0.0f;
; 1191 :     M.m[3][2] = 0.0f;
; 1192 :     M.m[3][3] = 1.0f;
; 1193 :     return M;
; 1194 : #elif defined(_XM_SSE_INTRINSICS_)
; 1195 :     FLOAT SinAngle = sinf(Angle);

  00030	51		 push	 ecx
  00031	d9 43 0c	 fld	 DWORD PTR _Angle$[ebx]
  00034	d9 1c 24	 fstp	 DWORD PTR [esp]
  00037	e8 00 00 00 00	 call	 _sinf
  0003c	83 c4 04	 add	 esp, 4
  0003f	d9 5d fc	 fstp	 DWORD PTR _SinAngle$[ebp]

; 1196 :     FLOAT CosAngle = cosf(Angle);

  00042	51		 push	 ecx
  00043	d9 43 0c	 fld	 DWORD PTR _Angle$[ebx]
  00046	d9 1c 24	 fstp	 DWORD PTR [esp]
  00049	e8 00 00 00 00	 call	 _cosf
  0004e	83 c4 04	 add	 esp, 4
  00051	d9 5d f8	 fstp	 DWORD PTR _CosAngle$[ebp]

; 1197 : 
; 1198 :     XMVECTOR vSin = _mm_set_ss(SinAngle);

  00054	0f 57 c0	 xorps	 xmm0, xmm0
  00057	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _SinAngle$[ebp]
  0005c	f3 0f 10 c1	 movss	 xmm0, xmm1
  00060	0f 29 45 d0	 movaps	 XMMWORD PTR $T93658[ebp], xmm0
  00064	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T93658[ebp]
  00068	0f 29 45 e0	 movaps	 XMMWORD PTR _vSin$[ebp], xmm0

; 1199 :     XMVECTOR vCos = _mm_set_ss(CosAngle);

  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _CosAngle$[ebp]
  00074	f3 0f 10 c1	 movss	 xmm0, xmm1
  00078	0f 29 45 b0	 movaps	 XMMWORD PTR $T93660[ebp], xmm0
  0007c	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T93660[ebp]
  00080	0f 29 45 c0	 movaps	 XMMWORD PTR _vCos$[ebp], xmm0

; 1200 :     // x = sin,y = 0,z = cos, w = 0
; 1201 :     vSin = _mm_shuffle_ps(vSin,vCos,_MM_SHUFFLE(3,0,3,0));

  00084	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _vCos$[ebp]
  00088	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vSin$[ebp]
  0008c	0f c6 c8 cc	 shufps	 xmm1, xmm0, 204		; 000000ccH
  00090	0f 29 4d a0	 movaps	 XMMWORD PTR $T93661[ebp], xmm1
  00094	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T93661[ebp]
  00098	0f 29 45 e0	 movaps	 XMMWORD PTR _vSin$[ebp], xmm0

; 1202 :     XMMATRIX M;

  0009c	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _M$[ebp]
  000a2	e8 00 00 00 00	 call	 ??0_XMMATRIX@@QAE@XZ	; _XMMATRIX::_XMMATRIX

; 1203 :     M.r[2] = vSin;

  000a7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vSin$[ebp]
  000ab	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp+32], xmm0

; 1204 :     M.r[1] = g_XMIdentityR1;

  000b2	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR $T93663[ebp]
  000b8	50		 push	 eax
  000b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR1@@3UXMVECTORF32@@B ; g_XMIdentityR1
  000be	e8 00 00 00 00	 call	 ??BXMVECTORF32@@QBE?AT__m128@@XZ ; XMVECTORF32::operator __m128
  000c3	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93663[ebp]
  000ca	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp+16], xmm0

; 1205 :     // x = cos,y = 0,z = sin, w = 0
; 1206 :     vSin = _mm_shuffle_ps(vSin,vSin,_MM_SHUFFLE(3,0,1,2));

  000d1	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vSin$[ebp]
  000d5	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vSin$[ebp]
  000d9	0f c6 c8 c6	 shufps	 xmm1, xmm0, 198		; 000000c6H
  000dd	0f 29 8d 20 ff
	ff ff		 movaps	 XMMWORD PTR $T93665[ebp], xmm1
  000e4	0f 28 85 20 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93665[ebp]
  000eb	0f 29 45 e0	 movaps	 XMMWORD PTR _vSin$[ebp], xmm0

; 1207 :     // x = cos,y = 0,z = -sin, w = 0
; 1208 :     vSin = _mm_mul_ps(vSin,g_XMNegateZ);

  000ef	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T93666[ebp]
  000f5	51		 push	 ecx
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMNegateZ@@3UXMVECTORF32@@B ; g_XMNegateZ
  000fb	e8 00 00 00 00	 call	 ??BXMVECTORF32@@QBE?AT__m128@@XZ ; XMVECTORF32::operator __m128
  00100	0f 28 00	 movaps	 xmm0, XMMWORD PTR [eax]
  00103	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _vSin$[ebp]
  00107	0f 59 c8	 mulps	 xmm1, xmm0
  0010a	0f 29 8d 00 ff
	ff ff		 movaps	 XMMWORD PTR $T93667[ebp], xmm1
  00111	0f 28 85 00 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93667[ebp]
  00118	0f 29 45 e0	 movaps	 XMMWORD PTR _vSin$[ebp], xmm0

; 1209 :     M.r[0] = vSin;

  0011c	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _vSin$[ebp]
  00120	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR _M$[ebp], xmm0

; 1210 :     M.r[3] = g_XMIdentityR3;

  00127	8d 95 f0 fe ff
	ff		 lea	 edx, DWORD PTR $T93668[ebp]
  0012d	52		 push	 edx
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_XMIdentityR3@@3UXMVECTORF32@@B ; g_XMIdentityR3
  00133	e8 00 00 00 00	 call	 ??BXMVECTORF32@@QBE?AT__m128@@XZ ; XMVECTORF32::operator __m128
  00138	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T93668[ebp]
  0013f	0f 29 45 80	 movaps	 XMMWORD PTR _M$[ebp+48], xmm0

; 1211 :     return M;

  00143	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00148	8d b5 50 ff ff
	ff		 lea	 esi, DWORD PTR _M$[ebp]
  0014e	8b 7b 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebx]
  00151	f3 a5		 rep movsd
  00153	8b 43 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebx]

; 1212 : #else // _XM_VMX128_INTRINSICS_
; 1213 : #endif // _XM_VMX128_INTRINSICS_
; 1214 : }

  00156	52		 push	 edx
  00157	8b cd		 mov	 ecx, ebp
  00159	50		 push	 eax
  0015a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@XMMatrixRo@3
  00160	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00165	58		 pop	 eax
  00166	5a		 pop	 edx
  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	8b e3		 mov	 esp, ebx
  0016e	5b		 pop	 ebx
  0016f	c3		 ret	 0
$LN5@XMMatrixRo@3:
  00170	01 00 00 00	 DD	 1
  00174	00 00 00 00	 DD	 $LN4@XMMatrixRo@3
$LN4@XMMatrixRo@3:
  00178	50 ff ff ff	 DD	 -176			; ffffff50H
  0017c	40 00 00 00	 DD	 64			; 00000040H
  00180	00 00 00 00	 DD	 $LN3@XMMatrixRo@3
$LN3@XMMatrixRo@3:
  00184	4d		 DB	 77			; 0000004dH
  00185	00		 DB	 0
?XMMatrixRotationY@@YA?AU_XMMATRIX@@M@Z ENDP		; XMMatrixRotationY
_TEXT	ENDS
PUBLIC	??R_XMFLOAT4X4@@QAEAAMII@Z			; _XMFLOAT4X4::operator()
PUBLIC	?XMVectorGetX@@YAMT__m128@@@Z			; XMVectorGetX
PUBLIC	?XMVector3Dot@@YA?AT__m128@@T1@0@Z		; XMVector3Dot
PUBLIC	?UpdateViewMatrix@Camera@@QAEXXZ		; Camera::UpdateViewMatrix
; Function compile flags: /Odtp /RTCsu
; File f:\common\camera.cpp
_TEXT	SEGMENT
$T124104 = -304						; size = 16
_z$ = -276						; size = 4
$T124102 = -272						; size = 16
_y$ = -244						; size = 4
$T124100 = -240						; size = 16
_x$ = -212						; size = 4
$T124098 = -208						; size = 16
$T124097 = -192						; size = 16
$T124096 = -176						; size = 16
$T124095 = -160						; size = 16
$T124094 = -144						; size = 16
_P$ = -128						; size = 16
$T124092 = -112						; size = 16
_L$ = -96						; size = 16
$T124090 = -80						; size = 16
_U$ = -64						; size = 16
$T124088 = -48						; size = 16
_R$ = -32						; size = 16
_this$ = -4						; size = 4
?UpdateViewMatrix@Camera@@QAEXXZ PROC			; Camera::UpdateViewMatrix
; _this$ = ecx

; 207  : {

  00d20	53		 push	 ebx
  00d21	8b dc		 mov	 ebx, esp
  00d23	83 ec 08	 sub	 esp, 8
  00d26	83 e4 f0	 and	 esp, -16		; fffffff0H
  00d29	83 c4 04	 add	 esp, 4
  00d2c	55		 push	 ebp
  00d2d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00d30	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00d34	8b ec		 mov	 ebp, esp
  00d36	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00d3c	57		 push	 edi
  00d3d	51		 push	 ecx
  00d3e	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00d44	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00d49	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00d4e	f3 ab		 rep stosd
  00d50	59		 pop	 ecx
  00d51	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 208  : 	XMVECTOR R = XMLoadFloat3(&mRight);

  00d54	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00d57	83 c0 0c	 add	 eax, 12			; 0000000cH
  00d5a	50		 push	 eax
  00d5b	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00d60	83 c4 04	 add	 esp, 4
  00d63	0f 29 45 d0	 movaps	 XMMWORD PTR $T124088[ebp], xmm0
  00d67	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR $T124088[ebp]
  00d6b	0f 29 45 e0	 movaps	 XMMWORD PTR _R$[ebp], xmm0

; 209  : 	XMVECTOR U = XMLoadFloat3(&mUp);

  00d6f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00d72	83 c1 18	 add	 ecx, 24			; 00000018H
  00d75	51		 push	 ecx
  00d76	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00d7b	83 c4 04	 add	 esp, 4
  00d7e	0f 29 45 b0	 movaps	 XMMWORD PTR $T124090[ebp], xmm0
  00d82	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR $T124090[ebp]
  00d86	0f 29 45 c0	 movaps	 XMMWORD PTR _U$[ebp], xmm0

; 210  : 	XMVECTOR L = XMLoadFloat3(&mLook);

  00d8a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00d8d	83 c2 24	 add	 edx, 36			; 00000024H
  00d90	52		 push	 edx
  00d91	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00d96	83 c4 04	 add	 esp, 4
  00d99	0f 29 45 90	 movaps	 XMMWORD PTR $T124092[ebp], xmm0
  00d9d	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T124092[ebp]
  00da1	0f 29 45 a0	 movaps	 XMMWORD PTR _L$[ebp], xmm0

; 211  : 	XMVECTOR P = XMLoadFloat3(&mPosition);

  00da5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00da8	50		 push	 eax
  00da9	e8 00 00 00 00	 call	 ?XMLoadFloat3@@YA?AT__m128@@PBU_XMFLOAT3@@@Z ; XMLoadFloat3
  00dae	83 c4 04	 add	 esp, 4
  00db1	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR $T124094[ebp], xmm0
  00db8	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124094[ebp]
  00dbf	0f 29 45 80	 movaps	 XMMWORD PTR _P$[ebp], xmm0

; 212  : 
; 213  : 	// Keep camera's axes orthogonal to each other and of unit length.
; 214  : 	L = XMVector3Normalize(L);

  00dc3	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  00dc7	e8 00 00 00 00	 call	 ?XMVector3Normalize@@YA?AT__m128@@T1@@Z ; XMVector3Normalize
  00dcc	0f 29 85 60 ff
	ff ff		 movaps	 XMMWORD PTR $T124095[ebp], xmm0
  00dd3	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124095[ebp]
  00dda	0f 29 45 a0	 movaps	 XMMWORD PTR _L$[ebp], xmm0

; 215  : 	U = XMVector3Normalize(XMVector3Cross(L, R));

  00dde	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _R$[ebp]
  00de2	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  00de6	e8 00 00 00 00	 call	 ?XMVector3Cross@@YA?AT__m128@@T1@0@Z ; XMVector3Cross
  00deb	0f 29 85 50 ff
	ff ff		 movaps	 XMMWORD PTR $T124096[ebp], xmm0
  00df2	0f 28 85 50 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124096[ebp]
  00df9	e8 00 00 00 00	 call	 ?XMVector3Normalize@@YA?AT__m128@@T1@@Z ; XMVector3Normalize
  00dfe	0f 29 85 40 ff
	ff ff		 movaps	 XMMWORD PTR $T124097[ebp], xmm0
  00e05	0f 28 85 40 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124097[ebp]
  00e0c	0f 29 45 c0	 movaps	 XMMWORD PTR _U$[ebp], xmm0

; 216  : 
; 217  : 	// U, L already ortho-normal, so no need to normalize cross product.
; 218  : 	R = XMVector3Cross(U, L); 

  00e10	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _L$[ebp]
  00e14	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _U$[ebp]
  00e18	e8 00 00 00 00	 call	 ?XMVector3Cross@@YA?AT__m128@@T1@0@Z ; XMVector3Cross
  00e1d	0f 29 85 30 ff
	ff ff		 movaps	 XMMWORD PTR $T124098[ebp], xmm0
  00e24	0f 28 85 30 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124098[ebp]
  00e2b	0f 29 45 e0	 movaps	 XMMWORD PTR _R$[ebp], xmm0

; 219  : 
; 220  : 	// Fill in the view matrix entries.
; 221  : 	float x = -XMVectorGetX(XMVector3Dot(P, R));

  00e2f	0f 28 4d e0	 movaps	 xmm1, XMMWORD PTR _R$[ebp]
  00e33	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _P$[ebp]
  00e37	e8 00 00 00 00	 call	 ?XMVector3Dot@@YA?AT__m128@@T1@0@Z ; XMVector3Dot
  00e3c	0f 29 85 10 ff
	ff ff		 movaps	 XMMWORD PTR $T124100[ebp], xmm0
  00e43	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124100[ebp]
  00e4a	e8 00 00 00 00	 call	 ?XMVectorGetX@@YAMT__m128@@@Z ; XMVectorGetX
  00e4f	d9 e0		 fchs
  00e51	d9 9d 2c ff ff
	ff		 fstp	 DWORD PTR _x$[ebp]

; 222  : 	float y = -XMVectorGetX(XMVector3Dot(P, U));

  00e57	0f 28 4d c0	 movaps	 xmm1, XMMWORD PTR _U$[ebp]
  00e5b	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _P$[ebp]
  00e5f	e8 00 00 00 00	 call	 ?XMVector3Dot@@YA?AT__m128@@T1@0@Z ; XMVector3Dot
  00e64	0f 29 85 f0 fe
	ff ff		 movaps	 XMMWORD PTR $T124102[ebp], xmm0
  00e6b	0f 28 85 f0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124102[ebp]
  00e72	e8 00 00 00 00	 call	 ?XMVectorGetX@@YAMT__m128@@@Z ; XMVectorGetX
  00e77	d9 e0		 fchs
  00e79	d9 9d 0c ff ff
	ff		 fstp	 DWORD PTR _y$[ebp]

; 223  : 	float z = -XMVectorGetX(XMVector3Dot(P, L));

  00e7f	0f 28 4d a0	 movaps	 xmm1, XMMWORD PTR _L$[ebp]
  00e83	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR _P$[ebp]
  00e87	e8 00 00 00 00	 call	 ?XMVector3Dot@@YA?AT__m128@@T1@0@Z ; XMVector3Dot
  00e8c	0f 29 85 d0 fe
	ff ff		 movaps	 XMMWORD PTR $T124104[ebp], xmm0
  00e93	0f 28 85 d0 fe
	ff ff		 movaps	 xmm0, XMMWORD PTR $T124104[ebp]
  00e9a	e8 00 00 00 00	 call	 ?XMVectorGetX@@YAMT__m128@@@Z ; XMVectorGetX
  00e9f	d9 e0		 fchs
  00ea1	d9 9d ec fe ff
	ff		 fstp	 DWORD PTR _z$[ebp]

; 224  : 
; 225  : 	XMStoreFloat3(&mRight, R);

  00ea7	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _R$[ebp]
  00eab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00eae	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00eb1	51		 push	 ecx
  00eb2	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00eb7	83 c4 04	 add	 esp, 4

; 226  : 	XMStoreFloat3(&mUp, U);

  00eba	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR _U$[ebp]
  00ebe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00ec1	83 c2 18	 add	 edx, 24			; 00000018H
  00ec4	52		 push	 edx
  00ec5	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00eca	83 c4 04	 add	 esp, 4

; 227  : 	XMStoreFloat3(&mLook, L);

  00ecd	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR _L$[ebp]
  00ed1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00ed4	83 c0 24	 add	 eax, 36			; 00000024H
  00ed7	50		 push	 eax
  00ed8	e8 00 00 00 00	 call	 ?XMStoreFloat3@@YAXPAU_XMFLOAT3@@T__m128@@@Z ; XMStoreFloat3
  00edd	83 c4 04	 add	 esp, 4

; 228  : 
; 229  : 	mView(0,0) = mRight.x; 

  00ee0	6a 00		 push	 0
  00ee2	6a 00		 push	 0
  00ee4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ee7	83 c1 48	 add	 ecx, 72			; 00000048H
  00eea	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00eef	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ef2	d9 41 0c	 fld	 DWORD PTR [ecx+12]
  00ef5	d9 18		 fstp	 DWORD PTR [eax]

; 230  : 	mView(1,0) = mRight.y; 

  00ef7	6a 00		 push	 0
  00ef9	6a 01		 push	 1
  00efb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00efe	83 c1 48	 add	 ecx, 72			; 00000048H
  00f01	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f06	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f09	d9 42 10	 fld	 DWORD PTR [edx+16]
  00f0c	d9 18		 fstp	 DWORD PTR [eax]

; 231  : 	mView(2,0) = mRight.z; 

  00f0e	6a 00		 push	 0
  00f10	6a 02		 push	 2
  00f12	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f15	83 c1 48	 add	 ecx, 72			; 00000048H
  00f18	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f1d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f20	d9 41 14	 fld	 DWORD PTR [ecx+20]
  00f23	d9 18		 fstp	 DWORD PTR [eax]

; 232  : 	mView(3,0) = x;   

  00f25	6a 00		 push	 0
  00f27	6a 03		 push	 3
  00f29	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f2c	83 c1 48	 add	 ecx, 72			; 00000048H
  00f2f	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f34	d9 85 2c ff ff
	ff		 fld	 DWORD PTR _x$[ebp]
  00f3a	d9 18		 fstp	 DWORD PTR [eax]

; 233  : 
; 234  : 	mView(0,1) = mUp.x;

  00f3c	6a 01		 push	 1
  00f3e	6a 00		 push	 0
  00f40	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f43	83 c1 48	 add	 ecx, 72			; 00000048H
  00f46	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f4b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f4e	d9 42 18	 fld	 DWORD PTR [edx+24]
  00f51	d9 18		 fstp	 DWORD PTR [eax]

; 235  : 	mView(1,1) = mUp.y;

  00f53	6a 01		 push	 1
  00f55	6a 01		 push	 1
  00f57	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f5a	83 c1 48	 add	 ecx, 72			; 00000048H
  00f5d	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f62	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f65	d9 41 1c	 fld	 DWORD PTR [ecx+28]
  00f68	d9 18		 fstp	 DWORD PTR [eax]

; 236  : 	mView(2,1) = mUp.z;

  00f6a	6a 01		 push	 1
  00f6c	6a 02		 push	 2
  00f6e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f71	83 c1 48	 add	 ecx, 72			; 00000048H
  00f74	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f79	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00f7c	d9 42 20	 fld	 DWORD PTR [edx+32]
  00f7f	d9 18		 fstp	 DWORD PTR [eax]

; 237  : 	mView(3,1) = y;  

  00f81	6a 01		 push	 1
  00f83	6a 03		 push	 3
  00f85	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f88	83 c1 48	 add	 ecx, 72			; 00000048H
  00f8b	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00f90	d9 85 0c ff ff
	ff		 fld	 DWORD PTR _y$[ebp]
  00f96	d9 18		 fstp	 DWORD PTR [eax]

; 238  : 
; 239  : 	mView(0,2) = mLook.x; 

  00f98	6a 02		 push	 2
  00f9a	6a 00		 push	 0
  00f9c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00f9f	83 c1 48	 add	 ecx, 72			; 00000048H
  00fa2	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00fa7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00faa	d9 41 24	 fld	 DWORD PTR [ecx+36]
  00fad	d9 18		 fstp	 DWORD PTR [eax]

; 240  : 	mView(1,2) = mLook.y; 

  00faf	6a 02		 push	 2
  00fb1	6a 01		 push	 1
  00fb3	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fb6	83 c1 48	 add	 ecx, 72			; 00000048H
  00fb9	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00fbe	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00fc1	d9 42 28	 fld	 DWORD PTR [edx+40]
  00fc4	d9 18		 fstp	 DWORD PTR [eax]

; 241  : 	mView(2,2) = mLook.z; 

  00fc6	6a 02		 push	 2
  00fc8	6a 02		 push	 2
  00fca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fcd	83 c1 48	 add	 ecx, 72			; 00000048H
  00fd0	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00fd5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fd8	d9 41 2c	 fld	 DWORD PTR [ecx+44]
  00fdb	d9 18		 fstp	 DWORD PTR [eax]

; 242  : 	mView(3,2) = z;   

  00fdd	6a 02		 push	 2
  00fdf	6a 03		 push	 3
  00fe1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00fe4	83 c1 48	 add	 ecx, 72			; 00000048H
  00fe7	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  00fec	d9 85 ec fe ff
	ff		 fld	 DWORD PTR _z$[ebp]
  00ff2	d9 18		 fstp	 DWORD PTR [eax]

; 243  : 
; 244  : 	mView(0,3) = 0.0f;

  00ff4	6a 03		 push	 3
  00ff6	6a 00		 push	 0
  00ff8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00ffb	83 c1 48	 add	 ecx, 72			; 00000048H
  00ffe	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  01003	d9 ee		 fldz
  01005	d9 18		 fstp	 DWORD PTR [eax]

; 245  : 	mView(1,3) = 0.0f;

  01007	6a 03		 push	 3
  01009	6a 01		 push	 1
  0100b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0100e	83 c1 48	 add	 ecx, 72			; 00000048H
  01011	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  01016	d9 ee		 fldz
  01018	d9 18		 fstp	 DWORD PTR [eax]

; 246  : 	mView(2,3) = 0.0f;

  0101a	6a 03		 push	 3
  0101c	6a 02		 push	 2
  0101e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01021	83 c1 48	 add	 ecx, 72			; 00000048H
  01024	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  01029	d9 ee		 fldz
  0102b	d9 18		 fstp	 DWORD PTR [eax]

; 247  : 	mView(3,3) = 1.0f;

  0102d	6a 03		 push	 3
  0102f	6a 03		 push	 3
  01031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  01034	83 c1 48	 add	 ecx, 72			; 00000048H
  01037	e8 00 00 00 00	 call	 ??R_XMFLOAT4X4@@QAEAAMII@Z ; _XMFLOAT4X4::operator()
  0103c	d9 e8		 fld1
  0103e	d9 18		 fstp	 DWORD PTR [eax]

; 248  : }

  01040	5f		 pop	 edi
  01041	8b e5		 mov	 esp, ebp
  01043	5d		 pop	 ebp
  01044	8b e3		 mov	 esp, ebx
  01046	5b		 pop	 ebx
  01047	c3		 ret	 0
?UpdateViewMatrix@Camera@@QAEXXZ ENDP			; Camera::UpdateViewMatrix
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamath.h
_TEXT	ENDS
;	COMDAT ??R_XMFLOAT4X4@@QAEAAMII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Row$ = 8						; size = 4
_Column$ = 12						; size = 4
??R_XMFLOAT4X4@@QAEAAMII@Z PROC				; _XMFLOAT4X4::operator(), COMDAT
; _this$ = ecx

; 1803 :     FLOAT&      operator() (UINT Row, UINT Column) { return m[Row][Column]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _Row$[ebp]
  00011	c1 e0 04	 shl	 eax, 4
  00014	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _Column$[ebp]
  0001a	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
??R_XMFLOAT4X4@@QAEAAMII@Z ENDP				; _XMFLOAT4X4::operator()
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\microsoft directx sdk (february 2010)\include\xnamathvector.inl
_TEXT	ENDS
;	COMDAT ?XMVectorGetX@@YAMT__m128@@@Z
_TEXT	SEGMENT
tv66 = -24						; size = 4
tv67 = -20						; size = 4
_V$ = -16						; size = 16
?XMVectorGetX@@YAMT__m128@@@Z PROC			; XMVectorGetX, COMDAT
; _V$ = xmm0

; 366  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 20	 sub	 esp, 32			; 00000020H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00021	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00024	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00027	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002a	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002d	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00030	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00033	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00036	0f 29 45 f0	 movaps	 XMMWORD PTR _V$[ebp], xmm0

; 367  : #if defined(_XM_NO_INTRINSICS_)
; 368  :     return V.vector4_f32[0];
; 369  : #elif defined(_XM_SSE_INTRINSICS_)
; 370  : #if defined(_MSC_VER) && (_MSC_VER>=1500)
; 371  :     return _mm_cvtss_f32(V);    

  0003a	0f 28 45 f0	 movaps	 xmm0, XMMWORD PTR _V$[ebp]
  0003e	f3 0f 11 45 ec	 movss	 DWORD PTR tv67[ebp], xmm0
  00043	d9 45 ec	 fld	 DWORD PTR tv67[ebp]
  00046	d9 5d e8	 fstp	 DWORD PTR tv66[ebp]
  00049	d9 45 e8	 fld	 DWORD PTR tv66[ebp]

; 372  : #else
; 373  :     return V.m128_f32[0];
; 374  : #endif
; 375  : #else // _XM_VMX128_INTRINSICS_
; 376  : #endif // _XM_VMX128_INTRINSICS_
; 377  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	8b e3		 mov	 esp, ebx
  00051	5b		 pop	 ebx
  00052	c3		 ret	 0
?XMVectorGetX@@YAMT__m128@@@Z ENDP			; XMVectorGetX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?XMVector3Dot@@YA?AT__m128@@T1@0@Z
_TEXT	SEGMENT
$T91043 = -160						; size = 16
$T91042 = -144						; size = 16
$T91041 = -128						; size = 16
$T91040 = -112						; size = 16
$T91039 = -96						; size = 16
_vTemp$ = -80						; size = 16
$T91037 = -64						; size = 16
_vDot$ = -48						; size = 16
_V2$ = -32						; size = 16
_V1$ = -16						; size = 16
?XMVector3Dot@@YA?AT__m128@@T1@0@Z PROC			; XMVector3Dot, COMDAT
; _V1$ = xmm0
; _V2$ = xmm1

; 7760 : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  0001c	57		 push	 edi
  0001d	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  00023	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	0f 29 4d e0	 movaps	 XMMWORD PTR _V2$[ebp], xmm1
  00033	0f 29 45 f0	 movaps	 XMMWORD PTR _V1$[ebp], xmm0

; 7761 : #if defined(_XM_NO_INTRINSICS_)
; 7762 :     FLOAT fValue = V1.vector4_f32[0] * V2.vector4_f32[0] + V1.vector4_f32[1] * V2.vector4_f32[1] + V1.vector4_f32[2] * V2.vector4_f32[2];
; 7763 :     XMVECTOR vResult = {
; 7764 :         fValue,
; 7765 :         fValue,
; 7766 :         fValue,
; 7767 :         fValue
; 7768 :     };            
; 7769 :     return vResult;
; 7770 : 
; 7771 : #elif defined(_XM_SSE_INTRINSICS_)
; 7772 :     // Perform the dot product
; 7773 :     XMVECTOR vDot = _mm_mul_ps(V1,V2);

  00037	0f 28 45 e0	 movaps	 xmm0, XMMWORD PTR _V2$[ebp]
  0003b	0f 28 4d f0	 movaps	 xmm1, XMMWORD PTR _V1$[ebp]
  0003f	0f 59 c8	 mulps	 xmm1, xmm0
  00042	0f 29 4d c0	 movaps	 XMMWORD PTR $T91037[ebp], xmm1
  00046	0f 28 45 c0	 movaps	 xmm0, XMMWORD PTR $T91037[ebp]
  0004a	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0

; 7774 :     // x=Dot.vector4_f32[1], y=Dot.vector4_f32[2]
; 7775 :     XMVECTOR vTemp = _mm_shuffle_ps(vDot,vDot,_MM_SHUFFLE(2,1,2,1));

  0004e	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  00052	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vDot$[ebp]
  00056	0f c6 c8 99	 shufps	 xmm1, xmm0, 153		; 00000099H
  0005a	0f 29 4d a0	 movaps	 XMMWORD PTR $T91039[ebp], xmm1
  0005e	0f 28 45 a0	 movaps	 xmm0, XMMWORD PTR $T91039[ebp]
  00062	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 7776 :     // Result.vector4_f32[0] = x+y
; 7777 :     vDot = _mm_add_ss(vDot,vTemp);

  00066	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0006a	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vDot$[ebp]
  0006e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00072	0f 29 4d 90	 movaps	 XMMWORD PTR $T91040[ebp], xmm1
  00076	0f 28 45 90	 movaps	 xmm0, XMMWORD PTR $T91040[ebp]
  0007a	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0

; 7778 :     // x=Dot.vector4_f32[2]
; 7779 :     vTemp = _mm_shuffle_ps(vTemp,vTemp,_MM_SHUFFLE(1,1,1,1));

  0007e	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  00082	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR _vTemp$[ebp]
  00086	0f c6 c8 55	 shufps	 xmm1, xmm0, 85		; 00000055H
  0008a	0f 29 4d 80	 movaps	 XMMWORD PTR $T91041[ebp], xmm1
  0008e	0f 28 45 80	 movaps	 xmm0, XMMWORD PTR $T91041[ebp]
  00092	0f 29 45 b0	 movaps	 XMMWORD PTR _vTemp$[ebp], xmm0

; 7780 :     // Result.vector4_f32[0] = (x+y)+z
; 7781 :     vDot = _mm_add_ss(vDot,vTemp);

  00096	0f 28 45 b0	 movaps	 xmm0, XMMWORD PTR _vTemp$[ebp]
  0009a	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vDot$[ebp]
  0009e	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a2	0f 29 8d 70 ff
	ff ff		 movaps	 XMMWORD PTR $T91042[ebp], xmm1
  000a9	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91042[ebp]
  000b0	0f 29 45 d0	 movaps	 XMMWORD PTR _vDot$[ebp], xmm0

; 7782 :     // Splat x
; 7783 : 	return _mm_shuffle_ps(vDot,vDot,_MM_SHUFFLE(0,0,0,0));

  000b4	0f 28 45 d0	 movaps	 xmm0, XMMWORD PTR _vDot$[ebp]
  000b8	0f 28 4d d0	 movaps	 xmm1, XMMWORD PTR _vDot$[ebp]
  000bc	0f c6 c8 00	 shufps	 xmm1, xmm0, 0
  000c0	0f 29 8d 60 ff
	ff ff		 movaps	 XMMWORD PTR $T91043[ebp], xmm1
  000c7	0f 28 85 60 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR $T91043[ebp]

; 7784 : #else // _XM_VMX128_INTRINSICS_
; 7785 : #endif // _XM_VMX128_INTRINSICS_
; 7786 : }

  000ce	5f		 pop	 edi
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	8b e3		 mov	 esp, ebx
  000d4	5b		 pop	 ebx
  000d5	c3		 ret	 0
?XMVector3Dot@@YA?AT__m128@@T1@0@Z ENDP			; XMVector3Dot
_TEXT	ENDS
END
